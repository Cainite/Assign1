

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Mon Aug 22 16:29:21 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	intentry,global,class=CODE,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	dabs	1,0x7E,2
    43  0000                     	;# 
    44  0001                     	;# 
    45  0002                     	;# 
    46  0003                     	;# 
    47  0004                     	;# 
    48  0005                     	;# 
    49  0006                     	;# 
    50  0007                     	;# 
    51  0008                     	;# 
    52  0009                     	;# 
    53  000A                     	;# 
    54  000B                     	;# 
    55  000C                     	;# 
    56  000D                     	;# 
    57  000E                     	;# 
    58  000E                     	;# 
    59  000F                     	;# 
    60  0010                     	;# 
    61  0011                     	;# 
    62  0012                     	;# 
    63  0013                     	;# 
    64  0014                     	;# 
    65  0015                     	;# 
    66  0015                     	;# 
    67  0016                     	;# 
    68  0017                     	;# 
    69  0018                     	;# 
    70  0019                     	;# 
    71  001A                     	;# 
    72  001B                     	;# 
    73  001B                     	;# 
    74  001C                     	;# 
    75  001D                     	;# 
    76  001E                     	;# 
    77  001F                     	;# 
    78  0081                     	;# 
    79  0085                     	;# 
    80  0086                     	;# 
    81  0087                     	;# 
    82  0088                     	;# 
    83  0089                     	;# 
    84  008C                     	;# 
    85  008D                     	;# 
    86  008E                     	;# 
    87  0091                     	;# 
    88  0092                     	;# 
    89  0093                     	;# 
    90  0094                     	;# 
    91  0098                     	;# 
    92  0099                     	;# 
    93  009C                     	;# 
    94  009D                     	;# 
    95  009E                     	;# 
    96  009F                     	;# 
    97  010C                     	;# 
    98  010D                     	;# 
    99  010E                     	;# 
   100  010F                     	;# 
   101  018C                     	;# 
   102  018D                     	;# 
   103  0000                     	;# 
   104  0001                     	;# 
   105  0002                     	;# 
   106  0003                     	;# 
   107  0004                     	;# 
   108  0005                     	;# 
   109  0006                     	;# 
   110  0007                     	;# 
   111  0008                     	;# 
   112  0009                     	;# 
   113  000A                     	;# 
   114  000B                     	;# 
   115  000C                     	;# 
   116  000D                     	;# 
   117  000E                     	;# 
   118  000E                     	;# 
   119  000F                     	;# 
   120  0010                     	;# 
   121  0011                     	;# 
   122  0012                     	;# 
   123  0013                     	;# 
   124  0014                     	;# 
   125  0015                     	;# 
   126  0015                     	;# 
   127  0016                     	;# 
   128  0017                     	;# 
   129  0018                     	;# 
   130  0019                     	;# 
   131  001A                     	;# 
   132  001B                     	;# 
   133  001B                     	;# 
   134  001C                     	;# 
   135  001D                     	;# 
   136  001E                     	;# 
   137  001F                     	;# 
   138  0081                     	;# 
   139  0085                     	;# 
   140  0086                     	;# 
   141  0087                     	;# 
   142  0088                     	;# 
   143  0089                     	;# 
   144  008C                     	;# 
   145  008D                     	;# 
   146  008E                     	;# 
   147  0091                     	;# 
   148  0092                     	;# 
   149  0093                     	;# 
   150  0094                     	;# 
   151  0098                     	;# 
   152  0099                     	;# 
   153  009C                     	;# 
   154  009D                     	;# 
   155  009E                     	;# 
   156  009F                     	;# 
   157  010C                     	;# 
   158  010D                     	;# 
   159  010E                     	;# 
   160  010F                     	;# 
   161  018C                     	;# 
   162  018D                     	;# 
   163  0000                     	;# 
   164  0001                     	;# 
   165  0002                     	;# 
   166  0003                     	;# 
   167  0004                     	;# 
   168  0005                     	;# 
   169  0006                     	;# 
   170  0007                     	;# 
   171  0008                     	;# 
   172  0009                     	;# 
   173  000A                     	;# 
   174  000B                     	;# 
   175  000C                     	;# 
   176  000D                     	;# 
   177  000E                     	;# 
   178  000E                     	;# 
   179  000F                     	;# 
   180  0010                     	;# 
   181  0011                     	;# 
   182  0012                     	;# 
   183  0013                     	;# 
   184  0014                     	;# 
   185  0015                     	;# 
   186  0015                     	;# 
   187  0016                     	;# 
   188  0017                     	;# 
   189  0018                     	;# 
   190  0019                     	;# 
   191  001A                     	;# 
   192  001B                     	;# 
   193  001B                     	;# 
   194  001C                     	;# 
   195  001D                     	;# 
   196  001E                     	;# 
   197  001F                     	;# 
   198  0081                     	;# 
   199  0085                     	;# 
   200  0086                     	;# 
   201  0087                     	;# 
   202  0088                     	;# 
   203  0089                     	;# 
   204  008C                     	;# 
   205  008D                     	;# 
   206  008E                     	;# 
   207  0091                     	;# 
   208  0092                     	;# 
   209  0093                     	;# 
   210  0094                     	;# 
   211  0098                     	;# 
   212  0099                     	;# 
   213  009C                     	;# 
   214  009D                     	;# 
   215  009E                     	;# 
   216  009F                     	;# 
   217  010C                     	;# 
   218  010D                     	;# 
   219  010E                     	;# 
   220  010F                     	;# 
   221  018C                     	;# 
   222  018D                     	;# 
   223  0000                     	;# 
   224  0001                     	;# 
   225  0002                     	;# 
   226  0003                     	;# 
   227  0004                     	;# 
   228  0005                     	;# 
   229  0006                     	;# 
   230  0007                     	;# 
   231  0008                     	;# 
   232  0009                     	;# 
   233  000A                     	;# 
   234  000B                     	;# 
   235  000C                     	;# 
   236  000D                     	;# 
   237  000E                     	;# 
   238  000E                     	;# 
   239  000F                     	;# 
   240  0010                     	;# 
   241  0011                     	;# 
   242  0012                     	;# 
   243  0013                     	;# 
   244  0014                     	;# 
   245  0015                     	;# 
   246  0015                     	;# 
   247  0016                     	;# 
   248  0017                     	;# 
   249  0018                     	;# 
   250  0019                     	;# 
   251  001A                     	;# 
   252  001B                     	;# 
   253  001B                     	;# 
   254  001C                     	;# 
   255  001D                     	;# 
   256  001E                     	;# 
   257  001F                     	;# 
   258  0081                     	;# 
   259  0085                     	;# 
   260  0086                     	;# 
   261  0087                     	;# 
   262  0088                     	;# 
   263  0089                     	;# 
   264  008C                     	;# 
   265  008D                     	;# 
   266  008E                     	;# 
   267  0091                     	;# 
   268  0092                     	;# 
   269  0093                     	;# 
   270  0094                     	;# 
   271  0098                     	;# 
   272  0099                     	;# 
   273  009C                     	;# 
   274  009D                     	;# 
   275  009E                     	;# 
   276  009F                     	;# 
   277  010C                     	;# 
   278  010D                     	;# 
   279  010E                     	;# 
   280  010F                     	;# 
   281  018C                     	;# 
   282  018D                     	;# 
   283  0000                     	;# 
   284  0001                     	;# 
   285  0002                     	;# 
   286  0003                     	;# 
   287  0004                     	;# 
   288  0005                     	;# 
   289  0006                     	;# 
   290  0007                     	;# 
   291  0008                     	;# 
   292  0009                     	;# 
   293  000A                     	;# 
   294  000B                     	;# 
   295  000C                     	;# 
   296  000D                     	;# 
   297  000E                     	;# 
   298  000E                     	;# 
   299  000F                     	;# 
   300  0010                     	;# 
   301  0011                     	;# 
   302  0012                     	;# 
   303  0013                     	;# 
   304  0014                     	;# 
   305  0015                     	;# 
   306  0015                     	;# 
   307  0016                     	;# 
   308  0017                     	;# 
   309  0018                     	;# 
   310  0019                     	;# 
   311  001A                     	;# 
   312  001B                     	;# 
   313  001B                     	;# 
   314  001C                     	;# 
   315  001D                     	;# 
   316  001E                     	;# 
   317  001F                     	;# 
   318  0081                     	;# 
   319  0085                     	;# 
   320  0086                     	;# 
   321  0087                     	;# 
   322  0088                     	;# 
   323  0089                     	;# 
   324  008C                     	;# 
   325  008D                     	;# 
   326  008E                     	;# 
   327  0091                     	;# 
   328  0092                     	;# 
   329  0093                     	;# 
   330  0094                     	;# 
   331  0098                     	;# 
   332  0099                     	;# 
   333  009C                     	;# 
   334  009D                     	;# 
   335  009E                     	;# 
   336  009F                     	;# 
   337  010C                     	;# 
   338  010D                     	;# 
   339  010E                     	;# 
   340  010F                     	;# 
   341  018C                     	;# 
   342  018D                     	;# 
   343  0000                     	;# 
   344  0001                     	;# 
   345  0002                     	;# 
   346  0003                     	;# 
   347  0004                     	;# 
   348  0005                     	;# 
   349  0006                     	;# 
   350  0007                     	;# 
   351  0008                     	;# 
   352  0009                     	;# 
   353  000A                     	;# 
   354  000B                     	;# 
   355  000C                     	;# 
   356  000D                     	;# 
   357  000E                     	;# 
   358  000E                     	;# 
   359  000F                     	;# 
   360  0010                     	;# 
   361  0011                     	;# 
   362  0012                     	;# 
   363  0013                     	;# 
   364  0014                     	;# 
   365  0015                     	;# 
   366  0015                     	;# 
   367  0016                     	;# 
   368  0017                     	;# 
   369  0018                     	;# 
   370  0019                     	;# 
   371  001A                     	;# 
   372  001B                     	;# 
   373  001B                     	;# 
   374  001C                     	;# 
   375  001D                     	;# 
   376  001E                     	;# 
   377  001F                     	;# 
   378  0081                     	;# 
   379  0085                     	;# 
   380  0086                     	;# 
   381  0087                     	;# 
   382  0088                     	;# 
   383  0089                     	;# 
   384  008C                     	;# 
   385  008D                     	;# 
   386  008E                     	;# 
   387  0091                     	;# 
   388  0092                     	;# 
   389  0093                     	;# 
   390  0094                     	;# 
   391  0098                     	;# 
   392  0099                     	;# 
   393  009C                     	;# 
   394  009D                     	;# 
   395  009E                     	;# 
   396  009F                     	;# 
   397  010C                     	;# 
   398  010D                     	;# 
   399  010E                     	;# 
   400  010F                     	;# 
   401  018C                     	;# 
   402  018D                     	;# 
   403  0000                     	;# 
   404  0001                     	;# 
   405  0002                     	;# 
   406  0003                     	;# 
   407  0004                     	;# 
   408  0005                     	;# 
   409  0006                     	;# 
   410  0007                     	;# 
   411  0008                     	;# 
   412  0009                     	;# 
   413  000A                     	;# 
   414  000B                     	;# 
   415  000C                     	;# 
   416  000D                     	;# 
   417  000E                     	;# 
   418  000E                     	;# 
   419  000F                     	;# 
   420  0010                     	;# 
   421  0011                     	;# 
   422  0012                     	;# 
   423  0013                     	;# 
   424  0014                     	;# 
   425  0015                     	;# 
   426  0015                     	;# 
   427  0016                     	;# 
   428  0017                     	;# 
   429  0018                     	;# 
   430  0019                     	;# 
   431  001A                     	;# 
   432  001B                     	;# 
   433  001B                     	;# 
   434  001C                     	;# 
   435  001D                     	;# 
   436  001E                     	;# 
   437  001F                     	;# 
   438  0081                     	;# 
   439  0085                     	;# 
   440  0086                     	;# 
   441  0087                     	;# 
   442  0088                     	;# 
   443  0089                     	;# 
   444  008C                     	;# 
   445  008D                     	;# 
   446  008E                     	;# 
   447  0091                     	;# 
   448  0092                     	;# 
   449  0093                     	;# 
   450  0094                     	;# 
   451  0098                     	;# 
   452  0099                     	;# 
   453  009C                     	;# 
   454  009D                     	;# 
   455  009E                     	;# 
   456  009F                     	;# 
   457  010C                     	;# 
   458  010D                     	;# 
   459  010E                     	;# 
   460  010F                     	;# 
   461  018C                     	;# 
   462  018D                     	;# 
   463  0000                     	;# 
   464  0001                     	;# 
   465  0002                     	;# 
   466  0003                     	;# 
   467  0004                     	;# 
   468  0005                     	;# 
   469  0006                     	;# 
   470  0007                     	;# 
   471  0008                     	;# 
   472  0009                     	;# 
   473  000A                     	;# 
   474  000B                     	;# 
   475  000C                     	;# 
   476  000D                     	;# 
   477  000E                     	;# 
   478  000E                     	;# 
   479  000F                     	;# 
   480  0010                     	;# 
   481  0011                     	;# 
   482  0012                     	;# 
   483  0013                     	;# 
   484  0014                     	;# 
   485  0015                     	;# 
   486  0015                     	;# 
   487  0016                     	;# 
   488  0017                     	;# 
   489  0018                     	;# 
   490  0019                     	;# 
   491  001A                     	;# 
   492  001B                     	;# 
   493  001B                     	;# 
   494  001C                     	;# 
   495  001D                     	;# 
   496  001E                     	;# 
   497  001F                     	;# 
   498  0081                     	;# 
   499  0085                     	;# 
   500  0086                     	;# 
   501  0087                     	;# 
   502  0088                     	;# 
   503  0089                     	;# 
   504  008C                     	;# 
   505  008D                     	;# 
   506  008E                     	;# 
   507  0091                     	;# 
   508  0092                     	;# 
   509  0093                     	;# 
   510  0094                     	;# 
   511  0098                     	;# 
   512  0099                     	;# 
   513  009C                     	;# 
   514  009D                     	;# 
   515  009E                     	;# 
   516  009F                     	;# 
   517  010C                     	;# 
   518  010D                     	;# 
   519  010E                     	;# 
   520  010F                     	;# 
   521  018C                     	;# 
   522  018D                     	;# 
   523  0000                     	;# 
   524  0001                     	;# 
   525  0002                     	;# 
   526  0003                     	;# 
   527  0004                     	;# 
   528  0005                     	;# 
   529  0006                     	;# 
   530  0007                     	;# 
   531  0008                     	;# 
   532  0009                     	;# 
   533  000A                     	;# 
   534  000B                     	;# 
   535  000C                     	;# 
   536  000D                     	;# 
   537  000E                     	;# 
   538  000E                     	;# 
   539  000F                     	;# 
   540  0010                     	;# 
   541  0011                     	;# 
   542  0012                     	;# 
   543  0013                     	;# 
   544  0014                     	;# 
   545  0015                     	;# 
   546  0015                     	;# 
   547  0016                     	;# 
   548  0017                     	;# 
   549  0018                     	;# 
   550  0019                     	;# 
   551  001A                     	;# 
   552  001B                     	;# 
   553  001B                     	;# 
   554  001C                     	;# 
   555  001D                     	;# 
   556  001E                     	;# 
   557  001F                     	;# 
   558  0081                     	;# 
   559  0085                     	;# 
   560  0086                     	;# 
   561  0087                     	;# 
   562  0088                     	;# 
   563  0089                     	;# 
   564  008C                     	;# 
   565  008D                     	;# 
   566  008E                     	;# 
   567  0091                     	;# 
   568  0092                     	;# 
   569  0093                     	;# 
   570  0094                     	;# 
   571  0098                     	;# 
   572  0099                     	;# 
   573  009C                     	;# 
   574  009D                     	;# 
   575  009E                     	;# 
   576  009F                     	;# 
   577  010C                     	;# 
   578  010D                     	;# 
   579  010E                     	;# 
   580  010F                     	;# 
   581  018C                     	;# 
   582  018D                     	;# 
   583  001F                     _ADCON0	set	31
   584  001E                     _ADRESH	set	30
   585  0005                     _PORTA	set	5
   586  0007                     _PORTC	set	7
   587  0008                     _PORTD	set	8
   588  0009                     _PORTE	set	9
   589  0001                     _TMR0	set	1
   590  005F                     _GIE	set	95
   591  00FA                     _GO	set	250
   592  0030                     _RB0	set	48
   593  0031                     _RB1	set	49
   594  0032                     _RB2	set	50
   595  0033                     _RB3	set	51
   596  0034                     _RB4	set	52
   597  0036                     _RB6	set	54
   598  0048                     _RE0	set	72
   599  0049                     _RE1	set	73
   600  004A                     _RE2	set	74
   601  005D                     _TMR0IE	set	93
   602  005A                     _TMR0IF	set	90
   603  009F                     _ADCON1	set	159
   604  009E                     _ADRESL	set	158
   605  0081                     _OPTION_REG	set	129
   606  0085                     _TRISA	set	133
   607  0086                     _TRISB	set	134
   608  0087                     _TRISC	set	135
   609  0088                     _TRISD	set	136
   610  0089                     _TRISE	set	137
   611                           
   612                           	psect	text0
   613  0000                     __ptext0:	
   614                           ; #config settings
   615                           
   616                           
   617                           ;psect for function ___lwmod
   618  0000                     
   619                           	psect	cinit
   620  0015                     start_initialization:	
   621  0015                     __initialization:	
   622                           
   623                           ; Clear objects allocated to BITCOMMON
   624  0015  01FA               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   625  0016  01FB               	clrf	((__pbitbssCOMMON/(0+8)+1))& (0+127)
   626                           
   627                           ; Clear objects allocated to COMMON
   628  0017  01FC               	clrf	__pbssCOMMON& (0+127)
   629  0018  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
   630                           
   631                           ; Clear objects allocated to BANK1
   632  0019  1383               	bcf	3,7	;select IRP bank0
   633  001A  30A0               	movlw	low __pbssBANK1
   634  001B  0084               	movwf	4
   635  001C  30B2               	movlw	low (__pbssBANK1+18)
   636  001D  120A  118A  27F8   	fcall	clear_ram0
   637  0020                     end_of_initialization:	
   638                           ;End of C runtime variable initialization code
   639                           
   640  0020                     __end_of__initialization:	
   641  0020  0183               	clrf	3
   642  0021  120A  158A  2D2E   	ljmp	_main	;jump to C main() function
   643                           
   644                           	psect	bitbssCOMMON
   645  03D0                     __pbitbssCOMMON:	
   646  03D0                     _pb1Pressed:	
   647  03D0                     	ds	1
   648  03D1                     _pb1Released:	
   649  03D1                     	ds	1
   650  03D2                     _pb2Pressed:	
   651  03D2                     	ds	1
   652  03D3                     _pb2Released:	
   653  03D3                     	ds	1
   654  03D4                     _pb3Pressed:	
   655  03D4                     	ds	1
   656  03D5                     _pb3Released:	
   657  03D5                     	ds	1
   658  03D6                     _pb5Pressed:	
   659  03D6                     	ds	1
   660  03D7                     _pb5Released:	
   661  03D7                     	ds	1
   662  03D8                     _rtcFlag500MS:	
   663  03D8                     	ds	1
   664                           
   665                           	psect	bssCOMMON
   666  007C                     __pbssCOMMON:	
   667  007C                     _pb1DebounceCount:	
   668  007C                     	ds	1
   669  007D                     _pb2DebounceCount:	
   670  007D                     	ds	1
   671                           
   672                           	psect	bssBANK1
   673  00A0                     __pbssBANK1:	
   674  00A0                     _hundredthDigi:	
   675  00A0                     	ds	2
   676  00A2                     _j:	
   677  00A2                     	ds	2
   678  00A4                     _onesDigi:	
   679  00A4                     	ds	2
   680  00A6                     _rtcCounter:	
   681  00A6                     	ds	2
   682  00A8                     _stepPos:	
   683  00A8                     	ds	2
   684  00AA                     _stepState:	
   685  00AA                     	ds	2
   686  00AC                     _tensDigi:	
   687  00AC                     	ds	2
   688  00AE                     _thousandthDigi:	
   689  00AE                     	ds	2
   690  00B0                     _pb3DebounceCount:	
   691  00B0                     	ds	1
   692  00B1                     _pb5DebounceCount:	
   693  00B1                     	ds	1
   694                           
   695                           	psect	clrtext
   696  07F8                     clear_ram0:	
   697                           ;	Called with FSR containing the base address, and
   698                           ;	W with the last address+1
   699                           
   700  07F8  0064               	clrwdt	;clear the watchdog before getting into this loop
   701  07F9                     clrloop0:	
   702  07F9  0180               	clrf	0	;clear RAM location pointed to by FSR
   703  07FA  0A84               	incf	4,f	;increment pointer
   704  07FB  0604               	xorwf	4,w	;XOR with final address
   705  07FC  1903               	btfsc	3,2	;have we reached the end yet?
   706  07FD  3400               	retlw	0	;all done for this memory range, return
   707  07FE  0604               	xorwf	4,w	;XOR again to restore value
   708  07FF  2FF9               	goto	clrloop0	;do the next byte
   709                           
   710                           	psect	cstackBANK1
   711  00B2                     __pcstackBANK1:	
   712  00B2                     ??_lcdWrite4DigitBcd:	
   713                           
   714                           ; 0 bytes @ 0x0
   715  00B2                     	ds	2
   716  00B4                     lcdWrite4DigitBcd@newdecimal:	
   717                           
   718                           ; 2 bytes @ 0x2
   719  00B4                     	ds	2
   720  00B6                     ??_idle:	
   721  00B6                     ?_ccwMovStepMotor:	
   722                           ; 0 bytes @ 0x4
   723                           
   724  00B6                     ?_cwMovStepMotor:	
   725                           ; 0 bytes @ 0x4
   726                           
   727  00B6                     ccwMovStepMotor@numberOfSteps:	
   728                           ; 0 bytes @ 0x4
   729                           
   730  00B6                     cwMovStepMotor@numberOfSteps:	
   731                           ; 2 bytes @ 0x4
   732                           
   733                           
   734                           ; 2 bytes @ 0x4
   735  00B6                     	ds	2
   736  00B8                     ??_ccwMovStepMotor:	
   737  00B8                     ??_cwMovStepMotor:	
   738                           ; 0 bytes @ 0x6
   739                           
   740                           
   741                           ; 0 bytes @ 0x6
   742  00B8                     	ds	2
   743  00BA                     ccwMovStepMotor@i:	
   744  00BA                     cwMovStepMotor@i:	
   745                           ; 2 bytes @ 0x8
   746                           
   747                           
   748                           ; 2 bytes @ 0x8
   749  00BA                     	ds	2
   750                           
   751                           	psect	cstackCOMMON
   752  0070                     __pcstackCOMMON:	
   753  0070                     ?_init:	
   754  0070                     ?_setupLCD:	
   755                           ; 0 bytes @ 0x0
   756                           
   757  0070                     ?_idle:	
   758                           ; 0 bytes @ 0x0
   759                           
   760  0070                     ?_buttListener:	
   761                           ; 0 bytes @ 0x0
   762                           
   763  0070                     ?_lcdSetCursor:	
   764                           ; 0 bytes @ 0x0
   765                           
   766  0070                     ?_setupADC:	
   767                           ; 0 bytes @ 0x0
   768                           
   769  0070                     ?_main:	
   770                           ; 0 bytes @ 0x0
   771                           
   772  0070                     ?_pressbutton1:	
   773                           ; 0 bytes @ 0x0
   774                           
   775  0070                     ??_pressbutton1:	
   776                           ; 0 bytes @ 0x0
   777                           
   778  0070                     ?_pressbutton2:	
   779                           ; 0 bytes @ 0x0
   780                           
   781  0070                     ??_pressbutton2:	
   782                           ; 0 bytes @ 0x0
   783                           
   784  0070                     ?_pressbutton3:	
   785                           ; 0 bytes @ 0x0
   786                           
   787  0070                     ??_pressbutton3:	
   788                           ; 0 bytes @ 0x0
   789                           
   790  0070                     ?_pressbutton5:	
   791                           ; 0 bytes @ 0x0
   792                           
   793  0070                     ??_pressbutton5:	
   794                           ; 0 bytes @ 0x0
   795                           
   796  0070                     ?_isr:	
   797                           ; 0 bytes @ 0x0
   798                           
   799  0070                     ?_initStepMotor:	
   800                           ; 0 bytes @ 0x0
   801                           
   802  0070                     ?_lcdWriteControl:	
   803                           ; 0 bytes @ 0x0
   804                           
   805  0070                     ?_lcd_WriteData:	
   806                           ; 0 bytes @ 0x0
   807                           
   808  0070                     ?___lwmod:	
   809                           ; 0 bytes @ 0x0
   810                           
   811  0070                     ___lwmod@divisor:	
   812                           ; 2 bytes @ 0x0
   813                           
   814                           
   815                           ; 2 bytes @ 0x0
   816  0070                     	ds	2
   817  0072                     ___lwmod@dividend:	
   818                           
   819                           ; 2 bytes @ 0x2
   820  0072                     	ds	2
   821  0074                     ??___lwmod:	
   822                           
   823                           ; 0 bytes @ 0x4
   824  0074                     	ds	1
   825  0075                     ___lwmod@counter:	
   826                           
   827                           ; 1 bytes @ 0x5
   828  0075                     	ds	1
   829  0076                     ??_isr:	
   830                           
   831                           ; 0 bytes @ 0x6
   832  0076                     	ds	4
   833                           
   834                           	psect	cstackBANK0
   835  0020                     __pcstackBANK0:	
   836  0020                     ??_setupADC:	
   837  0020                     ??_lcdWriteControl:	
   838                           ; 0 bytes @ 0x0
   839                           
   840  0020                     ??_lcd_WriteData:	
   841                           ; 0 bytes @ 0x0
   842                           
   843  0020                     ?_getADC:	
   844                           ; 0 bytes @ 0x0
   845                           
   846  0020                     ?___wmul:	
   847                           ; 2 bytes @ 0x0
   848                           
   849  0020                     ?___ftpack:	
   850                           ; 2 bytes @ 0x0
   851                           
   852  0020                     ___wmul@multiplier:	
   853                           ; 3 bytes @ 0x0
   854                           
   855  0020                     ___ftpack@arg:	
   856                           ; 2 bytes @ 0x0
   857                           
   858                           
   859                           ; 3 bytes @ 0x0
   860  0020                     	ds	2
   861  0022                     ??_getADC:	
   862  0022                     lcdWriteControl@databyte:	
   863                           ; 0 bytes @ 0x2
   864                           
   865  0022                     lcd_WriteData@databyte:	
   866                           ; 1 bytes @ 0x2
   867                           
   868  0022                     ___wmul@multiplicand:	
   869                           ; 1 bytes @ 0x2
   870                           
   871                           
   872                           ; 2 bytes @ 0x2
   873  0022                     	ds	1
   874  0023                     ??_setupLCD:	
   875  0023                     ??_lcdSetCursor:	
   876                           ; 0 bytes @ 0x3
   877                           
   878  0023                     lcdSetCursor@address:	
   879                           ; 0 bytes @ 0x3
   880                           
   881  0023                     ___ftpack@exp:	
   882                           ; 1 bytes @ 0x3
   883                           
   884                           
   885                           ; 1 bytes @ 0x3
   886  0023                     	ds	1
   887  0024                     ??___wmul:	
   888  0024                     ___ftpack@sign:	
   889                           ; 0 bytes @ 0x4
   890                           
   891  0024                     ___wmul@product:	
   892                           ; 1 bytes @ 0x4
   893                           
   894                           
   895                           ; 2 bytes @ 0x4
   896  0024                     	ds	1
   897  0025                     ??___ftpack:	
   898  0025                     getADC@adcRAW:	
   899                           ; 0 bytes @ 0x5
   900                           
   901                           
   902                           ; 2 bytes @ 0x5
   903  0025                     	ds	3
   904  0028                     ?___lwtoft:	
   905  0028                     ___lwtoft@c:	
   906                           ; 3 bytes @ 0x8
   907                           
   908                           
   909                           ; 2 bytes @ 0x8
   910  0028                     	ds	3
   911  002B                     ??___lwtoft:	
   912                           
   913                           ; 0 bytes @ 0xB
   914  002B                     	ds	1
   915  002C                     ?___ftadd:	
   916  002C                     ___ftadd@f1:	
   917                           ; 3 bytes @ 0xC
   918                           
   919                           
   920                           ; 3 bytes @ 0xC
   921  002C                     	ds	3
   922  002F                     ___ftadd@f2:	
   923                           
   924                           ; 3 bytes @ 0xF
   925  002F                     	ds	3
   926  0032                     ??___ftadd:	
   927                           
   928                           ; 0 bytes @ 0x12
   929  0032                     	ds	4
   930  0036                     ___ftadd@sign:	
   931                           
   932                           ; 1 bytes @ 0x16
   933  0036                     	ds	1
   934  0037                     ___ftadd@exp2:	
   935                           
   936                           ; 1 bytes @ 0x17
   937  0037                     	ds	1
   938  0038                     ___ftadd@exp1:	
   939                           
   940                           ; 1 bytes @ 0x18
   941  0038                     	ds	1
   942  0039                     ?___ftmul:	
   943  0039                     ___ftmul@f1:	
   944                           ; 3 bytes @ 0x19
   945                           
   946                           
   947                           ; 3 bytes @ 0x19
   948  0039                     	ds	3
   949  003C                     ___ftmul@f2:	
   950                           
   951                           ; 3 bytes @ 0x1C
   952  003C                     	ds	3
   953  003F                     ??___ftmul:	
   954                           
   955                           ; 0 bytes @ 0x1F
   956  003F                     	ds	4
   957  0043                     ___ftmul@exp:	
   958                           
   959                           ; 1 bytes @ 0x23
   960  0043                     	ds	1
   961  0044                     ___ftmul@f3_as_product:	
   962                           
   963                           ; 3 bytes @ 0x24
   964  0044                     	ds	3
   965  0047                     ___ftmul@cntr:	
   966                           
   967                           ; 1 bytes @ 0x27
   968  0047                     	ds	1
   969  0048                     ___ftmul@sign:	
   970                           
   971                           ; 1 bytes @ 0x28
   972  0048                     	ds	1
   973  0049                     ?___ftdiv:	
   974  0049                     ___ftdiv@f2:	
   975                           ; 3 bytes @ 0x29
   976                           
   977                           
   978                           ; 3 bytes @ 0x29
   979  0049                     	ds	3
   980  004C                     ___ftdiv@f1:	
   981                           
   982                           ; 3 bytes @ 0x2C
   983  004C                     	ds	3
   984  004F                     ??___ftdiv:	
   985                           
   986                           ; 0 bytes @ 0x2F
   987  004F                     	ds	4
   988  0053                     ___ftdiv@cntr:	
   989                           
   990                           ; 1 bytes @ 0x33
   991  0053                     	ds	1
   992  0054                     ___ftdiv@f3:	
   993                           
   994                           ; 3 bytes @ 0x34
   995  0054                     	ds	3
   996  0057                     ___ftdiv@exp:	
   997                           
   998                           ; 1 bytes @ 0x37
   999  0057                     	ds	1
  1000  0058                     ___ftdiv@sign:	
  1001                           
  1002                           ; 1 bytes @ 0x38
  1003  0058                     	ds	1
  1004  0059                     ?___fttol:	
  1005  0059                     ___fttol@f1:	
  1006                           ; 4 bytes @ 0x39
  1007                           
  1008                           
  1009                           ; 3 bytes @ 0x39
  1010  0059                     	ds	4
  1011  005D                     ??___fttol:	
  1012                           
  1013                           ; 0 bytes @ 0x3D
  1014  005D                     	ds	4
  1015  0061                     ___fttol@sign1:	
  1016                           
  1017                           ; 1 bytes @ 0x41
  1018  0061                     	ds	1
  1019  0062                     ___fttol@lval:	
  1020                           
  1021                           ; 4 bytes @ 0x42
  1022  0062                     	ds	4
  1023  0066                     ___fttol@exp1:	
  1024                           
  1025                           ; 1 bytes @ 0x46
  1026  0066                     	ds	1
  1027  0067                     ?_getADCmm:	
  1028                           
  1029                           ; 2 bytes @ 0x47
  1030  0067                     	ds	2
  1031  0069                     ??_getADCmm:	
  1032  0069                     getADCmm@adcReal:	
  1033                           ; 0 bytes @ 0x49
  1034                           
  1035                           
  1036                           ; 2 bytes @ 0x49
  1037  0069                     	ds	2
  1038  006B                     getADCmm@adcRAWs:	
  1039                           
  1040                           ; 2 bytes @ 0x4B
  1041  006B                     	ds	2
  1042  006D                     ?_lcdWrite4DigitBcd:	
  1043  006D                     lcdWrite4DigitBcd@decimal:	
  1044                           ; 0 bytes @ 0x4D
  1045                           
  1046                           
  1047                           ; 2 bytes @ 0x4D
  1048  006D                     	ds	2
  1049  006F                     lcdWrite4DigitBcd@sign:	
  1050                           
  1051                           ; 1 bytes @ 0x4F
  1052  006F                     	ds	1
  1053  0070                     ??_init:	
  1054  0070                     ??_buttListener:	
  1055                           ; 0 bytes @ 0x50
  1056                           
  1057  0070                     ??_main:	
  1058                           ; 0 bytes @ 0x50
  1059                           
  1060  0070                     ??_initStepMotor:	
  1061                           ; 0 bytes @ 0x50
  1062                           
  1063                           
  1064                           	psect	maintext
  1065  0D2E                     __pmaintext:	
  1066                           ; 0 bytes @ 0x50
  1067 ;;
  1068 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1069 ;;
  1070 ;; *************** function _main *****************
  1071 ;; Defined at:
  1072 ;;		line 12 in file "Main.c"
  1073 ;; Parameters:    Size  Location     Type
  1074 ;;		None
  1075 ;; Auto vars:     Size  Location     Type
  1076 ;;		None
  1077 ;; Return value:  Size  Location     Type
  1078 ;;		None               void
  1079 ;; Registers used:
  1080 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1081 ;; Tracked objects:
  1082 ;;		On entry : B00/0
  1083 ;;		On exit  : 0/0
  1084 ;;		Unchanged: 0/0
  1085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1086 ;;      Params:         0       0       0       0       0
  1087 ;;      Locals:         0       0       0       0       0
  1088 ;;      Temps:          0       0       0       0       0
  1089 ;;      Totals:         0       0       0       0       0
  1090 ;;Total ram usage:        0 bytes
  1091 ;; Hardware stack levels required when called:    7
  1092 ;; This function calls:
  1093 ;;		_buttListener
  1094 ;;		_idle
  1095 ;;		_init
  1096 ;;		_setupLCD
  1097 ;; This function is called by:
  1098 ;;		Startup code after reset
  1099 ;; This function uses a non-reentrant model
  1100 ;;
  1101                           
  1102                           
  1103                           ;psect for function _main
  1104  0D2E                     _main:	
  1105                           
  1106                           ;Main.c: 13: init ();
  1107                           
  1108                           ;incstack = 0
  1109                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1110  0D2E  120A  158A  25B9  120A  158A  	fcall	_init
  1111  0D33                     l2185:	
  1112                           ;Main.c: 14: while(1){
  1113                           
  1114                           
  1115                           ;Main.c: 15: setupLCD();
  1116  0D33  120A  158A  25F4  120A  158A  	fcall	_setupLCD
  1117                           
  1118                           ;Main.c: 16: idle();
  1119  0D38  120A  158A  2714  120A  158A  	fcall	_idle
  1120                           
  1121                           ;Main.c: 17: buttListener();
  1122  0D3D  120A  158A  2687  120A  158A  	fcall	_buttListener
  1123  0D42  2D33               	goto	l2185
  1124  0D43                     __end_of_main:	
  1125                           
  1126                           	psect	text1
  1127  0DF4                     __ptext1:	
  1128 ;; *************** function _setupLCD *****************
  1129 ;; Defined at:
  1130 ;;		line 125 in file "lcd.c"
  1131 ;; Parameters:    Size  Location     Type
  1132 ;;		None
  1133 ;; Auto vars:     Size  Location     Type
  1134 ;;		None
  1135 ;; Return value:  Size  Location     Type
  1136 ;;		None               void
  1137 ;; Registers used:
  1138 ;;		wreg, status,2, status,0, pclath, cstack
  1139 ;; Tracked objects:
  1140 ;;		On entry : 0/0
  1141 ;;		On exit  : 0/0
  1142 ;;		Unchanged: 0/0
  1143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1144 ;;      Params:         0       0       0       0       0
  1145 ;;      Locals:         0       0       0       0       0
  1146 ;;      Temps:          0       0       0       0       0
  1147 ;;      Totals:         0       0       0       0       0
  1148 ;;Total ram usage:        0 bytes
  1149 ;; Hardware stack levels used:    1
  1150 ;; Hardware stack levels required when called:    3
  1151 ;; This function calls:
  1152 ;;		_lcdWriteControl
  1153 ;; This function is called by:
  1154 ;;		_main
  1155 ;; This function uses a non-reentrant model
  1156 ;;
  1157                           
  1158                           
  1159                           ;psect for function _setupLCD
  1160  0DF4                     _setupLCD:	
  1161                           
  1162                           ;lcd.c: 126: ADCON1 = 0b00000010;
  1163                           
  1164                           ;incstack = 0
  1165                           ; Regs used in _setupLCD: [wreg+status,2+status,0+pclath+cstack]
  1166  0DF4  3002               	movlw	2
  1167  0DF5  1683               	bsf	3,5	;RP0=1, select bank1
  1168  0DF6  1303               	bcf	3,6	;RP1=0, select bank1
  1169  0DF7  009F               	movwf	31	;volatile
  1170                           
  1171                           ;lcd.c: 128: TRISD = 0x00;
  1172  0DF8  0188               	clrf	8	;volatile
  1173                           
  1174                           ;lcd.c: 129: TRISE = 0x00;
  1175  0DF9  0189               	clrf	9	;volatile
  1176                           
  1177                           ;lcd.c: 130: PORTD = 0x00;
  1178  0DFA  1283               	bcf	3,5	;RP0=0, select bank0
  1179  0DFB  1303               	bcf	3,6	;RP1=0, select bank0
  1180  0DFC  0188               	clrf	8	;volatile
  1181                           
  1182                           ;lcd.c: 131: PORTE = 0x00;
  1183  0DFD  0189               	clrf	9	;volatile
  1184                           
  1185                           ;lcd.c: 135: lcdWriteControl(0x01);
  1186  0DFE  3001               	movlw	1
  1187  0DFF  120A  158A  251A  120A  158A  	fcall	_lcdWriteControl
  1188                           
  1189                           ;lcd.c: 136: lcdWriteControl(0x38);
  1190  0E04  3038               	movlw	56
  1191  0E05  120A  158A  251A  120A  158A  	fcall	_lcdWriteControl
  1192                           
  1193                           ;lcd.c: 137: lcdWriteControl(0x0C);
  1194  0E0A  300C               	movlw	12
  1195  0E0B  120A  158A  251A  120A  158A  	fcall	_lcdWriteControl
  1196                           
  1197                           ;lcd.c: 138: lcdWriteControl(0x06);
  1198  0E10  3006               	movlw	6
  1199  0E11  120A  158A  251A  120A  158A  	fcall	_lcdWriteControl
  1200                           
  1201                           ;lcd.c: 139: lcdWriteControl(0x02);
  1202  0E16  3002               	movlw	2
  1203  0E17  120A  158A  251A   	fcall	_lcdWriteControl
  1204  0E1A  0008               	return
  1205  0E1B                     __end_of_setupLCD:	
  1206                           
  1207                           	psect	text2
  1208  0DB9                     __ptext2:	
  1209 ;; *************** function _init *****************
  1210 ;; Defined at:
  1211 ;;		line 13 in file "init.c"
  1212 ;; Parameters:    Size  Location     Type
  1213 ;;		None
  1214 ;; Auto vars:     Size  Location     Type
  1215 ;;		None
  1216 ;; Return value:  Size  Location     Type
  1217 ;;		None               void
  1218 ;; Registers used:
  1219 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1220 ;; Tracked objects:
  1221 ;;		On entry : 0/0
  1222 ;;		On exit  : 0/0
  1223 ;;		Unchanged: 0/0
  1224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1225 ;;      Params:         0       0       0       0       0
  1226 ;;      Locals:         0       0       0       0       0
  1227 ;;      Temps:          0       0       0       0       0
  1228 ;;      Totals:         0       0       0       0       0
  1229 ;;Total ram usage:        0 bytes
  1230 ;; Hardware stack levels used:    1
  1231 ;; Hardware stack levels required when called:    6
  1232 ;; This function calls:
  1233 ;;		_initStepMotor
  1234 ;;		_setupADC
  1235 ;; This function is called by:
  1236 ;;		_main
  1237 ;; This function uses a non-reentrant model
  1238 ;;
  1239                           
  1240                           
  1241                           ;psect for function _init
  1242  0DB9                     _init:	
  1243                           
  1244                           ;init.c: 14: RB0 = 0;
  1245                           
  1246                           ;incstack = 0
  1247                           ; Regs used in _init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1248  0DB9  1283               	bcf	3,5	;RP0=0, select bank0
  1249  0DBA  1303               	bcf	3,6	;RP1=0, select bank0
  1250  0DBB  1006               	bcf	6,0	;volatile
  1251                           
  1252                           ;init.c: 15: TRISB = 0b11111100;
  1253  0DBC  30FC               	movlw	252
  1254  0DBD  1683               	bsf	3,5	;RP0=1, select bank1
  1255  0DBE  1303               	bcf	3,6	;RP1=0, select bank1
  1256  0DBF  0086               	movwf	6	;volatile
  1257                           
  1258                           ;init.c: 16: OPTION_REG = 0B00000100;
  1259  0DC0  3004               	movlw	4
  1260  0DC1  0081               	movwf	1	;volatile
  1261                           
  1262                           ;init.c: 17: TMR0 = 100;
  1263  0DC2  3064               	movlw	100
  1264  0DC3  1283               	bcf	3,5	;RP0=0, select bank0
  1265  0DC4  1303               	bcf	3,6	;RP1=0, select bank0
  1266  0DC5  0081               	movwf	1	;volatile
  1267                           
  1268                           ;init.c: 18: TMR0IE = 1;
  1269  0DC6  168B               	bsf	11,5	;volatile
  1270                           
  1271                           ;init.c: 19: (GIE = 1);
  1272  0DC7  178B               	bsf	11,7	;volatile
  1273                           
  1274                           ;init.c: 21: initStepMotor ();
  1275  0DC8  120A  158A  25A1  120A  158A  	fcall	_initStepMotor
  1276                           
  1277                           ;init.c: 22: setupADC();
  1278  0DCD  120A  158A  2543   	fcall	_setupADC
  1279  0DD0  0008               	return
  1280  0DD1                     __end_of_init:	
  1281                           
  1282                           	psect	text3
  1283  0D43                     __ptext3:	
  1284 ;; *************** function _setupADC *****************
  1285 ;; Defined at:
  1286 ;;		line 13 in file "adc.c"
  1287 ;; Parameters:    Size  Location     Type
  1288 ;;		None
  1289 ;; Auto vars:     Size  Location     Type
  1290 ;;		None
  1291 ;; Return value:  Size  Location     Type
  1292 ;;		None               void
  1293 ;; Registers used:
  1294 ;;		wreg, status,2
  1295 ;; Tracked objects:
  1296 ;;		On entry : 0/0
  1297 ;;		On exit  : 0/0
  1298 ;;		Unchanged: 0/0
  1299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1300 ;;      Params:         0       0       0       0       0
  1301 ;;      Locals:         0       0       0       0       0
  1302 ;;      Temps:          0       1       0       0       0
  1303 ;;      Totals:         0       1       0       0       0
  1304 ;;Total ram usage:        1 bytes
  1305 ;; Hardware stack levels used:    1
  1306 ;; Hardware stack levels required when called:    2
  1307 ;; This function calls:
  1308 ;;		Nothing
  1309 ;; This function is called by:
  1310 ;;		_init
  1311 ;; This function uses a non-reentrant model
  1312 ;;
  1313                           
  1314                           
  1315                           ;psect for function _setupADC
  1316  0D43                     _setupADC:	
  1317                           
  1318                           ;adc.c: 14: PORTA = 0;
  1319                           
  1320                           ;incstack = 0
  1321                           ; Regs used in _setupADC: [wreg+status,2]
  1322  0D43  1283               	bcf	3,5	;RP0=0, select bank0
  1323  0D44  1303               	bcf	3,6	;RP1=0, select bank0
  1324  0D45  0185               	clrf	5	;volatile
  1325                           
  1326                           ;adc.c: 15: TRISA = 0b11111111;
  1327  0D46  30FF               	movlw	255
  1328  0D47  1683               	bsf	3,5	;RP0=1, select bank1
  1329  0D48  1303               	bcf	3,6	;RP1=0, select bank1
  1330  0D49  0085               	movwf	5	;volatile
  1331                           
  1332                           ;adc.c: 16: ADCON0 = 0b01000001;
  1333  0D4A  3041               	movlw	65
  1334  0D4B  1283               	bcf	3,5	;RP0=0, select bank0
  1335  0D4C  1303               	bcf	3,6	;RP1=0, select bank0
  1336  0D4D  009F               	movwf	31	;volatile
  1337                           
  1338                           ;adc.c: 17: ADCON1 = 0b00000010;
  1339  0D4E  3002               	movlw	2
  1340  0D4F  1683               	bsf	3,5	;RP0=1, select bank1
  1341  0D50  1303               	bcf	3,6	;RP1=0, select bank1
  1342  0D51  009F               	movwf	31	;volatile
  1343                           
  1344                           ;adc.c: 18: _delay((unsigned long)((50)*(20000000/4000000.0)));
  1345  0D52  3053               	movlw	83
  1346  0D53  1283               	bcf	3,5	;RP0=0, select bank0
  1347  0D54  1303               	bcf	3,6	;RP1=0, select bank0
  1348  0D55  00A0               	movwf	??_setupADC
  1349  0D56                     u3017:	
  1350  0D56  0BA0               	decfsz	??_setupADC,f
  1351  0D57  2D56               	goto	u3017
  1352  0D58  0008               	return
  1353  0D59                     __end_of_setupADC:	
  1354                           
  1355                           	psect	text4
  1356  0DA1                     __ptext4:	
  1357 ;; *************** function _initStepMotor *****************
  1358 ;; Defined at:
  1359 ;;		line 103 in file "Stepper.c"
  1360 ;; Parameters:    Size  Location     Type
  1361 ;;		None
  1362 ;; Auto vars:     Size  Location     Type
  1363 ;;		None
  1364 ;; Return value:  Size  Location     Type
  1365 ;;		None               void
  1366 ;; Registers used:
  1367 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1368 ;; Tracked objects:
  1369 ;;		On entry : 0/0
  1370 ;;		On exit  : 0/0
  1371 ;;		Unchanged: 0/0
  1372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1373 ;;      Params:         0       0       0       0       0
  1374 ;;      Locals:         0       0       0       0       0
  1375 ;;      Temps:          0       0       0       0       0
  1376 ;;      Totals:         0       0       0       0       0
  1377 ;;Total ram usage:        0 bytes
  1378 ;; Hardware stack levels used:    1
  1379 ;; Hardware stack levels required when called:    5
  1380 ;; This function calls:
  1381 ;;		_ccwMovStepMotor
  1382 ;;		_cwMovStepMotor
  1383 ;; This function is called by:
  1384 ;;		_init
  1385 ;; This function uses a non-reentrant model
  1386 ;;
  1387                           
  1388                           
  1389                           ;psect for function _initStepMotor
  1390  0DA1                     _initStepMotor:	
  1391                           
  1392                           ;Stepper.c: 104: TRISC = 0x00;
  1393                           
  1394                           ;incstack = 0
  1395                           ; Regs used in _initStepMotor: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1396  0DA1  1683               	bsf	3,5	;RP0=1, select bank1
  1397  0DA2  1303               	bcf	3,6	;RP1=0, select bank1
  1398  0DA3  0187               	clrf	7	;volatile
  1399                           
  1400                           ;Stepper.c: 105: stepState = 0;
  1401  0DA4  01AA               	clrf	_stepState^(0+128)	;volatile
  1402  0DA5  01AB               	clrf	(_stepState+1)^(0+128)	;volatile
  1403                           
  1404                           ;Stepper.c: 106: ccwMovStepMotor (1);
  1405  0DA6  3001               	movlw	1
  1406  0DA7  00B6               	movwf	ccwMovStepMotor@numberOfSteps^(0+128)
  1407  0DA8  3000               	movlw	0
  1408  0DA9  00B7               	movwf	(ccwMovStepMotor@numberOfSteps^(0+128)+1)
  1409  0DAA  120A  118A  2640  120A  158A  	fcall	_ccwMovStepMotor
  1410                           
  1411                           ;Stepper.c: 107: cwMovStepMotor (1);
  1412  0DAF  3001               	movlw	1
  1413  0DB0  1683               	bsf	3,5	;RP0=1, select bank1
  1414  0DB1  1303               	bcf	3,6	;RP1=0, select bank1
  1415  0DB2  00B6               	movwf	cwMovStepMotor@numberOfSteps^(0+128)
  1416  0DB3  3000               	movlw	0
  1417  0DB4  00B7               	movwf	(cwMovStepMotor@numberOfSteps^(0+128)+1)
  1418  0DB5  120A  118A  26E6   	fcall	_cwMovStepMotor
  1419  0DB8  0008               	return
  1420  0DB9                     __end_of_initStepMotor:	
  1421                           
  1422                           	psect	text5
  1423  0F14                     __ptext5:	
  1424 ;; *************** function _idle *****************
  1425 ;; Defined at:
  1426 ;;		line 15 in file "idle.c"
  1427 ;; Parameters:    Size  Location     Type
  1428 ;;		None
  1429 ;; Auto vars:     Size  Location     Type
  1430 ;;		None
  1431 ;; Return value:  Size  Location     Type
  1432 ;;		None               void
  1433 ;; Registers used:
  1434 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1435 ;; Tracked objects:
  1436 ;;		On entry : 0/0
  1437 ;;		On exit  : 0/0
  1438 ;;		Unchanged: 0/0
  1439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1440 ;;      Params:         0       0       0       0       0
  1441 ;;      Locals:         0       0       0       0       0
  1442 ;;      Temps:          0       0       2       0       0
  1443 ;;      Totals:         0       0       2       0       0
  1444 ;;Total ram usage:        2 bytes
  1445 ;; Hardware stack levels used:    1
  1446 ;; Hardware stack levels required when called:    5
  1447 ;; This function calls:
  1448 ;;		_getADC
  1449 ;;		_getADCmm
  1450 ;;		_lcdSetCursor
  1451 ;;		_lcdWrite4DigitBcd
  1452 ;;		_lcd_WriteData
  1453 ;; This function is called by:
  1454 ;;		_main
  1455 ;; This function uses a non-reentrant model
  1456 ;;
  1457                           
  1458                           
  1459                           ;psect for function _idle
  1460  0F14                     _idle:	
  1461                           
  1462                           ;idle.c: 16: lcdWrite4DigitBcd(getADC(),1);
  1463                           
  1464                           ;incstack = 0
  1465                           ; Regs used in _idle: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1466  0F14  120A  158A  264D  120A  158A  	fcall	_getADC
  1467  0F19  1283               	bcf	3,5	;RP0=0, select bank0
  1468  0F1A  1303               	bcf	3,6	;RP1=0, select bank0
  1469  0F1B  0821               	movf	?_getADC+1,w
  1470  0F1C  00EE               	movwf	lcdWrite4DigitBcd@decimal+1
  1471  0F1D  0820               	movf	?_getADC,w
  1472  0F1E  00ED               	movwf	lcdWrite4DigitBcd@decimal
  1473  0F1F  01EF               	clrf	lcdWrite4DigitBcd@sign
  1474  0F20  0AEF               	incf	lcdWrite4DigitBcd@sign,f
  1475  0F21  120A  118A  220A  120A  158A  	fcall	_lcdWrite4DigitBcd
  1476                           
  1477                           ;idle.c: 17: lcdSetCursor(10);
  1478  0F26  300A               	movlw	10
  1479  0F27  120A  118A  27EF  120A  158A  	fcall	_lcdSetCursor
  1480                           
  1481                           ;idle.c: 18: lcdWrite4DigitBcd(getADCmm(),0);
  1482  0F2C  120A  118A  2024  120A  158A  	fcall	_getADCmm
  1483  0F31  1283               	bcf	3,5	;RP0=0, select bank0
  1484  0F32  1303               	bcf	3,6	;RP1=0, select bank0
  1485  0F33  0868               	movf	?_getADCmm+1,w
  1486  0F34  00EE               	movwf	lcdWrite4DigitBcd@decimal+1
  1487  0F35  0867               	movf	?_getADCmm,w
  1488  0F36  00ED               	movwf	lcdWrite4DigitBcd@decimal
  1489  0F37  01EF               	clrf	lcdWrite4DigitBcd@sign
  1490  0F38  120A  118A  220A  120A  158A  	fcall	_lcdWrite4DigitBcd
  1491                           
  1492                           ;idle.c: 19: lcd_WriteData('m');
  1493  0F3D  306D               	movlw	109
  1494  0F3E  120A  158A  24DF  120A  158A  	fcall	_lcd_WriteData
  1495                           
  1496                           ;idle.c: 20: lcd_WriteData('m');
  1497  0F43  306D               	movlw	109
  1498  0F44  120A  158A  24DF  120A  158A  	fcall	_lcd_WriteData
  1499                           
  1500                           ;idle.c: 21: lcdSetCursor(40);
  1501  0F49  3028               	movlw	40
  1502  0F4A  120A  118A  27EF  120A  158A  	fcall	_lcdSetCursor
  1503                           
  1504                           ;idle.c: 22: lcdWrite4DigitBcd(stepPos,1);
  1505  0F4F  1683               	bsf	3,5	;RP0=1, select bank1
  1506  0F50  1303               	bcf	3,6	;RP1=0, select bank1
  1507  0F51  0829               	movf	(_stepPos+1)^(0+128),w
  1508  0F52  1283               	bcf	3,5	;RP0=0, select bank0
  1509  0F53  1303               	bcf	3,6	;RP1=0, select bank0
  1510  0F54  00EE               	movwf	lcdWrite4DigitBcd@decimal+1
  1511  0F55  1683               	bsf	3,5	;RP0=1, select bank1
  1512  0F56  1303               	bcf	3,6	;RP1=0, select bank1
  1513  0F57  0828               	movf	_stepPos^(0+128),w
  1514  0F58  1283               	bcf	3,5	;RP0=0, select bank0
  1515  0F59  1303               	bcf	3,6	;RP1=0, select bank0
  1516  0F5A  00ED               	movwf	lcdWrite4DigitBcd@decimal
  1517  0F5B  01EF               	clrf	lcdWrite4DigitBcd@sign
  1518  0F5C  0AEF               	incf	lcdWrite4DigitBcd@sign,f
  1519  0F5D  120A  118A  220A  120A  158A  	fcall	_lcdWrite4DigitBcd
  1520                           
  1521                           ;idle.c: 23: PORTC =0b00111001;
  1522  0F62  3039               	movlw	57
  1523  0F63  1283               	bcf	3,5	;RP0=0, select bank0
  1524  0F64  1303               	bcf	3,6	;RP1=0, select bank0
  1525  0F65  0087               	movwf	7	;volatile
  1526                           
  1527                           ;idle.c: 24: _delay((unsigned long)((22)*(20000000/4000.0)));
  1528  0F66  308F               	movlw	143
  1529  0F67  1683               	bsf	3,5	;RP0=1, select bank1
  1530  0F68  1303               	bcf	3,6	;RP1=0, select bank1
  1531  0F69  00B7               	movwf	(??_idle^(0+128)+1)
  1532  0F6A  30DA               	movlw	218
  1533  0F6B  00B6               	movwf	??_idle^(0+128)
  1534  0F6C                     u3027:	
  1535  0F6C  0BB6               	decfsz	??_idle^(0+128),f
  1536  0F6D  2F6C               	goto	u3027
  1537  0F6E  0BB7               	decfsz	(??_idle^(0+128)+1),f
  1538  0F6F  2F6C               	goto	u3027
  1539  0F70  0000               	nop
  1540  0F71  0008               	return
  1541  0F72                     __end_of_idle:	
  1542                           
  1543                           	psect	text6
  1544  0024                     __ptext6:	
  1545 ;; *************** function _getADCmm *****************
  1546 ;; Defined at:
  1547 ;;		line 46 in file "adc.c"
  1548 ;; Parameters:    Size  Location     Type
  1549 ;;		None
  1550 ;; Auto vars:     Size  Location     Type
  1551 ;;  adcRAWs         2   75[BANK0 ] volatile unsigned int 
  1552 ;;  adcReal         2   73[BANK0 ] volatile unsigned int 
  1553 ;; Return value:  Size  Location     Type
  1554 ;;                  2   71[BANK0 ] unsigned int 
  1555 ;; Registers used:
  1556 ;;		wreg, status,2, status,0, pclath, cstack
  1557 ;; Tracked objects:
  1558 ;;		On entry : 0/0
  1559 ;;		On exit  : 0/0
  1560 ;;		Unchanged: 0/0
  1561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1562 ;;      Params:         0       2       0       0       0
  1563 ;;      Locals:         0       4       0       0       0
  1564 ;;      Temps:          0       0       0       0       0
  1565 ;;      Totals:         0       6       0       0       0
  1566 ;;Total ram usage:        6 bytes
  1567 ;; Hardware stack levels used:    1
  1568 ;; Hardware stack levels required when called:    4
  1569 ;; This function calls:
  1570 ;;		___ftadd
  1571 ;;		___ftdiv
  1572 ;;		___ftmul
  1573 ;;		___fttol
  1574 ;;		___lwtoft
  1575 ;;		___wmul
  1576 ;;		_getADC
  1577 ;; This function is called by:
  1578 ;;		_idle
  1579 ;; This function uses a non-reentrant model
  1580 ;;
  1581                           
  1582                           
  1583                           ;psect for function _getADCmm
  1584  0024                     _getADCmm:	
  1585                           
  1586                           ;adc.c: 48: volatile unsigned int adcReal;
  1587                           ;adc.c: 49: volatile unsigned int adcRAWs=getADC();
  1588                           
  1589                           ;incstack = 0
  1590                           ; Regs used in _getADCmm: [wreg+status,2+status,0+pclath+cstack]
  1591  0024  120A  158A  264D  120A  118A  	fcall	_getADC
  1592  0029  1283               	bcf	3,5	;RP0=0, select bank0
  1593  002A  1303               	bcf	3,6	;RP1=0, select bank0
  1594  002B  0821               	movf	?_getADC+1,w
  1595  002C  00EC               	movwf	getADCmm@adcRAWs+1	;volatile
  1596  002D  0820               	movf	?_getADC,w
  1597  002E  00EB               	movwf	getADCmm@adcRAWs	;volatile
  1598                           
  1599                           ;adc.c: 52: if(adcRAWs<=568&&adcRAWs>400){
  1600  002F  3002               	movlw	2
  1601  0030  026C               	subwf	getADCmm@adcRAWs+1,w	;volatile
  1602  0031  3039               	movlw	57
  1603  0032  1903               	skipnz
  1604  0033  026B               	subwf	getADCmm@adcRAWs,w	;volatile
  1605  0034  1803               	skipnc
  1606  0035  2865               	goto	l1989
  1607  0036  3001               	movlw	1
  1608  0037  026C               	subwf	getADCmm@adcRAWs+1,w	;volatile
  1609  0038  3091               	movlw	145
  1610  0039  1903               	skipnz
  1611  003A  026B               	subwf	getADCmm@adcRAWs,w	;volatile
  1612  003B  1C03               	skipc
  1613  003C  2865               	goto	l1989
  1614                           
  1615                           ;adc.c: 53: adcReal=((10*(adcRAWs-736))/-11.2);
  1616  003D  300A               	movlw	10
  1617  003E  00A2               	movwf	___wmul@multiplicand
  1618  003F  3000               	movlw	0
  1619  0040  00A3               	movwf	___wmul@multiplicand+1
  1620  0041  086B               	movf	getADCmm@adcRAWs,w	;volatile
  1621  0042  3E20               	addlw	32
  1622  0043  00A0               	movwf	___wmul@multiplier
  1623  0044  086C               	movf	getADCmm@adcRAWs+1,w	;volatile
  1624  0045  1803               	skipnc
  1625  0046  3E01               	addlw	1
  1626  0047  3EFD               	addlw	253
  1627  0048  00A1               	movwf	___wmul@multiplier+1
  1628  0049  120A  158A  25D1  120A  118A  	fcall	___wmul
  1629  004E  1283               	bcf	3,5	;RP0=0, select bank0
  1630  004F  1303               	bcf	3,6	;RP1=0, select bank0
  1631  0050  0821               	movf	?___wmul+1,w
  1632  0051  00A9               	movwf	___lwtoft@c+1
  1633  0052  0820               	movf	?___wmul,w
  1634  0053  00A8               	movwf	___lwtoft@c
  1635  0054  120A  158A  2589  120A  118A  	fcall	___lwtoft
  1636  0059  1283               	bcf	3,5	;RP0=0, select bank0
  1637  005A  1303               	bcf	3,6	;RP1=0, select bank0
  1638  005B  0828               	movf	?___lwtoft,w
  1639  005C  00CC               	movwf	___ftdiv@f1
  1640  005D  0829               	movf	?___lwtoft+1,w
  1641  005E  00CD               	movwf	___ftdiv@f1+1
  1642  005F  082A               	movf	?___lwtoft+2,w
  1643  0060  00CE               	movwf	___ftdiv@f1+2
  1644  0061  3033               	movlw	51
  1645  0062  00C9               	movwf	___ftdiv@f2
  1646  0063  3033               	movlw	51
  1647  0064  28AD               	goto	L9
  1648  0065                     l1989:	
  1649                           ;adc.c: 54: }
  1650                           
  1651                           
  1652                           ;adc.c: 56: else if(adcRAWs<=400&&adcRAWs>227){
  1653  0065  3001               	movlw	1
  1654  0066  026C               	subwf	getADCmm@adcRAWs+1,w	;volatile
  1655  0067  3091               	movlw	145
  1656  0068  1903               	skipnz
  1657  0069  026B               	subwf	getADCmm@adcRAWs,w	;volatile
  1658  006A  1803               	skipnc
  1659  006B  28B0               	goto	l1995
  1660  006C  3000               	movlw	0
  1661  006D  026C               	subwf	getADCmm@adcRAWs+1,w	;volatile
  1662  006E  30E4               	movlw	228
  1663  006F  1903               	skipnz
  1664  0070  026B               	subwf	getADCmm@adcRAWs,w	;volatile
  1665  0071  1C03               	skipc
  1666  0072  28B0               	goto	l1995
  1667                           
  1668                           ;adc.c: 57: adcReal=((10*(adcRAWs-659.5))/-8.65);
  1669  0073  086C               	movf	getADCmm@adcRAWs+1,w	;volatile
  1670  0074  00A9               	movwf	___lwtoft@c+1
  1671  0075  086B               	movf	getADCmm@adcRAWs,w	;volatile
  1672  0076  00A8               	movwf	___lwtoft@c
  1673  0077  120A  158A  2589  120A  118A  	fcall	___lwtoft
  1674  007C  1283               	bcf	3,5	;RP0=0, select bank0
  1675  007D  1303               	bcf	3,6	;RP1=0, select bank0
  1676  007E  0828               	movf	?___lwtoft,w
  1677  007F  00AF               	movwf	___ftadd@f2
  1678  0080  0829               	movf	?___lwtoft+1,w
  1679  0081  00B0               	movwf	___ftadd@f2+1
  1680  0082  082A               	movf	?___lwtoft+2,w
  1681  0083  00B1               	movwf	___ftadd@f2+2
  1682  0084  30E0               	movlw	224
  1683  0085  00AC               	movwf	___ftadd@f1
  1684  0086  3024               	movlw	36
  1685  0087  00AD               	movwf	___ftadd@f1+1
  1686  0088  30C4               	movlw	196
  1687  0089  00AE               	movwf	___ftadd@f1+2
  1688  008A  120A  118A  23AC  120A  118A  	fcall	___ftadd
  1689  008F  1283               	bcf	3,5	;RP0=0, select bank0
  1690  0090  1303               	bcf	3,6	;RP1=0, select bank0
  1691  0091  082C               	movf	?___ftadd,w
  1692  0092  00BC               	movwf	___ftmul@f2
  1693  0093  082D               	movf	?___ftadd+1,w
  1694  0094  00BD               	movwf	___ftmul@f2+1
  1695  0095  082E               	movf	?___ftadd+2,w
  1696  0096  00BE               	movwf	___ftmul@f2+2
  1697  0097  3000               	movlw	0
  1698  0098  00B9               	movwf	___ftmul@f1
  1699  0099  3020               	movlw	32
  1700  009A  00BA               	movwf	___ftmul@f1+1
  1701  009B  3041               	movlw	65
  1702  009C  00BB               	movwf	___ftmul@f1+2
  1703  009D  120A  118A  24B5  120A  118A  	fcall	___ftmul
  1704  00A2  1283               	bcf	3,5	;RP0=0, select bank0
  1705  00A3  1303               	bcf	3,6	;RP1=0, select bank0
  1706  00A4  0839               	movf	?___ftmul,w
  1707  00A5  00CC               	movwf	___ftdiv@f1
  1708  00A6  083A               	movf	?___ftmul+1,w
  1709  00A7  00CD               	movwf	___ftdiv@f1+1
  1710  00A8  083B               	movf	?___ftmul+2,w
  1711  00A9  00CE               	movwf	___ftdiv@f1+2
  1712  00AA  3066               	movlw	102
  1713  00AB  00C9               	movwf	___ftdiv@f2
  1714  00AC  300A               	movlw	10
  1715  00AD                     L9:	
  1716  00AD  00CA               	movwf	___ftdiv@f2+1
  1717  00AE  30C1               	movlw	193
  1718  00AF  29E7               	goto	L7
  1719  00B0                     l1995:	
  1720                           ;adc.c: 58: }
  1721                           
  1722                           
  1723                           ;adc.c: 60: else if(adcRAWs<=227&&adcRAWs>187){
  1724  00B0  3000               	movlw	0
  1725  00B1  026C               	subwf	getADCmm@adcRAWs+1,w	;volatile
  1726  00B2  30E4               	movlw	228
  1727  00B3  1903               	skipnz
  1728  00B4  026B               	subwf	getADCmm@adcRAWs,w	;volatile
  1729  00B5  1803               	skipnc
  1730  00B6  28E8               	goto	l2001
  1731  00B7  3000               	movlw	0
  1732  00B8  026C               	subwf	getADCmm@adcRAWs+1,w	;volatile
  1733  00B9  30BC               	movlw	188
  1734  00BA  1903               	skipnz
  1735  00BB  026B               	subwf	getADCmm@adcRAWs,w	;volatile
  1736  00BC  1C03               	skipc
  1737  00BD  28E8               	goto	l2001
  1738                           
  1739                           ;adc.c: 61: adcReal=((10*(adcRAWs-327))/-2.0);
  1740  00BE  300A               	movlw	10
  1741  00BF  00A2               	movwf	___wmul@multiplicand
  1742  00C0  3000               	movlw	0
  1743  00C1  00A3               	movwf	___wmul@multiplicand+1
  1744  00C2  086B               	movf	getADCmm@adcRAWs,w	;volatile
  1745  00C3  3EB9               	addlw	185
  1746  00C4  00A0               	movwf	___wmul@multiplier
  1747  00C5  086C               	movf	getADCmm@adcRAWs+1,w	;volatile
  1748  00C6  1803               	skipnc
  1749  00C7  3E01               	addlw	1
  1750  00C8  3EFE               	addlw	254
  1751  00C9  00A1               	movwf	___wmul@multiplier+1
  1752  00CA  120A  158A  25D1  120A  118A  	fcall	___wmul
  1753  00CF  1283               	bcf	3,5	;RP0=0, select bank0
  1754  00D0  1303               	bcf	3,6	;RP1=0, select bank0
  1755  00D1  0821               	movf	?___wmul+1,w
  1756  00D2  00A9               	movwf	___lwtoft@c+1
  1757  00D3  0820               	movf	?___wmul,w
  1758  00D4  00A8               	movwf	___lwtoft@c
  1759  00D5  120A  158A  2589  120A  118A  	fcall	___lwtoft
  1760  00DA  1283               	bcf	3,5	;RP0=0, select bank0
  1761  00DB  1303               	bcf	3,6	;RP1=0, select bank0
  1762  00DC  0828               	movf	?___lwtoft,w
  1763  00DD  00CC               	movwf	___ftdiv@f1
  1764  00DE  0829               	movf	?___lwtoft+1,w
  1765  00DF  00CD               	movwf	___ftdiv@f1+1
  1766  00E0  082A               	movf	?___lwtoft+2,w
  1767  00E1  00CE               	movwf	___ftdiv@f1+2
  1768  00E2  3000               	movlw	0
  1769  00E3  00C9               	movwf	___ftdiv@f2
  1770  00E4  3000               	movlw	0
  1771  00E5  00CA               	movwf	___ftdiv@f2+1
  1772  00E6  30C0               	movlw	192
  1773  00E7  29E7               	goto	L7
  1774  00E8                     l2001:	
  1775                           ;adc.c: 62: }
  1776                           
  1777                           
  1778                           ;adc.c: 64: else if(adcRAWs<=187&&adcRAWs>150){
  1779  00E8  3000               	movlw	0
  1780  00E9  026C               	subwf	getADCmm@adcRAWs+1,w	;volatile
  1781  00EA  30BC               	movlw	188
  1782  00EB  1903               	skipnz
  1783  00EC  026B               	subwf	getADCmm@adcRAWs,w	;volatile
  1784  00ED  1803               	skipnc
  1785  00EE  2931               	goto	l2007
  1786  00EF  3000               	movlw	0
  1787  00F0  026C               	subwf	getADCmm@adcRAWs+1,w	;volatile
  1788  00F1  3097               	movlw	151
  1789  00F2  1903               	skipnz
  1790  00F3  026B               	subwf	getADCmm@adcRAWs,w	;volatile
  1791  00F4  1C03               	skipc
  1792  00F5  2931               	goto	l2007
  1793                           
  1794                           ;adc.c: 65: adcReal=((10*(adcRAWs-316.5))/-1.85);
  1795  00F6  086C               	movf	getADCmm@adcRAWs+1,w	;volatile
  1796  00F7  00A9               	movwf	___lwtoft@c+1
  1797  00F8  086B               	movf	getADCmm@adcRAWs,w	;volatile
  1798  00F9  00A8               	movwf	___lwtoft@c
  1799  00FA  120A  158A  2589  120A  118A  	fcall	___lwtoft
  1800  00FF  1283               	bcf	3,5	;RP0=0, select bank0
  1801  0100  1303               	bcf	3,6	;RP1=0, select bank0
  1802  0101  0828               	movf	?___lwtoft,w
  1803  0102  00AF               	movwf	___ftadd@f2
  1804  0103  0829               	movf	?___lwtoft+1,w
  1805  0104  00B0               	movwf	___ftadd@f2+1
  1806  0105  082A               	movf	?___lwtoft+2,w
  1807  0106  00B1               	movwf	___ftadd@f2+2
  1808  0107  3040               	movlw	64
  1809  0108  00AC               	movwf	___ftadd@f1
  1810  0109  309E               	movlw	158
  1811  010A  00AD               	movwf	___ftadd@f1+1
  1812  010B  30C3               	movlw	195
  1813  010C  00AE               	movwf	___ftadd@f1+2
  1814  010D  120A  118A  23AC  120A  118A  	fcall	___ftadd
  1815  0112  1283               	bcf	3,5	;RP0=0, select bank0
  1816  0113  1303               	bcf	3,6	;RP1=0, select bank0
  1817  0114  082C               	movf	?___ftadd,w
  1818  0115  00BC               	movwf	___ftmul@f2
  1819  0116  082D               	movf	?___ftadd+1,w
  1820  0117  00BD               	movwf	___ftmul@f2+1
  1821  0118  082E               	movf	?___ftadd+2,w
  1822  0119  00BE               	movwf	___ftmul@f2+2
  1823  011A  3000               	movlw	0
  1824  011B  00B9               	movwf	___ftmul@f1
  1825  011C  3020               	movlw	32
  1826  011D  00BA               	movwf	___ftmul@f1+1
  1827  011E  3041               	movlw	65
  1828  011F  00BB               	movwf	___ftmul@f1+2
  1829  0120  120A  118A  24B5  120A  118A  	fcall	___ftmul
  1830  0125  1283               	bcf	3,5	;RP0=0, select bank0
  1831  0126  1303               	bcf	3,6	;RP1=0, select bank0
  1832  0127  0839               	movf	?___ftmul,w
  1833  0128  00CC               	movwf	___ftdiv@f1
  1834  0129  083A               	movf	?___ftmul+1,w
  1835  012A  00CD               	movwf	___ftdiv@f1+1
  1836  012B  083B               	movf	?___ftmul+2,w
  1837  012C  00CE               	movwf	___ftdiv@f1+2
  1838  012D  30CD               	movlw	205
  1839  012E  00C9               	movwf	___ftdiv@f2
  1840  012F  30EC               	movlw	236
  1841  0130  29E5               	goto	L8
  1842  0131                     l2007:	
  1843                           ;adc.c: 66: }
  1844                           
  1845                           
  1846                           ;adc.c: 68: else if(adcRAWs<=150&&adcRAWs>124){
  1847  0131  3000               	movlw	0
  1848  0132  026C               	subwf	getADCmm@adcRAWs+1,w	;volatile
  1849  0133  3097               	movlw	151
  1850  0134  1903               	skipnz
  1851  0135  026B               	subwf	getADCmm@adcRAWs,w	;volatile
  1852  0136  1803               	skipnc
  1853  0137  2967               	goto	l2013
  1854  0138  3000               	movlw	0
  1855  0139  026C               	subwf	getADCmm@adcRAWs+1,w	;volatile
  1856  013A  307D               	movlw	125
  1857  013B  1903               	skipnz
  1858  013C  026B               	subwf	getADCmm@adcRAWs,w	;volatile
  1859  013D  1C03               	skipc
  1860  013E  2967               	goto	l2013
  1861                           
  1862                           ;adc.c: 69: adcReal=((10*(adcRAWs-267))/-1.3);
  1863  013F  300A               	movlw	10
  1864  0140  00A2               	movwf	___wmul@multiplicand
  1865  0141  3000               	movlw	0
  1866  0142  00A3               	movwf	___wmul@multiplicand+1
  1867  0143  086B               	movf	getADCmm@adcRAWs,w	;volatile
  1868  0144  3EF5               	addlw	245
  1869  0145  00A0               	movwf	___wmul@multiplier
  1870  0146  086C               	movf	getADCmm@adcRAWs+1,w	;volatile
  1871  0147  1803               	skipnc
  1872  0148  3E01               	addlw	1
  1873  0149  3EFE               	addlw	254
  1874  014A  00A1               	movwf	___wmul@multiplier+1
  1875  014B  120A  158A  25D1  120A  118A  	fcall	___wmul
  1876  0150  1283               	bcf	3,5	;RP0=0, select bank0
  1877  0151  1303               	bcf	3,6	;RP1=0, select bank0
  1878  0152  0821               	movf	?___wmul+1,w
  1879  0153  00A9               	movwf	___lwtoft@c+1
  1880  0154  0820               	movf	?___wmul,w
  1881  0155  00A8               	movwf	___lwtoft@c
  1882  0156  120A  158A  2589  120A  118A  	fcall	___lwtoft
  1883  015B  1283               	bcf	3,5	;RP0=0, select bank0
  1884  015C  1303               	bcf	3,6	;RP1=0, select bank0
  1885  015D  0828               	movf	?___lwtoft,w
  1886  015E  00CC               	movwf	___ftdiv@f1
  1887  015F  0829               	movf	?___lwtoft+1,w
  1888  0160  00CD               	movwf	___ftdiv@f1+1
  1889  0161  082A               	movf	?___lwtoft+2,w
  1890  0162  00CE               	movwf	___ftdiv@f1+2
  1891  0163  3066               	movlw	102
  1892  0164  00C9               	movwf	___ftdiv@f2
  1893  0165  30A6               	movlw	166
  1894  0166  29E5               	goto	L8
  1895  0167                     l2013:	
  1896                           ;adc.c: 70: }
  1897                           
  1898                           
  1899                           ;adc.c: 72: else if(adcRAWs<=125&&adcRAWs>110){
  1900  0167  3000               	movlw	0
  1901  0168  026C               	subwf	getADCmm@adcRAWs+1,w	;volatile
  1902  0169  307E               	movlw	126
  1903  016A  1903               	skipnz
  1904  016B  026B               	subwf	getADCmm@adcRAWs,w	;volatile
  1905  016C  1803               	skipnc
  1906  016D  299D               	goto	l2019
  1907  016E  3000               	movlw	0
  1908  016F  026C               	subwf	getADCmm@adcRAWs+1,w	;volatile
  1909  0170  306F               	movlw	111
  1910  0171  1903               	skipnz
  1911  0172  026B               	subwf	getADCmm@adcRAWs,w	;volatile
  1912  0173  1C03               	skipc
  1913  0174  299D               	goto	l2019
  1914                           
  1915                           ;adc.c: 73: adcReal=((10*(adcRAWs-201))/-0.7);
  1916  0175  300A               	movlw	10
  1917  0176  00A2               	movwf	___wmul@multiplicand
  1918  0177  3000               	movlw	0
  1919  0178  00A3               	movwf	___wmul@multiplicand+1
  1920  0179  086B               	movf	getADCmm@adcRAWs,w	;volatile
  1921  017A  3E37               	addlw	55
  1922  017B  00A0               	movwf	___wmul@multiplier
  1923  017C  086C               	movf	getADCmm@adcRAWs+1,w	;volatile
  1924  017D  1803               	skipnc
  1925  017E  3E01               	addlw	1
  1926  017F  3EFF               	addlw	255
  1927  0180  00A1               	movwf	___wmul@multiplier+1
  1928  0181  120A  158A  25D1  120A  118A  	fcall	___wmul
  1929  0186  1283               	bcf	3,5	;RP0=0, select bank0
  1930  0187  1303               	bcf	3,6	;RP1=0, select bank0
  1931  0188  0821               	movf	?___wmul+1,w
  1932  0189  00A9               	movwf	___lwtoft@c+1
  1933  018A  0820               	movf	?___wmul,w
  1934  018B  00A8               	movwf	___lwtoft@c
  1935  018C  120A  158A  2589  120A  118A  	fcall	___lwtoft
  1936  0191  1283               	bcf	3,5	;RP0=0, select bank0
  1937  0192  1303               	bcf	3,6	;RP1=0, select bank0
  1938  0193  0828               	movf	?___lwtoft,w
  1939  0194  00CC               	movwf	___ftdiv@f1
  1940  0195  0829               	movf	?___lwtoft+1,w
  1941  0196  00CD               	movwf	___ftdiv@f1+1
  1942  0197  082A               	movf	?___lwtoft+2,w
  1943  0198  00CE               	movwf	___ftdiv@f1+2
  1944  0199  3033               	movlw	51
  1945  019A  00C9               	movwf	___ftdiv@f2
  1946  019B  3033               	movlw	51
  1947  019C  29E5               	goto	L8
  1948  019D                     l2019:	
  1949                           ;adc.c: 74: }
  1950                           
  1951                           
  1952                           ;adc.c: 76: else if(adcRAWs<=110&&adcRAWs>90){
  1953  019D  3000               	movlw	0
  1954  019E  026C               	subwf	getADCmm@adcRAWs+1,w	;volatile
  1955  019F  306F               	movlw	111
  1956  01A0  1903               	skipnz
  1957  01A1  026B               	subwf	getADCmm@adcRAWs,w	;volatile
  1958  01A2  1803               	skipnc
  1959  01A3  2A01               	goto	l2025
  1960  01A4  3000               	movlw	0
  1961  01A5  026C               	subwf	getADCmm@adcRAWs+1,w	;volatile
  1962  01A6  305B               	movlw	91
  1963  01A7  1903               	skipnz
  1964  01A8  026B               	subwf	getADCmm@adcRAWs,w	;volatile
  1965  01A9  1C03               	skipc
  1966  01AA  2A01               	goto	l2025
  1967                           
  1968                           ;adc.c: 77: adcReal=((10*(adcRAWs-227.0))/-0.9);
  1969  01AB  086C               	movf	getADCmm@adcRAWs+1,w	;volatile
  1970  01AC  00A9               	movwf	___lwtoft@c+1
  1971  01AD  086B               	movf	getADCmm@adcRAWs,w	;volatile
  1972  01AE  00A8               	movwf	___lwtoft@c
  1973  01AF  120A  158A  2589  120A  118A  	fcall	___lwtoft
  1974  01B4  1283               	bcf	3,5	;RP0=0, select bank0
  1975  01B5  1303               	bcf	3,6	;RP1=0, select bank0
  1976  01B6  0828               	movf	?___lwtoft,w
  1977  01B7  00AF               	movwf	___ftadd@f2
  1978  01B8  0829               	movf	?___lwtoft+1,w
  1979  01B9  00B0               	movwf	___ftadd@f2+1
  1980  01BA  082A               	movf	?___lwtoft+2,w
  1981  01BB  00B1               	movwf	___ftadd@f2+2
  1982  01BC  3000               	movlw	0
  1983  01BD  00AC               	movwf	___ftadd@f1
  1984  01BE  3063               	movlw	99
  1985  01BF  00AD               	movwf	___ftadd@f1+1
  1986  01C0  30C3               	movlw	195
  1987  01C1  00AE               	movwf	___ftadd@f1+2
  1988  01C2  120A  118A  23AC  120A  118A  	fcall	___ftadd
  1989  01C7  1283               	bcf	3,5	;RP0=0, select bank0
  1990  01C8  1303               	bcf	3,6	;RP1=0, select bank0
  1991  01C9  082C               	movf	?___ftadd,w
  1992  01CA  00BC               	movwf	___ftmul@f2
  1993  01CB  082D               	movf	?___ftadd+1,w
  1994  01CC  00BD               	movwf	___ftmul@f2+1
  1995  01CD  082E               	movf	?___ftadd+2,w
  1996  01CE  00BE               	movwf	___ftmul@f2+2
  1997  01CF  3000               	movlw	0
  1998  01D0  00B9               	movwf	___ftmul@f1
  1999  01D1  3020               	movlw	32
  2000  01D2  00BA               	movwf	___ftmul@f1+1
  2001  01D3  3041               	movlw	65
  2002  01D4  00BB               	movwf	___ftmul@f1+2
  2003  01D5  120A  118A  24B5  120A  118A  	fcall	___ftmul
  2004  01DA  1283               	bcf	3,5	;RP0=0, select bank0
  2005  01DB  1303               	bcf	3,6	;RP1=0, select bank0
  2006  01DC  0839               	movf	?___ftmul,w
  2007  01DD  00CC               	movwf	___ftdiv@f1
  2008  01DE  083A               	movf	?___ftmul+1,w
  2009  01DF  00CD               	movwf	___ftdiv@f1+1
  2010  01E0  083B               	movf	?___ftmul+2,w
  2011  01E1  00CE               	movwf	___ftdiv@f1+2
  2012  01E2  3066               	movlw	102
  2013  01E3  00C9               	movwf	___ftdiv@f2
  2014  01E4  3066               	movlw	102
  2015  01E5                     L8:	
  2016  01E5  00CA               	movwf	___ftdiv@f2+1
  2017  01E6  30BF               	movlw	191
  2018  01E7                     L7:	
  2019  01E7  00CB               	movwf	___ftdiv@f2+2
  2020  01E8  120A  118A  2588  120A  118A  	fcall	___ftdiv
  2021  01ED  1283               	bcf	3,5	;RP0=0, select bank0
  2022  01EE  1303               	bcf	3,6	;RP1=0, select bank0
  2023  01EF  0849               	movf	?___ftdiv,w
  2024  01F0  00D9               	movwf	___fttol@f1
  2025  01F1  084A               	movf	?___ftdiv+1,w
  2026  01F2  00DA               	movwf	___fttol@f1+1
  2027  01F3  084B               	movf	?___ftdiv+2,w
  2028  01F4  00DB               	movwf	___fttol@f1+2
  2029  01F5  120A  158A  2772  120A  118A  	fcall	___fttol
  2030  01FA  1283               	bcf	3,5	;RP0=0, select bank0
  2031  01FB  1303               	bcf	3,6	;RP1=0, select bank0
  2032  01FC  085A               	movf	?___fttol+1,w
  2033  01FD  00EA               	movwf	getADCmm@adcReal+1	;volatile
  2034  01FE  0859               	movf	?___fttol,w
  2035  01FF  00E9               	movwf	getADCmm@adcReal	;volatile
  2036                           
  2037                           ;adc.c: 78: }
  2038  0200  2A05               	goto	l301
  2039  0201                     l2025:	
  2040                           
  2041                           ;adc.c: 79: else {
  2042                           ;adc.c: 80: adcReal = 1500;
  2043  0201  30DC               	movlw	220
  2044  0202  00E9               	movwf	getADCmm@adcReal	;volatile
  2045  0203  3005               	movlw	5
  2046  0204  00EA               	movwf	getADCmm@adcReal+1	;volatile
  2047  0205                     l301:	
  2048                           
  2049                           ;adc.c: 81: }
  2050                           ;adc.c: 82: return (adcReal);
  2051  0205  086A               	movf	getADCmm@adcReal+1,w	;volatile
  2052  0206  00E8               	movwf	?_getADCmm+1
  2053  0207  0869               	movf	getADCmm@adcReal,w	;volatile
  2054  0208  00E7               	movwf	?_getADCmm
  2055  0209  0008               	return
  2056  020A                     __end_of_getADCmm:	
  2057                           
  2058                           	psect	text7
  2059  0E4D                     __ptext7:	
  2060 ;; *************** function _getADC *****************
  2061 ;; Defined at:
  2062 ;;		line 22 in file "adc.c"
  2063 ;; Parameters:    Size  Location     Type
  2064 ;;		None
  2065 ;; Auto vars:     Size  Location     Type
  2066 ;;  adcRAW          2    5[BANK0 ] volatile unsigned int 
  2067 ;; Return value:  Size  Location     Type
  2068 ;;                  2    0[BANK0 ] unsigned int 
  2069 ;; Registers used:
  2070 ;;		wreg, status,2, status,0
  2071 ;; Tracked objects:
  2072 ;;		On entry : 0/0
  2073 ;;		On exit  : 0/0
  2074 ;;		Unchanged: 0/0
  2075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2076 ;;      Params:         0       2       0       0       0
  2077 ;;      Locals:         0       2       0       0       0
  2078 ;;      Temps:          0       3       0       0       0
  2079 ;;      Totals:         0       7       0       0       0
  2080 ;;Total ram usage:        7 bytes
  2081 ;; Hardware stack levels used:    1
  2082 ;; Hardware stack levels required when called:    2
  2083 ;; This function calls:
  2084 ;;		Nothing
  2085 ;; This function is called by:
  2086 ;;		_getADCmm
  2087 ;;		_idle
  2088 ;; This function uses a non-reentrant model
  2089 ;;
  2090                           
  2091                           
  2092                           ;psect for function _getADC
  2093  0E4D                     _getADC:	
  2094                           
  2095                           ;adc.c: 24: volatile unsigned int adcRAW;
  2096                           ;adc.c: 26: ADRESH = 0;
  2097                           
  2098                           ;incstack = 0
  2099                           ; Regs used in _getADC: [wreg+status,2+status,0]
  2100  0E4D  1283               	bcf	3,5	;RP0=0, select bank0
  2101  0E4E  1303               	bcf	3,6	;RP1=0, select bank0
  2102  0E4F  019E               	clrf	30	;volatile
  2103                           
  2104                           ;adc.c: 27: ADRESL = 0;
  2105  0E50  1683               	bsf	3,5	;RP0=1, select bank1
  2106  0E51  1303               	bcf	3,6	;RP1=0, select bank1
  2107  0E52  019E               	clrf	30	;volatile
  2108                           
  2109                           ;adc.c: 29: GO=1;
  2110  0E53  1283               	bcf	3,5	;RP0=0, select bank0
  2111  0E54  1303               	bcf	3,6	;RP1=0, select bank0
  2112  0E55  151F               	bsf	31,2	;volatile
  2113  0E56                     l294:	
  2114                           ;adc.c: 31: continue;
  2115                           
  2116                           ;adc.c: 30: while (GO)
  2117                           
  2118  0E56  191F               	btfsc	31,2	;volatile
  2119  0E57  2E56               	goto	l294
  2120                           
  2121                           ;adc.c: 34: adcRAW= ADRESH;
  2122  0E58  081E               	movf	30,w	;volatile
  2123  0E59  00A2               	movwf	??_getADC
  2124  0E5A  01A3               	clrf	??_getADC+1
  2125  0E5B  0822               	movf	??_getADC,w
  2126  0E5C  00A5               	movwf	getADC@adcRAW	;volatile
  2127  0E5D  0823               	movf	??_getADC+1,w
  2128  0E5E  00A6               	movwf	getADC@adcRAW+1	;volatile
  2129                           
  2130                           ;adc.c: 35: adcRAW=ADRESH<<2;
  2131  0E5F  081E               	movf	30,w	;volatile
  2132  0E60  00A2               	movwf	??_getADC
  2133  0E61  01A3               	clrf	??_getADC+1
  2134  0E62  1003               	clrc
  2135  0E63  0DA2               	rlf	??_getADC,f
  2136  0E64  0DA3               	rlf	??_getADC+1,f
  2137  0E65  1003               	clrc
  2138  0E66  0DA2               	rlf	??_getADC,f
  2139  0E67  0DA3               	rlf	??_getADC+1,f
  2140  0E68  0822               	movf	??_getADC,w
  2141  0E69  00A5               	movwf	getADC@adcRAW	;volatile
  2142  0E6A  0823               	movf	??_getADC+1,w
  2143  0E6B  00A6               	movwf	getADC@adcRAW+1	;volatile
  2144                           
  2145                           ;adc.c: 36: adcRAW = adcRAW | (ADRESL>>6);
  2146  0E6C  1683               	bsf	3,5	;RP0=1, select bank1
  2147  0E6D  1303               	bcf	3,6	;RP1=0, select bank1
  2148  0E6E  081E               	movf	30,w	;volatile
  2149  0E6F  1283               	bcf	3,5	;RP0=0, select bank0
  2150  0E70  1303               	bcf	3,6	;RP1=0, select bank0
  2151  0E71  00A2               	movwf	??_getADC
  2152  0E72  3006               	movlw	6
  2153  0E73                     u2005:	
  2154  0E73  1003               	clrc
  2155  0E74  0CA2               	rrf	??_getADC,f
  2156  0E75  3EFF               	addlw	-1
  2157  0E76  1D03               	skipz
  2158  0E77  2E73               	goto	u2005
  2159  0E78  0825               	movf	getADC@adcRAW,w	;volatile
  2160  0E79  0422               	iorwf	??_getADC,w
  2161  0E7A  00A3               	movwf	??_getADC+1
  2162  0E7B  0826               	movf	getADC@adcRAW+1,w	;volatile
  2163  0E7C  00A4               	movwf	??_getADC+2
  2164  0E7D  0823               	movf	??_getADC+1,w
  2165  0E7E  00A5               	movwf	getADC@adcRAW	;volatile
  2166  0E7F  0824               	movf	??_getADC+2,w
  2167  0E80  00A6               	movwf	getADC@adcRAW+1	;volatile
  2168                           
  2169                           ;adc.c: 40: GO = 0;
  2170  0E81  111F               	bcf	31,2	;volatile
  2171                           
  2172                           ;adc.c: 43: return (adcRAW);
  2173  0E82  0826               	movf	getADC@adcRAW+1,w	;volatile
  2174  0E83  00A1               	movwf	?_getADC+1
  2175  0E84  0825               	movf	getADC@adcRAW,w	;volatile
  2176  0E85  00A0               	movwf	?_getADC
  2177  0E86  0008               	return
  2178  0E87                     __end_of_getADC:	
  2179                           
  2180                           	psect	text8
  2181  0DD1                     __ptext8:	
  2182 ;; *************** function ___wmul *****************
  2183 ;; Defined at:
  2184 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  2185 ;; Parameters:    Size  Location     Type
  2186 ;;  multiplier      2    0[BANK0 ] unsigned int 
  2187 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  2188 ;; Auto vars:     Size  Location     Type
  2189 ;;  product         2    4[BANK0 ] unsigned int 
  2190 ;; Return value:  Size  Location     Type
  2191 ;;                  2    0[BANK0 ] unsigned int 
  2192 ;; Registers used:
  2193 ;;		wreg, status,2, status,0
  2194 ;; Tracked objects:
  2195 ;;		On entry : 0/0
  2196 ;;		On exit  : 0/0
  2197 ;;		Unchanged: 0/0
  2198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2199 ;;      Params:         0       4       0       0       0
  2200 ;;      Locals:         0       2       0       0       0
  2201 ;;      Temps:          0       0       0       0       0
  2202 ;;      Totals:         0       6       0       0       0
  2203 ;;Total ram usage:        6 bytes
  2204 ;; Hardware stack levels used:    1
  2205 ;; Hardware stack levels required when called:    2
  2206 ;; This function calls:
  2207 ;;		Nothing
  2208 ;; This function is called by:
  2209 ;;		_getADCmm
  2210 ;; This function uses a non-reentrant model
  2211 ;;
  2212                           
  2213                           
  2214                           ;psect for function ___wmul
  2215  0DD1                     ___wmul:	
  2216                           
  2217                           ;incstack = 0
  2218                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2219  0DD1  1283               	bcf	3,5	;RP0=0, select bank0
  2220  0DD2  1303               	bcf	3,6	;RP1=0, select bank0
  2221  0DD3  01A4               	clrf	___wmul@product
  2222  0DD4  01A5               	clrf	___wmul@product+1
  2223  0DD5                     l1745:	
  2224  0DD5  1C20               	btfss	___wmul@multiplier,0
  2225  0DD6  2DDD               	goto	l417
  2226  0DD7  0822               	movf	___wmul@multiplicand,w
  2227  0DD8  07A4               	addwf	___wmul@product,f
  2228  0DD9  1803               	skipnc
  2229  0DDA  0AA5               	incf	___wmul@product+1,f
  2230  0DDB  0823               	movf	___wmul@multiplicand+1,w
  2231  0DDC  07A5               	addwf	___wmul@product+1,f
  2232  0DDD                     l417:	
  2233  0DDD  3001               	movlw	1
  2234  0DDE                     u2025:	
  2235  0DDE  1003               	clrc
  2236  0DDF  0DA2               	rlf	___wmul@multiplicand,f
  2237  0DE0  0DA3               	rlf	___wmul@multiplicand+1,f
  2238  0DE1  3EFF               	addlw	-1
  2239  0DE2  1D03               	skipz
  2240  0DE3  2DDE               	goto	u2025
  2241  0DE4  3001               	movlw	1
  2242  0DE5                     u2035:	
  2243  0DE5  1003               	clrc
  2244  0DE6  0CA1               	rrf	___wmul@multiplier+1,f
  2245  0DE7  0CA0               	rrf	___wmul@multiplier,f
  2246  0DE8  3EFF               	addlw	-1
  2247  0DE9  1D03               	skipz
  2248  0DEA  2DE5               	goto	u2035
  2249  0DEB  0820               	movf	___wmul@multiplier,w
  2250  0DEC  0421               	iorwf	___wmul@multiplier+1,w
  2251  0DED  1D03               	btfss	3,2
  2252  0DEE  2DD5               	goto	l1745
  2253  0DEF  0825               	movf	___wmul@product+1,w
  2254  0DF0  00A1               	movwf	?___wmul+1
  2255  0DF1  0824               	movf	___wmul@product,w
  2256  0DF2  00A0               	movwf	?___wmul
  2257  0DF3  0008               	return
  2258  0DF4                     __end_of___wmul:	
  2259                           
  2260                           	psect	text9
  2261  0D89                     __ptext9:	
  2262 ;; *************** function ___lwtoft *****************
  2263 ;; Defined at:
  2264 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtoft.c"
  2265 ;; Parameters:    Size  Location     Type
  2266 ;;  c               2    8[BANK0 ] unsigned int 
  2267 ;; Auto vars:     Size  Location     Type
  2268 ;;		None
  2269 ;; Return value:  Size  Location     Type
  2270 ;;                  3    8[BANK0 ] float 
  2271 ;; Registers used:
  2272 ;;		wreg, status,2, status,0, pclath, cstack
  2273 ;; Tracked objects:
  2274 ;;		On entry : 0/0
  2275 ;;		On exit  : 0/0
  2276 ;;		Unchanged: 0/0
  2277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2278 ;;      Params:         0       3       0       0       0
  2279 ;;      Locals:         0       0       0       0       0
  2280 ;;      Temps:          0       1       0       0       0
  2281 ;;      Totals:         0       4       0       0       0
  2282 ;;Total ram usage:        4 bytes
  2283 ;; Hardware stack levels used:    1
  2284 ;; Hardware stack levels required when called:    3
  2285 ;; This function calls:
  2286 ;;		___ftpack
  2287 ;; This function is called by:
  2288 ;;		_getADCmm
  2289 ;; This function uses a non-reentrant model
  2290 ;;
  2291                           
  2292                           
  2293                           ;psect for function ___lwtoft
  2294  0D89                     ___lwtoft:	
  2295                           
  2296                           ;incstack = 0
  2297                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  2298  0D89  1283               	bcf	3,5	;RP0=0, select bank0
  2299  0D8A  1303               	bcf	3,6	;RP1=0, select bank0
  2300  0D8B  0828               	movf	___lwtoft@c,w
  2301  0D8C  00A0               	movwf	___ftpack@arg
  2302  0D8D  0829               	movf	___lwtoft@c+1,w
  2303  0D8E  00A1               	movwf	___ftpack@arg+1
  2304  0D8F  01A2               	clrf	___ftpack@arg+2
  2305  0D90  308E               	movlw	142
  2306  0D91  00AB               	movwf	??___lwtoft
  2307  0D92  082B               	movf	??___lwtoft,w
  2308  0D93  00A3               	movwf	___ftpack@exp
  2309  0D94  01A4               	clrf	___ftpack@sign
  2310  0D95  120A  118A  2781   	fcall	___ftpack
  2311  0D98  1283               	bcf	3,5	;RP0=0, select bank0
  2312  0D99  1303               	bcf	3,6	;RP1=0, select bank0
  2313  0D9A  0820               	movf	?___ftpack,w
  2314  0D9B  00A8               	movwf	?___lwtoft
  2315  0D9C  0821               	movf	?___ftpack+1,w
  2316  0D9D  00A9               	movwf	?___lwtoft+1
  2317  0D9E  0822               	movf	?___ftpack+2,w
  2318  0D9F  00AA               	movwf	?___lwtoft+2
  2319  0DA0  0008               	return
  2320  0DA1                     __end_of___lwtoft:	
  2321                           
  2322                           	psect	text10
  2323  0F72                     __ptext10:	
  2324 ;; *************** function ___fttol *****************
  2325 ;; Defined at:
  2326 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  2327 ;; Parameters:    Size  Location     Type
  2328 ;;  f1              3   57[BANK0 ] float 
  2329 ;; Auto vars:     Size  Location     Type
  2330 ;;  lval            4   66[BANK0 ] unsigned long 
  2331 ;;  exp1            1   70[BANK0 ] unsigned char 
  2332 ;;  sign1           1   65[BANK0 ] unsigned char 
  2333 ;; Return value:  Size  Location     Type
  2334 ;;                  4   57[BANK0 ] long 
  2335 ;; Registers used:
  2336 ;;		wreg, status,2, status,0
  2337 ;; Tracked objects:
  2338 ;;		On entry : 0/0
  2339 ;;		On exit  : 0/0
  2340 ;;		Unchanged: 0/0
  2341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2342 ;;      Params:         0       4       0       0       0
  2343 ;;      Locals:         0       6       0       0       0
  2344 ;;      Temps:          0       4       0       0       0
  2345 ;;      Totals:         0      14       0       0       0
  2346 ;;Total ram usage:       14 bytes
  2347 ;; Hardware stack levels used:    1
  2348 ;; Hardware stack levels required when called:    2
  2349 ;; This function calls:
  2350 ;;		Nothing
  2351 ;; This function is called by:
  2352 ;;		_getADCmm
  2353 ;; This function uses a non-reentrant model
  2354 ;;
  2355                           
  2356                           
  2357                           ;psect for function ___fttol
  2358  0F72                     ___fttol:	
  2359                           
  2360                           ;incstack = 0
  2361                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  2362  0F72  1283               	bcf	3,5	;RP0=0, select bank0
  2363  0F73  1303               	bcf	3,6	;RP1=0, select bank0
  2364  0F74  0859               	movf	___fttol@f1,w
  2365  0F75  00DD               	movwf	??___fttol
  2366  0F76  085A               	movf	___fttol@f1+1,w
  2367  0F77  00DE               	movwf	??___fttol+1
  2368  0F78  085B               	movf	___fttol@f1+2,w
  2369  0F79  00DF               	movwf	??___fttol+2
  2370  0F7A  1003               	clrc
  2371  0F7B  0D5E               	rlf	??___fttol+1,w
  2372  0F7C  0D5F               	rlf	??___fttol+2,w
  2373  0F7D  00E0               	movwf	??___fttol+3
  2374  0F7E  0860               	movf	??___fttol+3,w
  2375  0F7F  00E6               	movwf	___fttol@exp1
  2376  0F80  0866               	movf	___fttol@exp1,w
  2377  0F81  1D03               	btfss	3,2
  2378  0F82  2F8C               	goto	l1925
  2379  0F83  3000               	movlw	0
  2380  0F84  00DC               	movwf	?___fttol+3
  2381  0F85  3000               	movlw	0
  2382  0F86  00DB               	movwf	?___fttol+2
  2383  0F87  3000               	movlw	0
  2384  0F88  00DA               	movwf	?___fttol+1
  2385  0F89  3000               	movlw	0
  2386  0F8A  00D9               	movwf	?___fttol
  2387  0F8B  0008               	return
  2388  0F8C                     l1925:	
  2389  0F8C  0859               	movf	___fttol@f1,w
  2390  0F8D  00DD               	movwf	??___fttol
  2391  0F8E  085A               	movf	___fttol@f1+1,w
  2392  0F8F  00DE               	movwf	??___fttol+1
  2393  0F90  085B               	movf	___fttol@f1+2,w
  2394  0F91  00DF               	movwf	??___fttol+2
  2395  0F92  3017               	movlw	23
  2396  0F93                     u2525:	
  2397  0F93  1003               	clrc
  2398  0F94  0CDF               	rrf	??___fttol+2,f
  2399  0F95  0CDE               	rrf	??___fttol+1,f
  2400  0F96  0CDD               	rrf	??___fttol,f
  2401  0F97  3EFF               	addlw	-1
  2402  0F98  1D03               	skipz
  2403  0F99  2F93               	goto	u2525
  2404  0F9A  085D               	movf	??___fttol,w
  2405  0F9B  00E0               	movwf	??___fttol+3
  2406  0F9C  0860               	movf	??___fttol+3,w
  2407  0F9D  00E1               	movwf	___fttol@sign1
  2408  0F9E  17DA               	bsf	___fttol@f1+1,7
  2409  0F9F  30FF               	movlw	255
  2410  0FA0  05D9               	andwf	___fttol@f1,f
  2411  0FA1  30FF               	movlw	255
  2412  0FA2  05DA               	andwf	___fttol@f1+1,f
  2413  0FA3  3000               	movlw	0
  2414  0FA4  05DB               	andwf	___fttol@f1+2,f
  2415  0FA5  0859               	movf	___fttol@f1,w
  2416  0FA6  00E2               	movwf	___fttol@lval
  2417  0FA7  085A               	movf	___fttol@f1+1,w
  2418  0FA8  00E3               	movwf	___fttol@lval+1
  2419  0FA9  085B               	movf	___fttol@f1+2,w
  2420  0FAA  00E4               	movwf	___fttol@lval+2
  2421  0FAB  01E5               	clrf	___fttol@lval+3
  2422  0FAC  308E               	movlw	142
  2423  0FAD  02E6               	subwf	___fttol@exp1,f
  2424  0FAE  1FE6               	btfss	___fttol@exp1,7
  2425  0FAF  2FCE               	goto	l1945
  2426  0FB0  0866               	movf	___fttol@exp1,w
  2427  0FB1  3A80               	xorlw	128
  2428  0FB2  3E8F               	addlw	143
  2429  0FB3  1803               	skipnc
  2430  0FB4  2FBE               	goto	l1943
  2431  0FB5  3000               	movlw	0
  2432  0FB6  00DC               	movwf	?___fttol+3
  2433  0FB7  3000               	movlw	0
  2434  0FB8  00DB               	movwf	?___fttol+2
  2435  0FB9  3000               	movlw	0
  2436  0FBA  00DA               	movwf	?___fttol+1
  2437  0FBB  3000               	movlw	0
  2438  0FBC  00D9               	movwf	?___fttol
  2439  0FBD  0008               	return
  2440  0FBE                     l1943:	
  2441  0FBE  3001               	movlw	1
  2442  0FBF                     u2555:	
  2443  0FBF  1003               	clrc
  2444  0FC0  0CE5               	rrf	___fttol@lval+3,f
  2445  0FC1  0CE4               	rrf	___fttol@lval+2,f
  2446  0FC2  0CE3               	rrf	___fttol@lval+1,f
  2447  0FC3  0CE2               	rrf	___fttol@lval,f
  2448  0FC4  3EFF               	addlw	-1
  2449  0FC5  1D03               	skipz
  2450  0FC6  2FBF               	goto	u2555
  2451  0FC7  3001               	movlw	1
  2452  0FC8  00DD               	movwf	??___fttol
  2453  0FC9  085D               	movf	??___fttol,w
  2454  0FCA  07E6               	addwf	___fttol@exp1,f
  2455  0FCB  1903               	btfsc	3,2
  2456  0FCC  2FE9               	goto	l1953
  2457  0FCD  2FBE               	goto	l1943
  2458  0FCE                     l1945:	
  2459  0FCE  3018               	movlw	24
  2460  0FCF  0266               	subwf	___fttol@exp1,w
  2461  0FD0  1C03               	skipc
  2462  0FD1  2FE6               	goto	l669
  2463  0FD2  3000               	movlw	0
  2464  0FD3  00DC               	movwf	?___fttol+3
  2465  0FD4  3000               	movlw	0
  2466  0FD5  00DB               	movwf	?___fttol+2
  2467  0FD6  3000               	movlw	0
  2468  0FD7  00DA               	movwf	?___fttol+1
  2469  0FD8  3000               	movlw	0
  2470  0FD9  00D9               	movwf	?___fttol
  2471  0FDA  0008               	return
  2472  0FDB                     l1951:	
  2473  0FDB  3001               	movlw	1
  2474  0FDC  00DD               	movwf	??___fttol
  2475  0FDD                     u2585:	
  2476  0FDD  1003               	clrc
  2477  0FDE  0DE2               	rlf	___fttol@lval,f
  2478  0FDF  0DE3               	rlf	___fttol@lval+1,f
  2479  0FE0  0DE4               	rlf	___fttol@lval+2,f
  2480  0FE1  0DE5               	rlf	___fttol@lval+3,f
  2481  0FE2  0BDD               	decfsz	??___fttol,f
  2482  0FE3  2FDD               	goto	u2585
  2483  0FE4  3001               	movlw	1
  2484  0FE5  02E6               	subwf	___fttol@exp1,f
  2485  0FE6                     l669:	
  2486  0FE6  0866               	movf	___fttol@exp1,w
  2487  0FE7  1D03               	btfss	3,2
  2488  0FE8  2FDB               	goto	l1951
  2489  0FE9                     l1953:	
  2490  0FE9  0861               	movf	___fttol@sign1,w
  2491  0FEA  1903               	btfsc	3,2
  2492  0FEB  2FF7               	goto	l1957
  2493  0FEC  09E2               	comf	___fttol@lval,f
  2494  0FED  09E3               	comf	___fttol@lval+1,f
  2495  0FEE  09E4               	comf	___fttol@lval+2,f
  2496  0FEF  09E5               	comf	___fttol@lval+3,f
  2497  0FF0  0AE2               	incf	___fttol@lval,f
  2498  0FF1  1903               	skipnz
  2499  0FF2  0AE3               	incf	___fttol@lval+1,f
  2500  0FF3  1903               	skipnz
  2501  0FF4  0AE4               	incf	___fttol@lval+2,f
  2502  0FF5  1903               	skipnz
  2503  0FF6  0AE5               	incf	___fttol@lval+3,f
  2504  0FF7                     l1957:	
  2505  0FF7  0865               	movf	___fttol@lval+3,w
  2506  0FF8  00DC               	movwf	?___fttol+3
  2507  0FF9  0864               	movf	___fttol@lval+2,w
  2508  0FFA  00DB               	movwf	?___fttol+2
  2509  0FFB  0863               	movf	___fttol@lval+1,w
  2510  0FFC  00DA               	movwf	?___fttol+1
  2511  0FFD  0862               	movf	___fttol@lval,w
  2512  0FFE  00D9               	movwf	?___fttol
  2513  0FFF  0008               	return
  2514  1000                     __end_of___fttol:	
  2515                           
  2516                           	psect	text11
  2517  04B5                     __ptext11:	
  2518 ;; *************** function ___ftmul *****************
  2519 ;; Defined at:
  2520 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  2521 ;; Parameters:    Size  Location     Type
  2522 ;;  f1              3   25[BANK0 ] float 
  2523 ;;  f2              3   28[BANK0 ] float 
  2524 ;; Auto vars:     Size  Location     Type
  2525 ;;  f3_as_produc    3   36[BANK0 ] unsigned um
  2526 ;;  sign            1   40[BANK0 ] unsigned char 
  2527 ;;  cntr            1   39[BANK0 ] unsigned char 
  2528 ;;  exp             1   35[BANK0 ] unsigned char 
  2529 ;; Return value:  Size  Location     Type
  2530 ;;                  3   25[BANK0 ] float 
  2531 ;; Registers used:
  2532 ;;		wreg, status,2, status,0, pclath, cstack
  2533 ;; Tracked objects:
  2534 ;;		On entry : 0/0
  2535 ;;		On exit  : 0/0
  2536 ;;		Unchanged: 0/0
  2537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2538 ;;      Params:         0       6       0       0       0
  2539 ;;      Locals:         0       6       0       0       0
  2540 ;;      Temps:          0       4       0       0       0
  2541 ;;      Totals:         0      16       0       0       0
  2542 ;;Total ram usage:       16 bytes
  2543 ;; Hardware stack levels used:    1
  2544 ;; Hardware stack levels required when called:    3
  2545 ;; This function calls:
  2546 ;;		___ftpack
  2547 ;; This function is called by:
  2548 ;;		_getADCmm
  2549 ;; This function uses a non-reentrant model
  2550 ;;
  2551                           
  2552                           
  2553                           ;psect for function ___ftmul
  2554  04B5                     ___ftmul:	
  2555                           
  2556                           ;incstack = 0
  2557                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  2558  04B5  1283               	bcf	3,5	;RP0=0, select bank0
  2559  04B6  1303               	bcf	3,6	;RP1=0, select bank0
  2560  04B7  0839               	movf	___ftmul@f1,w
  2561  04B8  00BF               	movwf	??___ftmul
  2562  04B9  083A               	movf	___ftmul@f1+1,w
  2563  04BA  00C0               	movwf	??___ftmul+1
  2564  04BB  083B               	movf	___ftmul@f1+2,w
  2565  04BC  00C1               	movwf	??___ftmul+2
  2566  04BD  1003               	clrc
  2567  04BE  0D40               	rlf	??___ftmul+1,w
  2568  04BF  0D41               	rlf	??___ftmul+2,w
  2569  04C0  00C2               	movwf	??___ftmul+3
  2570  04C1  0842               	movf	??___ftmul+3,w
  2571  04C2  00C3               	movwf	___ftmul@exp
  2572  04C3  0843               	movf	___ftmul@exp,w
  2573  04C4  1D03               	btfss	3,2
  2574  04C5  2CCD               	goto	l1875
  2575  04C6  3000               	movlw	0
  2576  04C7  00B9               	movwf	?___ftmul
  2577  04C8  3000               	movlw	0
  2578  04C9  00BA               	movwf	?___ftmul+1
  2579  04CA  3000               	movlw	0
  2580  04CB  00BB               	movwf	?___ftmul+2
  2581  04CC  0008               	return
  2582  04CD                     l1875:	
  2583  04CD  083C               	movf	___ftmul@f2,w
  2584  04CE  00BF               	movwf	??___ftmul
  2585  04CF  083D               	movf	___ftmul@f2+1,w
  2586  04D0  00C0               	movwf	??___ftmul+1
  2587  04D1  083E               	movf	___ftmul@f2+2,w
  2588  04D2  00C1               	movwf	??___ftmul+2
  2589  04D3  1003               	clrc
  2590  04D4  0D40               	rlf	??___ftmul+1,w
  2591  04D5  0D41               	rlf	??___ftmul+2,w
  2592  04D6  00C2               	movwf	??___ftmul+3
  2593  04D7  0842               	movf	??___ftmul+3,w
  2594  04D8  00C8               	movwf	___ftmul@sign
  2595  04D9  0848               	movf	___ftmul@sign,w
  2596  04DA  1D03               	btfss	3,2
  2597  04DB  2CE3               	goto	l1881
  2598  04DC  3000               	movlw	0
  2599  04DD  00B9               	movwf	?___ftmul
  2600  04DE  3000               	movlw	0
  2601  04DF  00BA               	movwf	?___ftmul+1
  2602  04E0  3000               	movlw	0
  2603  04E1  00BB               	movwf	?___ftmul+2
  2604  04E2  0008               	return
  2605  04E3                     l1881:	
  2606  04E3  0848               	movf	___ftmul@sign,w
  2607  04E4  3E7B               	addlw	123
  2608  04E5  00BF               	movwf	??___ftmul
  2609  04E6  083F               	movf	??___ftmul,w
  2610  04E7  07C3               	addwf	___ftmul@exp,f
  2611  04E8  0839               	movf	___ftmul@f1,w
  2612  04E9  00BF               	movwf	??___ftmul
  2613  04EA  083A               	movf	___ftmul@f1+1,w
  2614  04EB  00C0               	movwf	??___ftmul+1
  2615  04EC  083B               	movf	___ftmul@f1+2,w
  2616  04ED  00C1               	movwf	??___ftmul+2
  2617  04EE  3010               	movlw	16
  2618  04EF                     u2395:	
  2619  04EF  1003               	clrc
  2620  04F0  0CC1               	rrf	??___ftmul+2,f
  2621  04F1  0CC0               	rrf	??___ftmul+1,f
  2622  04F2  0CBF               	rrf	??___ftmul,f
  2623  04F3  3EFF               	addlw	-1
  2624  04F4  1D03               	skipz
  2625  04F5  2CEF               	goto	u2395
  2626  04F6  083F               	movf	??___ftmul,w
  2627  04F7  00C2               	movwf	??___ftmul+3
  2628  04F8  0842               	movf	??___ftmul+3,w
  2629  04F9  00C8               	movwf	___ftmul@sign
  2630  04FA  083C               	movf	___ftmul@f2,w
  2631  04FB  00BF               	movwf	??___ftmul
  2632  04FC  083D               	movf	___ftmul@f2+1,w
  2633  04FD  00C0               	movwf	??___ftmul+1
  2634  04FE  083E               	movf	___ftmul@f2+2,w
  2635  04FF  00C1               	movwf	??___ftmul+2
  2636  0500  3010               	movlw	16
  2637  0501                     u2405:	
  2638  0501  1003               	clrc
  2639  0502  0CC1               	rrf	??___ftmul+2,f
  2640  0503  0CC0               	rrf	??___ftmul+1,f
  2641  0504  0CBF               	rrf	??___ftmul,f
  2642  0505  3EFF               	addlw	-1
  2643  0506  1D03               	skipz
  2644  0507  2D01               	goto	u2405
  2645  0508  083F               	movf	??___ftmul,w
  2646  0509  00C2               	movwf	??___ftmul+3
  2647  050A  0842               	movf	??___ftmul+3,w
  2648  050B  06C8               	xorwf	___ftmul@sign,f
  2649  050C  3080               	movlw	128
  2650  050D  00BF               	movwf	??___ftmul
  2651  050E  083F               	movf	??___ftmul,w
  2652  050F  05C8               	andwf	___ftmul@sign,f
  2653  0510  17BA               	bsf	___ftmul@f1+1,7
  2654  0511  17BD               	bsf	___ftmul@f2+1,7
  2655  0512  30FF               	movlw	255
  2656  0513  05BC               	andwf	___ftmul@f2,f
  2657  0514  30FF               	movlw	255
  2658  0515  05BD               	andwf	___ftmul@f2+1,f
  2659  0516  3000               	movlw	0
  2660  0517  05BE               	andwf	___ftmul@f2+2,f
  2661  0518  3000               	movlw	0
  2662  0519  00C4               	movwf	___ftmul@f3_as_product
  2663  051A  3000               	movlw	0
  2664  051B  00C5               	movwf	___ftmul@f3_as_product+1
  2665  051C  3000               	movlw	0
  2666  051D  00C6               	movwf	___ftmul@f3_as_product+2
  2667  051E  3007               	movlw	7
  2668  051F  00BF               	movwf	??___ftmul
  2669  0520  083F               	movf	??___ftmul,w
  2670  0521  00C7               	movwf	___ftmul@cntr
  2671  0522                     l1893:	
  2672  0522  1C39               	btfss	___ftmul@f1,0
  2673  0523  2D32               	goto	l1897
  2674  0524  083C               	movf	___ftmul@f2,w
  2675  0525  07C4               	addwf	___ftmul@f3_as_product,f
  2676  0526  083D               	movf	___ftmul@f2+1,w
  2677  0527  1103               	clrz
  2678  0528  1803               	skipnc
  2679  0529  0A3D               	incf	___ftmul@f2+1,w
  2680  052A  1D03               	btfss	3,2
  2681  052B  07C5               	addwf	___ftmul@f3_as_product+1,f
  2682  052C  083E               	movf	___ftmul@f2+2,w
  2683  052D  1103               	clrz
  2684  052E  1803               	skipnc
  2685  052F  0A3E               	incf	___ftmul@f2+2,w
  2686  0530  1D03               	btfss	3,2
  2687  0531  07C6               	addwf	___ftmul@f3_as_product+2,f
  2688  0532                     l1897:	
  2689  0532  3001               	movlw	1
  2690  0533                     u2435:	
  2691  0533  1003               	clrc
  2692  0534  0CBB               	rrf	___ftmul@f1+2,f
  2693  0535  0CBA               	rrf	___ftmul@f1+1,f
  2694  0536  0CB9               	rrf	___ftmul@f1,f
  2695  0537  3EFF               	addlw	-1
  2696  0538  1D03               	skipz
  2697  0539  2D33               	goto	u2435
  2698  053A  3001               	movlw	1
  2699  053B                     u2445:	
  2700  053B  1003               	clrc
  2701  053C  0DBC               	rlf	___ftmul@f2,f
  2702  053D  0DBD               	rlf	___ftmul@f2+1,f
  2703  053E  0DBE               	rlf	___ftmul@f2+2,f
  2704  053F  3EFF               	addlw	-1
  2705  0540  1D03               	skipz
  2706  0541  2D3B               	goto	u2445
  2707  0542  3001               	movlw	1
  2708  0543  02C7               	subwf	___ftmul@cntr,f
  2709  0544  1D03               	btfss	3,2
  2710  0545  2D22               	goto	l1893
  2711  0546  3009               	movlw	9
  2712  0547  00BF               	movwf	??___ftmul
  2713  0548  083F               	movf	??___ftmul,w
  2714  0549  00C7               	movwf	___ftmul@cntr
  2715  054A                     l1905:	
  2716  054A  1C39               	btfss	___ftmul@f1,0
  2717  054B  2D5A               	goto	l1909
  2718  054C  083C               	movf	___ftmul@f2,w
  2719  054D  07C4               	addwf	___ftmul@f3_as_product,f
  2720  054E  083D               	movf	___ftmul@f2+1,w
  2721  054F  1103               	clrz
  2722  0550  1803               	skipnc
  2723  0551  0A3D               	incf	___ftmul@f2+1,w
  2724  0552  1D03               	btfss	3,2
  2725  0553  07C5               	addwf	___ftmul@f3_as_product+1,f
  2726  0554  083E               	movf	___ftmul@f2+2,w
  2727  0555  1103               	clrz
  2728  0556  1803               	skipnc
  2729  0557  0A3E               	incf	___ftmul@f2+2,w
  2730  0558  1D03               	btfss	3,2
  2731  0559  07C6               	addwf	___ftmul@f3_as_product+2,f
  2732  055A                     l1909:	
  2733  055A  3001               	movlw	1
  2734  055B                     u2485:	
  2735  055B  1003               	clrc
  2736  055C  0CBB               	rrf	___ftmul@f1+2,f
  2737  055D  0CBA               	rrf	___ftmul@f1+1,f
  2738  055E  0CB9               	rrf	___ftmul@f1,f
  2739  055F  3EFF               	addlw	-1
  2740  0560  1D03               	skipz
  2741  0561  2D5B               	goto	u2485
  2742  0562  3001               	movlw	1
  2743  0563                     u2495:	
  2744  0563  1003               	clrc
  2745  0564  0CC6               	rrf	___ftmul@f3_as_product+2,f
  2746  0565  0CC5               	rrf	___ftmul@f3_as_product+1,f
  2747  0566  0CC4               	rrf	___ftmul@f3_as_product,f
  2748  0567  3EFF               	addlw	-1
  2749  0568  1D03               	skipz
  2750  0569  2D63               	goto	u2495
  2751  056A  3001               	movlw	1
  2752  056B  02C7               	subwf	___ftmul@cntr,f
  2753  056C  1D03               	btfss	3,2
  2754  056D  2D4A               	goto	l1905
  2755  056E  0844               	movf	___ftmul@f3_as_product,w
  2756  056F  00A0               	movwf	___ftpack@arg
  2757  0570  0845               	movf	___ftmul@f3_as_product+1,w
  2758  0571  00A1               	movwf	___ftpack@arg+1
  2759  0572  0846               	movf	___ftmul@f3_as_product+2,w
  2760  0573  00A2               	movwf	___ftpack@arg+2
  2761  0574  0843               	movf	___ftmul@exp,w
  2762  0575  00BF               	movwf	??___ftmul
  2763  0576  083F               	movf	??___ftmul,w
  2764  0577  00A3               	movwf	___ftpack@exp
  2765  0578  0848               	movf	___ftmul@sign,w
  2766  0579  00C0               	movwf	??___ftmul+1
  2767  057A  0840               	movf	??___ftmul+1,w
  2768  057B  00A4               	movwf	___ftpack@sign
  2769  057C  120A  118A  2781   	fcall	___ftpack
  2770  057F  1283               	bcf	3,5	;RP0=0, select bank0
  2771  0580  1303               	bcf	3,6	;RP1=0, select bank0
  2772  0581  0820               	movf	?___ftpack,w
  2773  0582  00B9               	movwf	?___ftmul
  2774  0583  0821               	movf	?___ftpack+1,w
  2775  0584  00BA               	movwf	?___ftmul+1
  2776  0585  0822               	movf	?___ftpack+2,w
  2777  0586  00BB               	movwf	?___ftmul+2
  2778  0587  0008               	return
  2779  0588                     __end_of___ftmul:	
  2780                           
  2781                           	psect	text12
  2782  0588                     __ptext12:	
  2783 ;; *************** function ___ftdiv *****************
  2784 ;; Defined at:
  2785 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  2786 ;; Parameters:    Size  Location     Type
  2787 ;;  f2              3   41[BANK0 ] float 
  2788 ;;  f1              3   44[BANK0 ] float 
  2789 ;; Auto vars:     Size  Location     Type
  2790 ;;  f3              3   52[BANK0 ] float 
  2791 ;;  sign            1   56[BANK0 ] unsigned char 
  2792 ;;  exp             1   55[BANK0 ] unsigned char 
  2793 ;;  cntr            1   51[BANK0 ] unsigned char 
  2794 ;; Return value:  Size  Location     Type
  2795 ;;                  3   41[BANK0 ] float 
  2796 ;; Registers used:
  2797 ;;		wreg, status,2, status,0, pclath, cstack
  2798 ;; Tracked objects:
  2799 ;;		On entry : 0/0
  2800 ;;		On exit  : 0/0
  2801 ;;		Unchanged: 0/0
  2802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2803 ;;      Params:         0       6       0       0       0
  2804 ;;      Locals:         0       6       0       0       0
  2805 ;;      Temps:          0       4       0       0       0
  2806 ;;      Totals:         0      16       0       0       0
  2807 ;;Total ram usage:       16 bytes
  2808 ;; Hardware stack levels used:    1
  2809 ;; Hardware stack levels required when called:    3
  2810 ;; This function calls:
  2811 ;;		___ftpack
  2812 ;; This function is called by:
  2813 ;;		_getADCmm
  2814 ;; This function uses a non-reentrant model
  2815 ;;
  2816                           
  2817                           
  2818                           ;psect for function ___ftdiv
  2819  0588                     ___ftdiv:	
  2820                           
  2821                           ;incstack = 0
  2822                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  2823  0588  1283               	bcf	3,5	;RP0=0, select bank0
  2824  0589  1303               	bcf	3,6	;RP1=0, select bank0
  2825  058A  084C               	movf	___ftdiv@f1,w
  2826  058B  00CF               	movwf	??___ftdiv
  2827  058C  084D               	movf	___ftdiv@f1+1,w
  2828  058D  00D0               	movwf	??___ftdiv+1
  2829  058E  084E               	movf	___ftdiv@f1+2,w
  2830  058F  00D1               	movwf	??___ftdiv+2
  2831  0590  1003               	clrc
  2832  0591  0D50               	rlf	??___ftdiv+1,w
  2833  0592  0D51               	rlf	??___ftdiv+2,w
  2834  0593  00D2               	movwf	??___ftdiv+3
  2835  0594  0852               	movf	??___ftdiv+3,w
  2836  0595  00D7               	movwf	___ftdiv@exp
  2837  0596  0857               	movf	___ftdiv@exp,w
  2838  0597  1D03               	btfss	3,2
  2839  0598  2DA0               	goto	l1833
  2840  0599  3000               	movlw	0
  2841  059A  00C9               	movwf	?___ftdiv
  2842  059B  3000               	movlw	0
  2843  059C  00CA               	movwf	?___ftdiv+1
  2844  059D  3000               	movlw	0
  2845  059E  00CB               	movwf	?___ftdiv+2
  2846  059F  0008               	return
  2847  05A0                     l1833:	
  2848  05A0  0849               	movf	___ftdiv@f2,w
  2849  05A1  00CF               	movwf	??___ftdiv
  2850  05A2  084A               	movf	___ftdiv@f2+1,w
  2851  05A3  00D0               	movwf	??___ftdiv+1
  2852  05A4  084B               	movf	___ftdiv@f2+2,w
  2853  05A5  00D1               	movwf	??___ftdiv+2
  2854  05A6  1003               	clrc
  2855  05A7  0D50               	rlf	??___ftdiv+1,w
  2856  05A8  0D51               	rlf	??___ftdiv+2,w
  2857  05A9  00D2               	movwf	??___ftdiv+3
  2858  05AA  0852               	movf	??___ftdiv+3,w
  2859  05AB  00D8               	movwf	___ftdiv@sign
  2860  05AC  0858               	movf	___ftdiv@sign,w
  2861  05AD  1D03               	btfss	3,2
  2862  05AE  2DB6               	goto	l1839
  2863  05AF  3000               	movlw	0
  2864  05B0  00C9               	movwf	?___ftdiv
  2865  05B1  3000               	movlw	0
  2866  05B2  00CA               	movwf	?___ftdiv+1
  2867  05B3  3000               	movlw	0
  2868  05B4  00CB               	movwf	?___ftdiv+2
  2869  05B5  0008               	return
  2870  05B6                     l1839:	
  2871  05B6  3000               	movlw	0
  2872  05B7  00D4               	movwf	___ftdiv@f3
  2873  05B8  3000               	movlw	0
  2874  05B9  00D5               	movwf	___ftdiv@f3+1
  2875  05BA  3000               	movlw	0
  2876  05BB  00D6               	movwf	___ftdiv@f3+2
  2877  05BC  3089               	movlw	137
  2878  05BD  0758               	addwf	___ftdiv@sign,w
  2879  05BE  00CF               	movwf	??___ftdiv
  2880  05BF  084F               	movf	??___ftdiv,w
  2881  05C0  02D7               	subwf	___ftdiv@exp,f
  2882  05C1  084C               	movf	___ftdiv@f1,w
  2883  05C2  00CF               	movwf	??___ftdiv
  2884  05C3  084D               	movf	___ftdiv@f1+1,w
  2885  05C4  00D0               	movwf	??___ftdiv+1
  2886  05C5  084E               	movf	___ftdiv@f1+2,w
  2887  05C6  00D1               	movwf	??___ftdiv+2
  2888  05C7  3010               	movlw	16
  2889  05C8                     u2315:	
  2890  05C8  1003               	clrc
  2891  05C9  0CD1               	rrf	??___ftdiv+2,f
  2892  05CA  0CD0               	rrf	??___ftdiv+1,f
  2893  05CB  0CCF               	rrf	??___ftdiv,f
  2894  05CC  3EFF               	addlw	-1
  2895  05CD  1D03               	skipz
  2896  05CE  2DC8               	goto	u2315
  2897  05CF  084F               	movf	??___ftdiv,w
  2898  05D0  00D2               	movwf	??___ftdiv+3
  2899  05D1  0852               	movf	??___ftdiv+3,w
  2900  05D2  00D8               	movwf	___ftdiv@sign
  2901  05D3  0849               	movf	___ftdiv@f2,w
  2902  05D4  00CF               	movwf	??___ftdiv
  2903  05D5  084A               	movf	___ftdiv@f2+1,w
  2904  05D6  00D0               	movwf	??___ftdiv+1
  2905  05D7  084B               	movf	___ftdiv@f2+2,w
  2906  05D8  00D1               	movwf	??___ftdiv+2
  2907  05D9  3010               	movlw	16
  2908  05DA                     u2325:	
  2909  05DA  1003               	clrc
  2910  05DB  0CD1               	rrf	??___ftdiv+2,f
  2911  05DC  0CD0               	rrf	??___ftdiv+1,f
  2912  05DD  0CCF               	rrf	??___ftdiv,f
  2913  05DE  3EFF               	addlw	-1
  2914  05DF  1D03               	skipz
  2915  05E0  2DDA               	goto	u2325
  2916  05E1  084F               	movf	??___ftdiv,w
  2917  05E2  00D2               	movwf	??___ftdiv+3
  2918  05E3  0852               	movf	??___ftdiv+3,w
  2919  05E4  06D8               	xorwf	___ftdiv@sign,f
  2920  05E5  3080               	movlw	128
  2921  05E6  00CF               	movwf	??___ftdiv
  2922  05E7  084F               	movf	??___ftdiv,w
  2923  05E8  05D8               	andwf	___ftdiv@sign,f
  2924  05E9  17CD               	bsf	___ftdiv@f1+1,7
  2925  05EA  30FF               	movlw	255
  2926  05EB  05CC               	andwf	___ftdiv@f1,f
  2927  05EC  30FF               	movlw	255
  2928  05ED  05CD               	andwf	___ftdiv@f1+1,f
  2929  05EE  3000               	movlw	0
  2930  05EF  05CE               	andwf	___ftdiv@f1+2,f
  2931  05F0  17CA               	bsf	___ftdiv@f2+1,7
  2932  05F1  30FF               	movlw	255
  2933  05F2  05C9               	andwf	___ftdiv@f2,f
  2934  05F3  30FF               	movlw	255
  2935  05F4  05CA               	andwf	___ftdiv@f2+1,f
  2936  05F5  3000               	movlw	0
  2937  05F6  05CB               	andwf	___ftdiv@f2+2,f
  2938  05F7  3018               	movlw	24
  2939  05F8  00CF               	movwf	??___ftdiv
  2940  05F9  084F               	movf	??___ftdiv,w
  2941  05FA  00D3               	movwf	___ftdiv@cntr
  2942  05FB                     l1853:	
  2943  05FB  3001               	movlw	1
  2944  05FC                     u2335:	
  2945  05FC  1003               	clrc
  2946  05FD  0DD4               	rlf	___ftdiv@f3,f
  2947  05FE  0DD5               	rlf	___ftdiv@f3+1,f
  2948  05FF  0DD6               	rlf	___ftdiv@f3+2,f
  2949  0600  3EFF               	addlw	-1
  2950  0601  1D03               	skipz
  2951  0602  2DFC               	goto	u2335
  2952  0603  084B               	movf	___ftdiv@f2+2,w
  2953  0604  024E               	subwf	___ftdiv@f1+2,w
  2954  0605  1D03               	skipz
  2955  0606  2E0D               	goto	u2345
  2956  0607  084A               	movf	___ftdiv@f2+1,w
  2957  0608  024D               	subwf	___ftdiv@f1+1,w
  2958  0609  1D03               	skipz
  2959  060A  2E0D               	goto	u2345
  2960  060B  0849               	movf	___ftdiv@f2,w
  2961  060C  024C               	subwf	___ftdiv@f1,w
  2962  060D                     u2345:	
  2963  060D  1C03               	skipc
  2964  060E  2E1A               	goto	l1861
  2965  060F  0849               	movf	___ftdiv@f2,w
  2966  0610  02CC               	subwf	___ftdiv@f1,f
  2967  0611  084A               	movf	___ftdiv@f2+1,w
  2968  0612  1C03               	skipc
  2969  0613  0F4A               	incfsz	___ftdiv@f2+1,w
  2970  0614  02CD               	subwf	___ftdiv@f1+1,f
  2971  0615  084B               	movf	___ftdiv@f2+2,w
  2972  0616  1C03               	skipc
  2973  0617  0A4B               	incf	___ftdiv@f2+2,w
  2974  0618  02CE               	subwf	___ftdiv@f1+2,f
  2975  0619  1454               	bsf	___ftdiv@f3,0
  2976  061A                     l1861:	
  2977  061A  3001               	movlw	1
  2978  061B                     u2355:	
  2979  061B  1003               	clrc
  2980  061C  0DCC               	rlf	___ftdiv@f1,f
  2981  061D  0DCD               	rlf	___ftdiv@f1+1,f
  2982  061E  0DCE               	rlf	___ftdiv@f1+2,f
  2983  061F  3EFF               	addlw	-1
  2984  0620  1D03               	skipz
  2985  0621  2E1B               	goto	u2355
  2986  0622  3001               	movlw	1
  2987  0623  02D3               	subwf	___ftdiv@cntr,f
  2988  0624  1D03               	btfss	3,2
  2989  0625  2DFB               	goto	l1853
  2990  0626  0854               	movf	___ftdiv@f3,w
  2991  0627  00A0               	movwf	___ftpack@arg
  2992  0628  0855               	movf	___ftdiv@f3+1,w
  2993  0629  00A1               	movwf	___ftpack@arg+1
  2994  062A  0856               	movf	___ftdiv@f3+2,w
  2995  062B  00A2               	movwf	___ftpack@arg+2
  2996  062C  0857               	movf	___ftdiv@exp,w
  2997  062D  00CF               	movwf	??___ftdiv
  2998  062E  084F               	movf	??___ftdiv,w
  2999  062F  00A3               	movwf	___ftpack@exp
  3000  0630  0858               	movf	___ftdiv@sign,w
  3001  0631  00D0               	movwf	??___ftdiv+1
  3002  0632  0850               	movf	??___ftdiv+1,w
  3003  0633  00A4               	movwf	___ftpack@sign
  3004  0634  120A  118A  2781   	fcall	___ftpack
  3005  0637  1283               	bcf	3,5	;RP0=0, select bank0
  3006  0638  1303               	bcf	3,6	;RP1=0, select bank0
  3007  0639  0820               	movf	?___ftpack,w
  3008  063A  00C9               	movwf	?___ftdiv
  3009  063B  0821               	movf	?___ftpack+1,w
  3010  063C  00CA               	movwf	?___ftdiv+1
  3011  063D  0822               	movf	?___ftpack+2,w
  3012  063E  00CB               	movwf	?___ftdiv+2
  3013  063F  0008               	return
  3014  0640                     __end_of___ftdiv:	
  3015                           
  3016                           	psect	text13
  3017  03AC                     __ptext13:	
  3018 ;; *************** function ___ftadd *****************
  3019 ;; Defined at:
  3020 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
  3021 ;; Parameters:    Size  Location     Type
  3022 ;;  f1              3   12[BANK0 ] float 
  3023 ;;  f2              3   15[BANK0 ] float 
  3024 ;; Auto vars:     Size  Location     Type
  3025 ;;  exp1            1   24[BANK0 ] unsigned char 
  3026 ;;  exp2            1   23[BANK0 ] unsigned char 
  3027 ;;  sign            1   22[BANK0 ] unsigned char 
  3028 ;; Return value:  Size  Location     Type
  3029 ;;                  3   12[BANK0 ] float 
  3030 ;; Registers used:
  3031 ;;		wreg, status,2, status,0, pclath, cstack
  3032 ;; Tracked objects:
  3033 ;;		On entry : 0/0
  3034 ;;		On exit  : 0/0
  3035 ;;		Unchanged: 0/0
  3036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3037 ;;      Params:         0       6       0       0       0
  3038 ;;      Locals:         0       3       0       0       0
  3039 ;;      Temps:          0       4       0       0       0
  3040 ;;      Totals:         0      13       0       0       0
  3041 ;;Total ram usage:       13 bytes
  3042 ;; Hardware stack levels used:    1
  3043 ;; Hardware stack levels required when called:    3
  3044 ;; This function calls:
  3045 ;;		___ftpack
  3046 ;; This function is called by:
  3047 ;;		_getADCmm
  3048 ;; This function uses a non-reentrant model
  3049 ;;
  3050                           
  3051                           
  3052                           ;psect for function ___ftadd
  3053  03AC                     ___ftadd:	
  3054                           
  3055                           ;incstack = 0
  3056                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  3057  03AC  1283               	bcf	3,5	;RP0=0, select bank0
  3058  03AD  1303               	bcf	3,6	;RP1=0, select bank0
  3059  03AE  082C               	movf	___ftadd@f1,w
  3060  03AF  00B2               	movwf	??___ftadd
  3061  03B0  082D               	movf	___ftadd@f1+1,w
  3062  03B1  00B3               	movwf	??___ftadd+1
  3063  03B2  082E               	movf	___ftadd@f1+2,w
  3064  03B3  00B4               	movwf	??___ftadd+2
  3065  03B4  1003               	clrc
  3066  03B5  0D33               	rlf	??___ftadd+1,w
  3067  03B6  0D34               	rlf	??___ftadd+2,w
  3068  03B7  00B5               	movwf	??___ftadd+3
  3069  03B8  0835               	movf	??___ftadd+3,w
  3070  03B9  00B8               	movwf	___ftadd@exp1
  3071  03BA  082F               	movf	___ftadd@f2,w
  3072  03BB  00B2               	movwf	??___ftadd
  3073  03BC  0830               	movf	___ftadd@f2+1,w
  3074  03BD  00B3               	movwf	??___ftadd+1
  3075  03BE  0831               	movf	___ftadd@f2+2,w
  3076  03BF  00B4               	movwf	??___ftadd+2
  3077  03C0  1003               	clrc
  3078  03C1  0D33               	rlf	??___ftadd+1,w
  3079  03C2  0D34               	rlf	??___ftadd+2,w
  3080  03C3  00B5               	movwf	??___ftadd+3
  3081  03C4  0835               	movf	??___ftadd+3,w
  3082  03C5  00B7               	movwf	___ftadd@exp2
  3083  03C6  0838               	movf	___ftadd@exp1,w
  3084  03C7  1903               	btfsc	3,2
  3085  03C8  2BD5               	goto	l1763
  3086  03C9  0837               	movf	___ftadd@exp2,w
  3087  03CA  0238               	subwf	___ftadd@exp1,w
  3088  03CB  1803               	skipnc
  3089  03CC  2BDC               	goto	l1767
  3090  03CD  0338               	decf	___ftadd@exp1,w
  3091  03CE  3AFF               	xorlw	255
  3092  03CF  0737               	addwf	___ftadd@exp2,w
  3093  03D0  00B2               	movwf	??___ftadd
  3094  03D1  3019               	movlw	25
  3095  03D2  0232               	subwf	??___ftadd,w
  3096  03D3  1C03               	skipc
  3097  03D4  2BDC               	goto	l1767
  3098  03D5                     l1763:	
  3099  03D5  082F               	movf	___ftadd@f2,w
  3100  03D6  00AC               	movwf	?___ftadd
  3101  03D7  0830               	movf	___ftadd@f2+1,w
  3102  03D8  00AD               	movwf	?___ftadd+1
  3103  03D9  0831               	movf	___ftadd@f2+2,w
  3104  03DA  00AE               	movwf	?___ftadd+2
  3105  03DB  0008               	return
  3106  03DC                     l1767:	
  3107  03DC  0837               	movf	___ftadd@exp2,w
  3108  03DD  1903               	btfsc	3,2
  3109  03DE  0008               	return
  3110  03DF  0838               	movf	___ftadd@exp1,w
  3111  03E0  0237               	subwf	___ftadd@exp2,w
  3112  03E1  1803               	skipnc
  3113  03E2  2BEB               	goto	l1773
  3114  03E3  0337               	decf	___ftadd@exp2,w
  3115  03E4  3AFF               	xorlw	255
  3116  03E5  0738               	addwf	___ftadd@exp1,w
  3117  03E6  00B2               	movwf	??___ftadd
  3118  03E7  3019               	movlw	25
  3119  03E8  0232               	subwf	??___ftadd,w
  3120  03E9  1803               	btfsc	3,0
  3121  03EA  0008               	return
  3122  03EB                     l1773:	
  3123  03EB  3006               	movlw	6
  3124  03EC  00B2               	movwf	??___ftadd
  3125  03ED  0832               	movf	??___ftadd,w
  3126  03EE  00B6               	movwf	___ftadd@sign
  3127  03EF  1BAE               	btfsc	___ftadd@f1+2,7
  3128  03F0  17B6               	bsf	___ftadd@sign,7
  3129  03F1  1BB1               	btfsc	___ftadd@f2+2,7
  3130  03F2  1736               	bsf	___ftadd@sign,6
  3131  03F3  17AD               	bsf	___ftadd@f1+1,7
  3132  03F4  30FF               	movlw	255
  3133  03F5  05AC               	andwf	___ftadd@f1,f
  3134  03F6  30FF               	movlw	255
  3135  03F7  05AD               	andwf	___ftadd@f1+1,f
  3136  03F8  3000               	movlw	0
  3137  03F9  05AE               	andwf	___ftadd@f1+2,f
  3138  03FA  17B0               	bsf	___ftadd@f2+1,7
  3139  03FB  30FF               	movlw	255
  3140  03FC  05AF               	andwf	___ftadd@f2,f
  3141  03FD  30FF               	movlw	255
  3142  03FE  05B0               	andwf	___ftadd@f2+1,f
  3143  03FF  3000               	movlw	0
  3144  0400  05B1               	andwf	___ftadd@f2+2,f
  3145  0401  0837               	movf	___ftadd@exp2,w
  3146  0402  0238               	subwf	___ftadd@exp1,w
  3147  0403  1803               	skipnc
  3148  0404  2C2B               	goto	l1795
  3149  0405                     l1785:	
  3150  0405  3001               	movlw	1
  3151  0406                     u2145:	
  3152  0406  1003               	clrc
  3153  0407  0DAF               	rlf	___ftadd@f2,f
  3154  0408  0DB0               	rlf	___ftadd@f2+1,f
  3155  0409  0DB1               	rlf	___ftadd@f2+2,f
  3156  040A  3EFF               	addlw	-1
  3157  040B  1D03               	skipz
  3158  040C  2C06               	goto	u2145
  3159  040D  3001               	movlw	1
  3160  040E  02B7               	subwf	___ftadd@exp2,f
  3161  040F  0837               	movf	___ftadd@exp2,w
  3162  0410  0638               	xorwf	___ftadd@exp1,w
  3163  0411  1903               	skipnz
  3164  0412  2C26               	goto	l1793
  3165  0413  3001               	movlw	1
  3166  0414  02B6               	subwf	___ftadd@sign,f
  3167  0415  0836               	movf	___ftadd@sign,w
  3168  0416  3907               	andlw	7
  3169  0417  1903               	btfsc	3,2
  3170  0418  2C26               	goto	l1793
  3171  0419  2C05               	goto	l1785
  3172  041A                     l1791:	
  3173  041A  3001               	movlw	1
  3174  041B                     u2175:	
  3175  041B  1003               	clrc
  3176  041C  0CAE               	rrf	___ftadd@f1+2,f
  3177  041D  0CAD               	rrf	___ftadd@f1+1,f
  3178  041E  0CAC               	rrf	___ftadd@f1,f
  3179  041F  3EFF               	addlw	-1
  3180  0420  1D03               	skipz
  3181  0421  2C1B               	goto	u2175
  3182  0422  3001               	movlw	1
  3183  0423  00B2               	movwf	??___ftadd
  3184  0424  0832               	movf	??___ftadd,w
  3185  0425  07B8               	addwf	___ftadd@exp1,f
  3186  0426                     l1793:	
  3187  0426  0838               	movf	___ftadd@exp1,w
  3188  0427  0637               	xorwf	___ftadd@exp2,w
  3189  0428  1903               	btfsc	3,2
  3190  0429  2C54               	goto	l609
  3191  042A  2C1A               	goto	l1791
  3192  042B                     l1795:	
  3193  042B  0838               	movf	___ftadd@exp1,w
  3194  042C  0237               	subwf	___ftadd@exp2,w
  3195  042D  1803               	skipnc
  3196  042E  2C54               	goto	l609
  3197  042F                     l1797:	
  3198  042F  3001               	movlw	1
  3199  0430                     u2205:	
  3200  0430  1003               	clrc
  3201  0431  0DAC               	rlf	___ftadd@f1,f
  3202  0432  0DAD               	rlf	___ftadd@f1+1,f
  3203  0433  0DAE               	rlf	___ftadd@f1+2,f
  3204  0434  3EFF               	addlw	-1
  3205  0435  1D03               	skipz
  3206  0436  2C30               	goto	u2205
  3207  0437  3001               	movlw	1
  3208  0438  02B8               	subwf	___ftadd@exp1,f
  3209  0439  0837               	movf	___ftadd@exp2,w
  3210  043A  0638               	xorwf	___ftadd@exp1,w
  3211  043B  1903               	skipnz
  3212  043C  2C50               	goto	l1805
  3213  043D  3001               	movlw	1
  3214  043E  02B6               	subwf	___ftadd@sign,f
  3215  043F  0836               	movf	___ftadd@sign,w
  3216  0440  3907               	andlw	7
  3217  0441  1903               	btfsc	3,2
  3218  0442  2C50               	goto	l1805
  3219  0443  2C2F               	goto	l1797
  3220  0444                     l1803:	
  3221  0444  3001               	movlw	1
  3222  0445                     u2235:	
  3223  0445  1003               	clrc
  3224  0446  0CB1               	rrf	___ftadd@f2+2,f
  3225  0447  0CB0               	rrf	___ftadd@f2+1,f
  3226  0448  0CAF               	rrf	___ftadd@f2,f
  3227  0449  3EFF               	addlw	-1
  3228  044A  1D03               	skipz
  3229  044B  2C45               	goto	u2235
  3230  044C  3001               	movlw	1
  3231  044D  00B2               	movwf	??___ftadd
  3232  044E  0832               	movf	??___ftadd,w
  3233  044F  07B7               	addwf	___ftadd@exp2,f
  3234  0450                     l1805:	
  3235  0450  0838               	movf	___ftadd@exp1,w
  3236  0451  0637               	xorwf	___ftadd@exp2,w
  3237  0452  1D03               	skipz
  3238  0453  2C44               	goto	l1803
  3239  0454                     l609:	
  3240  0454  1FB6               	btfss	___ftadd@sign,7
  3241  0455  2C66               	goto	l1809
  3242  0456  30FF               	movlw	255
  3243  0457  06AC               	xorwf	___ftadd@f1,f
  3244  0458  30FF               	movlw	255
  3245  0459  06AD               	xorwf	___ftadd@f1+1,f
  3246  045A  30FF               	movlw	255
  3247  045B  06AE               	xorwf	___ftadd@f1+2,f
  3248  045C  3001               	movlw	1
  3249  045D  07AC               	addwf	___ftadd@f1,f
  3250  045E  3000               	movlw	0
  3251  045F  1803               	skipnc
  3252  0460  3001               	movlw	1
  3253  0461  07AD               	addwf	___ftadd@f1+1,f
  3254  0462  3000               	movlw	0
  3255  0463  1803               	skipnc
  3256  0464  3001               	movlw	1
  3257  0465  07AE               	addwf	___ftadd@f1+2,f
  3258  0466                     l1809:	
  3259  0466  1F36               	btfss	___ftadd@sign,6
  3260  0467  2C78               	goto	l1813
  3261  0468  30FF               	movlw	255
  3262  0469  06AF               	xorwf	___ftadd@f2,f
  3263  046A  30FF               	movlw	255
  3264  046B  06B0               	xorwf	___ftadd@f2+1,f
  3265  046C  30FF               	movlw	255
  3266  046D  06B1               	xorwf	___ftadd@f2+2,f
  3267  046E  3001               	movlw	1
  3268  046F  07AF               	addwf	___ftadd@f2,f
  3269  0470  3000               	movlw	0
  3270  0471  1803               	skipnc
  3271  0472  3001               	movlw	1
  3272  0473  07B0               	addwf	___ftadd@f2+1,f
  3273  0474  3000               	movlw	0
  3274  0475  1803               	skipnc
  3275  0476  3001               	movlw	1
  3276  0477  07B1               	addwf	___ftadd@f2+2,f
  3277  0478                     l1813:	
  3278  0478  01B6               	clrf	___ftadd@sign
  3279  0479  082C               	movf	___ftadd@f1,w
  3280  047A  07AF               	addwf	___ftadd@f2,f
  3281  047B  082D               	movf	___ftadd@f1+1,w
  3282  047C  1103               	clrz
  3283  047D  1803               	skipnc
  3284  047E  0A2D               	incf	___ftadd@f1+1,w
  3285  047F  1D03               	btfss	3,2
  3286  0480  07B0               	addwf	___ftadd@f2+1,f
  3287  0481  082E               	movf	___ftadd@f1+2,w
  3288  0482  1103               	clrz
  3289  0483  1803               	skipnc
  3290  0484  0A2E               	incf	___ftadd@f1+2,w
  3291  0485  1D03               	btfss	3,2
  3292  0486  07B1               	addwf	___ftadd@f2+2,f
  3293  0487  1FB1               	btfss	___ftadd@f2+2,7
  3294  0488  2C9B               	goto	l1823
  3295  0489  30FF               	movlw	255
  3296  048A  06AF               	xorwf	___ftadd@f2,f
  3297  048B  30FF               	movlw	255
  3298  048C  06B0               	xorwf	___ftadd@f2+1,f
  3299  048D  30FF               	movlw	255
  3300  048E  06B1               	xorwf	___ftadd@f2+2,f
  3301  048F  3001               	movlw	1
  3302  0490  07AF               	addwf	___ftadd@f2,f
  3303  0491  3000               	movlw	0
  3304  0492  1803               	skipnc
  3305  0493  3001               	movlw	1
  3306  0494  07B0               	addwf	___ftadd@f2+1,f
  3307  0495  3000               	movlw	0
  3308  0496  1803               	skipnc
  3309  0497  3001               	movlw	1
  3310  0498  07B1               	addwf	___ftadd@f2+2,f
  3311  0499  01B6               	clrf	___ftadd@sign
  3312  049A  0AB6               	incf	___ftadd@sign,f
  3313  049B                     l1823:	
  3314  049B  082F               	movf	___ftadd@f2,w
  3315  049C  00A0               	movwf	___ftpack@arg
  3316  049D  0830               	movf	___ftadd@f2+1,w
  3317  049E  00A1               	movwf	___ftpack@arg+1
  3318  049F  0831               	movf	___ftadd@f2+2,w
  3319  04A0  00A2               	movwf	___ftpack@arg+2
  3320  04A1  0838               	movf	___ftadd@exp1,w
  3321  04A2  00B2               	movwf	??___ftadd
  3322  04A3  0832               	movf	??___ftadd,w
  3323  04A4  00A3               	movwf	___ftpack@exp
  3324  04A5  0836               	movf	___ftadd@sign,w
  3325  04A6  00B3               	movwf	??___ftadd+1
  3326  04A7  0833               	movf	??___ftadd+1,w
  3327  04A8  00A4               	movwf	___ftpack@sign
  3328  04A9  120A  118A  2781   	fcall	___ftpack
  3329  04AC  1283               	bcf	3,5	;RP0=0, select bank0
  3330  04AD  1303               	bcf	3,6	;RP1=0, select bank0
  3331  04AE  0820               	movf	?___ftpack,w
  3332  04AF  00AC               	movwf	?___ftadd
  3333  04B0  0821               	movf	?___ftpack+1,w
  3334  04B1  00AD               	movwf	?___ftadd+1
  3335  04B2  0822               	movf	?___ftpack+2,w
  3336  04B3  00AE               	movwf	?___ftadd+2
  3337  04B4  0008               	return
  3338  04B5                     __end_of___ftadd:	
  3339                           
  3340                           	psect	text14
  3341  0781                     __ptext14:	
  3342 ;; *************** function ___ftpack *****************
  3343 ;; Defined at:
  3344 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  3345 ;; Parameters:    Size  Location     Type
  3346 ;;  arg             3    0[BANK0 ] unsigned um
  3347 ;;  exp             1    3[BANK0 ] unsigned char 
  3348 ;;  sign            1    4[BANK0 ] unsigned char 
  3349 ;; Auto vars:     Size  Location     Type
  3350 ;;		None
  3351 ;; Return value:  Size  Location     Type
  3352 ;;                  3    0[BANK0 ] float 
  3353 ;; Registers used:
  3354 ;;		wreg, status,2, status,0
  3355 ;; Tracked objects:
  3356 ;;		On entry : 0/0
  3357 ;;		On exit  : 0/0
  3358 ;;		Unchanged: 0/0
  3359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3360 ;;      Params:         0       5       0       0       0
  3361 ;;      Locals:         0       0       0       0       0
  3362 ;;      Temps:          0       3       0       0       0
  3363 ;;      Totals:         0       8       0       0       0
  3364 ;;Total ram usage:        8 bytes
  3365 ;; Hardware stack levels used:    1
  3366 ;; Hardware stack levels required when called:    2
  3367 ;; This function calls:
  3368 ;;		Nothing
  3369 ;; This function is called by:
  3370 ;;		___ftadd
  3371 ;;		___ftdiv
  3372 ;;		___ftmul
  3373 ;;		___lwtoft
  3374 ;; This function uses a non-reentrant model
  3375 ;;
  3376                           
  3377                           
  3378                           ;psect for function ___ftpack
  3379  0781                     ___ftpack:	
  3380                           
  3381                           ;incstack = 0
  3382                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  3383  0781  1283               	bcf	3,5	;RP0=0, select bank0
  3384  0782  1303               	bcf	3,6	;RP1=0, select bank0
  3385  0783  0823               	movf	___ftpack@exp,w
  3386  0784  1903               	btfsc	3,2
  3387  0785  2F8B               	goto	l1609
  3388  0786  0822               	movf	___ftpack@arg+2,w
  3389  0787  0421               	iorwf	___ftpack@arg+1,w
  3390  0788  0420               	iorwf	___ftpack@arg,w
  3391  0789  1D03               	skipz
  3392  078A  2F9E               	goto	l1615
  3393  078B                     l1609:	
  3394  078B  3000               	movlw	0
  3395  078C  00A0               	movwf	?___ftpack
  3396  078D  3000               	movlw	0
  3397  078E  00A1               	movwf	?___ftpack+1
  3398  078F  3000               	movlw	0
  3399  0790  00A2               	movwf	?___ftpack+2
  3400  0791  0008               	return
  3401  0792                     l1613:	
  3402  0792  3001               	movlw	1
  3403  0793  00A5               	movwf	??___ftpack
  3404  0794  0825               	movf	??___ftpack,w
  3405  0795  07A3               	addwf	___ftpack@exp,f
  3406  0796  3001               	movlw	1
  3407  0797                     u1695:	
  3408  0797  1003               	clrc
  3409  0798  0CA2               	rrf	___ftpack@arg+2,f
  3410  0799  0CA1               	rrf	___ftpack@arg+1,f
  3411  079A  0CA0               	rrf	___ftpack@arg,f
  3412  079B  3EFF               	addlw	-1
  3413  079C  1D03               	skipz
  3414  079D  2F97               	goto	u1695
  3415  079E                     l1615:	
  3416  079E  30FE               	movlw	254
  3417  079F  0522               	andwf	___ftpack@arg+2,w
  3418  07A0  1903               	btfsc	3,2
  3419  07A1  2FB9               	goto	l578
  3420  07A2  2F92               	goto	l1613
  3421  07A3                     l1617:	
  3422  07A3  3001               	movlw	1
  3423  07A4  00A5               	movwf	??___ftpack
  3424  07A5  0825               	movf	??___ftpack,w
  3425  07A6  07A3               	addwf	___ftpack@exp,f
  3426  07A7  3001               	movlw	1
  3427  07A8  07A0               	addwf	___ftpack@arg,f
  3428  07A9  3000               	movlw	0
  3429  07AA  1803               	skipnc
  3430  07AB  3001               	movlw	1
  3431  07AC  07A1               	addwf	___ftpack@arg+1,f
  3432  07AD  3000               	movlw	0
  3433  07AE  1803               	skipnc
  3434  07AF  3001               	movlw	1
  3435  07B0  07A2               	addwf	___ftpack@arg+2,f
  3436  07B1  3001               	movlw	1
  3437  07B2                     u1715:	
  3438  07B2  1003               	clrc
  3439  07B3  0CA2               	rrf	___ftpack@arg+2,f
  3440  07B4  0CA1               	rrf	___ftpack@arg+1,f
  3441  07B5  0CA0               	rrf	___ftpack@arg,f
  3442  07B6  3EFF               	addlw	-1
  3443  07B7  1D03               	skipz
  3444  07B8  2FB2               	goto	u1715
  3445  07B9                     l578:	
  3446  07B9  30FF               	movlw	255
  3447  07BA  0522               	andwf	___ftpack@arg+2,w
  3448  07BB  1903               	btfsc	3,2
  3449  07BC  2FCC               	goto	l1625
  3450  07BD  2FA3               	goto	l1617
  3451  07BE                     l1627:	
  3452  07BE  3002               	movlw	2
  3453  07BF  0223               	subwf	___ftpack@exp,w
  3454  07C0  1C03               	btfss	3,0
  3455  07C1  2FCE               	goto	l585
  3456  07C2  3001               	movlw	1
  3457  07C3  02A3               	subwf	___ftpack@exp,f
  3458  07C4  3001               	movlw	1
  3459  07C5                     u1735:	
  3460  07C5  1003               	clrc
  3461  07C6  0DA0               	rlf	___ftpack@arg,f
  3462  07C7  0DA1               	rlf	___ftpack@arg+1,f
  3463  07C8  0DA2               	rlf	___ftpack@arg+2,f
  3464  07C9  3EFF               	addlw	-1
  3465  07CA  1D03               	skipz
  3466  07CB  2FC5               	goto	u1735
  3467  07CC                     l1625:	
  3468  07CC  1FA1               	btfss	___ftpack@arg+1,7
  3469  07CD  2FBE               	goto	l1627
  3470  07CE                     l585:	
  3471  07CE  1823               	btfsc	___ftpack@exp,0
  3472  07CF  2FD6               	goto	l586
  3473  07D0  30FF               	movlw	255
  3474  07D1  05A0               	andwf	___ftpack@arg,f
  3475  07D2  307F               	movlw	127
  3476  07D3  05A1               	andwf	___ftpack@arg+1,f
  3477  07D4  30FF               	movlw	255
  3478  07D5  05A2               	andwf	___ftpack@arg+2,f
  3479  07D6                     l586:	
  3480  07D6  1003               	clrc
  3481  07D7  0CA3               	rrf	___ftpack@exp,f
  3482  07D8  0823               	movf	___ftpack@exp,w
  3483  07D9  00A5               	movwf	??___ftpack
  3484  07DA  01A6               	clrf	??___ftpack+1
  3485  07DB  01A7               	clrf	??___ftpack+2
  3486  07DC  3010               	movlw	16
  3487  07DD                     u1775:	
  3488  07DD  1003               	clrc
  3489  07DE  0DA5               	rlf	??___ftpack,f
  3490  07DF  0DA6               	rlf	??___ftpack+1,f
  3491  07E0  0DA7               	rlf	??___ftpack+2,f
  3492  07E1  3EFF               	addlw	-1
  3493  07E2  1D03               	skipz
  3494  07E3  2FDD               	goto	u1775
  3495  07E4  0825               	movf	??___ftpack,w
  3496  07E5  04A0               	iorwf	___ftpack@arg,f
  3497  07E6  0826               	movf	??___ftpack+1,w
  3498  07E7  04A1               	iorwf	___ftpack@arg+1,f
  3499  07E8  0827               	movf	??___ftpack+2,w
  3500  07E9  04A2               	iorwf	___ftpack@arg+2,f
  3501  07EA  0824               	movf	___ftpack@sign,w
  3502  07EB  1903               	btfsc	3,2
  3503  07EC  0008               	return
  3504  07ED  17A2               	bsf	___ftpack@arg+2,7
  3505  07EE  0008               	return
  3506  07EF                     __end_of___ftpack:	
  3507                           
  3508                           	psect	text15
  3509  0E87                     __ptext15:	
  3510 ;; *************** function _buttListener *****************
  3511 ;; Defined at:
  3512 ;;		line 19 in file "buttListener.c"
  3513 ;; Parameters:    Size  Location     Type
  3514 ;;		None
  3515 ;; Auto vars:     Size  Location     Type
  3516 ;;		None
  3517 ;; Return value:  Size  Location     Type
  3518 ;;		None               void
  3519 ;; Registers used:
  3520 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3521 ;; Tracked objects:
  3522 ;;		On entry : 0/0
  3523 ;;		On exit  : 0/0
  3524 ;;		Unchanged: 0/0
  3525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3526 ;;      Params:         0       0       0       0       0
  3527 ;;      Locals:         0       0       0       0       0
  3528 ;;      Temps:          0       0       0       0       0
  3529 ;;      Totals:         0       0       0       0       0
  3530 ;;Total ram usage:        0 bytes
  3531 ;; Hardware stack levels used:    1
  3532 ;; Hardware stack levels required when called:    5
  3533 ;; This function calls:
  3534 ;;		_ccwMovStepMotor
  3535 ;;		_cwMovStepMotor
  3536 ;; This function is called by:
  3537 ;;		_main
  3538 ;; This function uses a non-reentrant model
  3539 ;;
  3540                           
  3541                           
  3542                           ;psect for function _buttListener
  3543  0E87                     _buttListener:	
  3544                           
  3545                           ;buttListener.c: 20: if(pb5Pressed){
  3546                           
  3547                           ;incstack = 0
  3548                           ; Regs used in _buttListener: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3549  0E87  1F7A               	btfss	_pb5Pressed/(0+8),_pb5Pressed& (0+7)	;volatile
  3550  0E88  2E8E               	goto	l2079
  3551                           
  3552                           ;buttListener.c: 21: pb5Pressed = 0;
  3553  0E89  137A               	bcf	_pb5Pressed/(0+8),_pb5Pressed& (0+7)	;volatile
  3554                           
  3555                           ;buttListener.c: 22: RB1 = !RB1;
  3556  0E8A  3002               	movlw	2
  3557  0E8B  1283               	bcf	3,5	;RP0=0, select bank0
  3558  0E8C  1303               	bcf	3,6	;RP1=0, select bank0
  3559  0E8D  0686               	xorwf	6,f
  3560  0E8E                     l2079:	
  3561                           
  3562                           ;buttListener.c: 23: }
  3563                           ;buttListener.c: 25: if(pb1Pressed){
  3564  0E8E  1C7A               	btfss	_pb1Pressed/(0+8),_pb1Pressed& (0+7)	;volatile
  3565  0E8F  2E9C               	goto	l2085
  3566                           
  3567                           ;buttListener.c: 26: pb1Pressed = 0;
  3568  0E90  107A               	bcf	_pb1Pressed/(0+8),_pb1Pressed& (0+7)	;volatile
  3569                           
  3570                           ;buttListener.c: 27: cwMovStepMotor (1);
  3571  0E91  3001               	movlw	1
  3572  0E92  1683               	bsf	3,5	;RP0=1, select bank1
  3573  0E93  1303               	bcf	3,6	;RP1=0, select bank1
  3574  0E94  00B6               	movwf	cwMovStepMotor@numberOfSteps^(0+128)
  3575  0E95  3000               	movlw	0
  3576  0E96  00B7               	movwf	(cwMovStepMotor@numberOfSteps^(0+128)+1)
  3577  0E97  120A  118A  26E6  120A  158A  	fcall	_cwMovStepMotor
  3578  0E9C                     l2085:	
  3579                           
  3580                           ;buttListener.c: 28: }
  3581                           ;buttListener.c: 30: if(pb2Pressed){
  3582  0E9C  1D7A               	btfss	_pb2Pressed/(0+8),_pb2Pressed& (0+7)	;volatile
  3583  0E9D  2EAA               	goto	l2091
  3584                           
  3585                           ;buttListener.c: 31: pb2Pressed = 0;
  3586  0E9E  117A               	bcf	_pb2Pressed/(0+8),_pb2Pressed& (0+7)	;volatile
  3587                           
  3588                           ;buttListener.c: 32: ccwMovStepMotor (1);
  3589  0E9F  3001               	movlw	1
  3590  0EA0  1683               	bsf	3,5	;RP0=1, select bank1
  3591  0EA1  1303               	bcf	3,6	;RP1=0, select bank1
  3592  0EA2  00B6               	movwf	ccwMovStepMotor@numberOfSteps^(0+128)
  3593  0EA3  3000               	movlw	0
  3594  0EA4  00B7               	movwf	(ccwMovStepMotor@numberOfSteps^(0+128)+1)
  3595  0EA5  120A  118A  2640  120A  158A  	fcall	_ccwMovStepMotor
  3596  0EAA                     l2091:	
  3597                           
  3598                           ;buttListener.c: 33: }
  3599                           ;buttListener.c: 34: if(pb3Pressed){
  3600  0EAA  1E7A               	btfss	_pb3Pressed/(0+8),_pb3Pressed& (0+7)	;volatile
  3601  0EAB  0008               	return
  3602                           
  3603                           ;buttListener.c: 35: pb3Pressed = 0;
  3604  0EAC  127A               	bcf	_pb3Pressed/(0+8),_pb3Pressed& (0+7)	;volatile
  3605                           
  3606                           ;buttListener.c: 36: j++;
  3607  0EAD  3001               	movlw	1
  3608  0EAE  1683               	bsf	3,5	;RP0=1, select bank1
  3609  0EAF  1303               	bcf	3,6	;RP1=0, select bank1
  3610  0EB0  07A2               	addwf	_j^(0+128),f
  3611  0EB1  1803               	skipnc
  3612  0EB2  0AA3               	incf	(_j+1)^(0+128),f
  3613  0EB3  3000               	movlw	0
  3614  0EB4  07A3               	addwf	(_j+1)^(0+128),f
  3615                           
  3616                           ;buttListener.c: 37: if(j% 2 == 0){
  3617  0EB5  1822               	btfsc	_j^(0+128),0
  3618  0EB6  2EC0               	goto	l2101
  3619                           
  3620                           ;buttListener.c: 38: ccwMovStepMotor(200);
  3621  0EB7  30C8               	movlw	200
  3622  0EB8  00B6               	movwf	ccwMovStepMotor@numberOfSteps^(0+128)
  3623  0EB9  3000               	movlw	0
  3624  0EBA  00B7               	movwf	(ccwMovStepMotor@numberOfSteps^(0+128)+1)
  3625  0EBB  120A  118A  2640  120A  158A  	fcall	_ccwMovStepMotor
  3626  0EC0                     l2101:	
  3627                           
  3628                           ;buttListener.c: 40: }
  3629                           ;buttListener.c: 41: if (j% 2 == 1) {
  3630  0EC0  1683               	bsf	3,5	;RP0=1, select bank1
  3631  0EC1  1303               	bcf	3,6	;RP1=0, select bank1
  3632  0EC2  1C22               	btfss	_j^(0+128),0
  3633  0EC3  0008               	return
  3634                           
  3635                           ;buttListener.c: 42: cwMovStepMotor(200);
  3636  0EC4  30C8               	movlw	200
  3637  0EC5  00B6               	movwf	cwMovStepMotor@numberOfSteps^(0+128)
  3638  0EC6  3000               	movlw	0
  3639  0EC7  00B7               	movwf	(cwMovStepMotor@numberOfSteps^(0+128)+1)
  3640  0EC8  120A  118A  26E6   	fcall	_cwMovStepMotor
  3641  0ECB  0008               	return
  3642  0ECC                     __end_of_buttListener:	
  3643                           
  3644                           	psect	text16
  3645  06E6                     __ptext16:	
  3646 ;; *************** function _cwMovStepMotor *****************
  3647 ;; Defined at:
  3648 ;;		line 57 in file "Stepper.c"
  3649 ;; Parameters:    Size  Location     Type
  3650 ;;  numberOfStep    2    4[BANK1 ] int 
  3651 ;; Auto vars:     Size  Location     Type
  3652 ;;  i               2    8[BANK1 ] volatile int 
  3653 ;; Return value:  Size  Location     Type
  3654 ;;		None               void
  3655 ;; Registers used:
  3656 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3657 ;; Tracked objects:
  3658 ;;		On entry : 0/0
  3659 ;;		On exit  : 0/0
  3660 ;;		Unchanged: 0/0
  3661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3662 ;;      Params:         0       0       2       0       0
  3663 ;;      Locals:         0       0       2       0       0
  3664 ;;      Temps:          0       0       2       0       0
  3665 ;;      Totals:         0       0       6       0       0
  3666 ;;Total ram usage:        6 bytes
  3667 ;; Hardware stack levels used:    1
  3668 ;; Hardware stack levels required when called:    4
  3669 ;; This function calls:
  3670 ;;		_lcdSetCursor
  3671 ;;		_lcdWrite4DigitBcd
  3672 ;; This function is called by:
  3673 ;;		_initStepMotor
  3674 ;;		_buttListener
  3675 ;; This function uses a non-reentrant model
  3676 ;;
  3677                           
  3678                           
  3679                           ;psect for function _cwMovStepMotor
  3680  06E6                     _cwMovStepMotor:	
  3681                           
  3682                           ;Stepper.c: 59: volatile int i = 0;
  3683                           
  3684                           ;incstack = 0
  3685                           ; Regs used in _cwMovStepMotor: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3686  06E6  1683               	bsf	3,5	;RP0=1, select bank1
  3687  06E7  1303               	bcf	3,6	;RP1=0, select bank1
  3688  06E8  01BA               	clrf	cwMovStepMotor@i^(0+128)	;volatile
  3689  06E9  01BB               	clrf	(cwMovStepMotor@i+1)^(0+128)	;volatile
  3690  06EA                     l1727:	
  3691                           ;Stepper.c: 62: while (i < numberOfSteps) {
  3692                           
  3693  06EA  1683               	bsf	3,5	;RP0=1, select bank1
  3694  06EB  1303               	bcf	3,6	;RP1=0, select bank1
  3695  06EC  083B               	movf	(cwMovStepMotor@i+1)^(0+128),w	;volatile
  3696  06ED  3A80               	xorlw	128
  3697  06EE  00B8               	movwf	??_cwMovStepMotor^(0+128)
  3698  06EF  0837               	movf	(cwMovStepMotor@numberOfSteps+1)^(0+128),w
  3699  06F0  3A80               	xorlw	128
  3700  06F1  0238               	subwf	??_cwMovStepMotor^(0+128),w
  3701  06F2  1D03               	skipz
  3702  06F3  2EF6               	goto	u1985
  3703  06F4  0836               	movf	cwMovStepMotor@numberOfSteps^(0+128),w
  3704  06F5  023A               	subwf	cwMovStepMotor@i^(0+128),w	;volatile
  3705  06F6                     u1985:	
  3706  06F6  1803               	btfsc	3,0
  3707  06F7  0008               	return
  3708                           
  3709                           ;Stepper.c: 64: if (stepState == 0) {
  3710  06F8  1683               	bsf	3,5	;RP0=1, select bank1
  3711  06F9  1303               	bcf	3,6	;RP1=0, select bank1
  3712  06FA  082A               	movf	_stepState^(0+128),w	;volatile
  3713  06FB  042B               	iorwf	(_stepState+1)^(0+128),w	;volatile
  3714  06FC  1D03               	btfss	3,2
  3715  06FD  2F00               	goto	l1689
  3716                           
  3717                           ;Stepper.c: 65: PORTC = 0b00111100;
  3718  06FE  303C               	movlw	60
  3719  06FF  2F3D               	goto	L16
  3720  0700                     l1689:	
  3721                           ;Stepper.c: 66: }
  3722                           
  3723                           
  3724                           ;Stepper.c: 67: else if (stepState == 1) {
  3725  0700  1683               	bsf	3,5	;RP0=1, select bank1
  3726  0701  1303               	bcf	3,6	;RP1=0, select bank1
  3727  0702  032A               	decf	_stepState^(0+128),w	;volatile
  3728  0703  042B               	iorwf	(_stepState+1)^(0+128),w	;volatile
  3729  0704  1D03               	btfss	3,2
  3730  0705  2F08               	goto	l1693
  3731                           
  3732                           ;Stepper.c: 68: PORTC = 0b00101110;
  3733  0706  302E               	movlw	46
  3734  0707  2F3D               	goto	L16
  3735  0708                     l1693:	
  3736                           ;Stepper.c: 69: }
  3737                           
  3738                           
  3739                           ;Stepper.c: 70: else if (stepState == 2) {
  3740  0708  3002               	movlw	2
  3741  0709  1683               	bsf	3,5	;RP0=1, select bank1
  3742  070A  1303               	bcf	3,6	;RP1=0, select bank1
  3743  070B  062A               	xorwf	_stepState^(0+128),w	;volatile
  3744  070C  042B               	iorwf	(_stepState+1)^(0+128),w	;volatile
  3745  070D  1D03               	btfss	3,2
  3746  070E  2F11               	goto	l1697
  3747                           
  3748                           ;Stepper.c: 71: PORTC = 0b00101011;
  3749  070F  302B               	movlw	43
  3750  0710  2F3D               	goto	L16
  3751  0711                     l1697:	
  3752                           ;Stepper.c: 72: }
  3753                           
  3754                           
  3755                           ;Stepper.c: 73: else if (stepState == 3) {
  3756  0711  3003               	movlw	3
  3757  0712  1683               	bsf	3,5	;RP0=1, select bank1
  3758  0713  1303               	bcf	3,6	;RP1=0, select bank1
  3759  0714  062A               	xorwf	_stepState^(0+128),w	;volatile
  3760  0715  042B               	iorwf	(_stepState+1)^(0+128),w	;volatile
  3761  0716  1D03               	btfss	3,2
  3762  0717  2F1A               	goto	l1701
  3763                           
  3764                           ;Stepper.c: 74: PORTC = 0b00100111;
  3765  0718  3027               	movlw	39
  3766  0719  2F3D               	goto	L16
  3767  071A                     l1701:	
  3768                           ;Stepper.c: 75: }
  3769                           
  3770                           
  3771                           ;Stepper.c: 76: else if (stepState == 4) {
  3772  071A  3004               	movlw	4
  3773  071B  1683               	bsf	3,5	;RP0=1, select bank1
  3774  071C  1303               	bcf	3,6	;RP1=0, select bank1
  3775  071D  062A               	xorwf	_stepState^(0+128),w	;volatile
  3776  071E  042B               	iorwf	(_stepState+1)^(0+128),w	;volatile
  3777  071F  1D03               	btfss	3,2
  3778  0720  2F23               	goto	l1705
  3779                           
  3780                           ;Stepper.c: 77: PORTC = 0b00110101;
  3781  0721  3035               	movlw	53
  3782  0722  2F3D               	goto	L16
  3783  0723                     l1705:	
  3784                           ;Stepper.c: 78: }
  3785                           
  3786                           
  3787                           ;Stepper.c: 79: else if (stepState == 5) {
  3788  0723  3005               	movlw	5
  3789  0724  1683               	bsf	3,5	;RP0=1, select bank1
  3790  0725  1303               	bcf	3,6	;RP1=0, select bank1
  3791  0726  062A               	xorwf	_stepState^(0+128),w	;volatile
  3792  0727  042B               	iorwf	(_stepState+1)^(0+128),w	;volatile
  3793  0728  1D03               	btfss	3,2
  3794  0729  2F2C               	goto	l1709
  3795                           
  3796                           ;Stepper.c: 80: PORTC = 0b00010111;
  3797  072A  3017               	movlw	23
  3798  072B  2F3D               	goto	L16
  3799  072C                     l1709:	
  3800                           ;Stepper.c: 81: }
  3801                           
  3802                           
  3803                           ;Stepper.c: 82: else if (stepState == 6) {
  3804  072C  3006               	movlw	6
  3805  072D  1683               	bsf	3,5	;RP0=1, select bank1
  3806  072E  1303               	bcf	3,6	;RP1=0, select bank1
  3807  072F  062A               	xorwf	_stepState^(0+128),w	;volatile
  3808  0730  042B               	iorwf	(_stepState+1)^(0+128),w	;volatile
  3809  0731  1D03               	btfss	3,2
  3810  0732  2F35               	goto	l1713
  3811                           
  3812                           ;Stepper.c: 83: PORTC = 0b00011011;
  3813  0733  301B               	movlw	27
  3814  0734  2F3D               	goto	L16
  3815  0735                     l1713:	
  3816                           ;Stepper.c: 84: }
  3817                           
  3818                           
  3819                           ;Stepper.c: 85: else if (stepState == 7) {
  3820  0735  3007               	movlw	7
  3821  0736  1683               	bsf	3,5	;RP0=1, select bank1
  3822  0737  1303               	bcf	3,6	;RP1=0, select bank1
  3823  0738  062A               	xorwf	_stepState^(0+128),w	;volatile
  3824  0739  042B               	iorwf	(_stepState+1)^(0+128),w	;volatile
  3825  073A  1D03               	btfss	3,2
  3826  073B  2F40               	goto	l135
  3827                           
  3828                           ;Stepper.c: 86: PORTC = 0b00011110;
  3829  073C  301E               	movlw	30
  3830  073D                     L16:	
  3831  073D  1283               	bcf	3,5	;RP0=0, select bank0
  3832  073E  1303               	bcf	3,6	;RP1=0, select bank0
  3833  073F  0087               	movwf	7	;volatile
  3834  0740                     l135:	
  3835                           
  3836                           ;Stepper.c: 87: }
  3837                           ;Stepper.c: 88: _delay((unsigned long)((2)*(20000000/4000.0)));
  3838  0740  300D               	movlw	13
  3839  0741  1683               	bsf	3,5	;RP0=1, select bank1
  3840  0742  1303               	bcf	3,6	;RP1=0, select bank1
  3841  0743  00B9               	movwf	(??_cwMovStepMotor^(0+128)+1)
  3842  0744  30FB               	movlw	251
  3843  0745  00B8               	movwf	??_cwMovStepMotor^(0+128)
  3844  0746                     u3037:	
  3845  0746  0BB8               	decfsz	??_cwMovStepMotor^(0+128),f
  3846  0747  2F46               	goto	u3037
  3847  0748  0BB9               	decfsz	(??_cwMovStepMotor^(0+128)+1),f
  3848  0749  2F46               	goto	u3037
  3849  074A  2F4B               	nop2
  3850                           
  3851                           ;Stepper.c: 90: i++;
  3852  074B  3001               	movlw	1
  3853  074C  1683               	bsf	3,5	;RP0=1, select bank1
  3854  074D  1303               	bcf	3,6	;RP1=0, select bank1
  3855  074E  07BA               	addwf	cwMovStepMotor@i^(0+128),f	;volatile
  3856  074F  1803               	skipnc
  3857  0750  0ABB               	incf	(cwMovStepMotor@i+1)^(0+128),f	;volatile
  3858  0751  3000               	movlw	0
  3859  0752  07BB               	addwf	(cwMovStepMotor@i+1)^(0+128),f	;volatile
  3860                           
  3861                           ;Stepper.c: 91: --stepState;
  3862  0753  30FF               	movlw	255
  3863  0754  07AA               	addwf	_stepState^(0+128),f	;volatile
  3864  0755  1803               	skipnc
  3865  0756  0AAB               	incf	(_stepState+1)^(0+128),f	;volatile
  3866  0757  30FF               	movlw	255
  3867  0758  07AB               	addwf	(_stepState+1)^(0+128),f	;volatile
  3868                           
  3869                           ;Stepper.c: 92: if (stepState < 0 ) {
  3870  0759  1FAB               	btfss	(_stepState+1)^(0+128),7	;volatile
  3871  075A  2F5F               	goto	l1721
  3872                           
  3873                           ;Stepper.c: 93: stepState = 7;
  3874  075B  3007               	movlw	7
  3875  075C  00AA               	movwf	_stepState^(0+128)	;volatile
  3876  075D  3000               	movlw	0
  3877  075E  00AB               	movwf	(_stepState^(0+128)+1)	;volatile
  3878  075F                     l1721:	
  3879                           
  3880                           ;Stepper.c: 94: }
  3881                           ;Stepper.c: 95: stepPos = stepPos-1;
  3882  075F  0828               	movf	_stepPos^(0+128),w
  3883  0760  3EFF               	addlw	255
  3884  0761  00A8               	movwf	_stepPos^(0+128)
  3885  0762  0829               	movf	(_stepPos+1)^(0+128),w
  3886  0763  1803               	skipnc
  3887  0764  3E01               	addlw	1
  3888  0765  3EFF               	addlw	255
  3889  0766  00A9               	movwf	(_stepPos+1)^(0+128)
  3890                           
  3891                           ;Stepper.c: 96: lcdSetCursor(40);
  3892  0767  3028               	movlw	40
  3893  0768  120A  118A  27EF  120A  118A  	fcall	_lcdSetCursor
  3894                           
  3895                           ;Stepper.c: 97: lcdWrite4DigitBcd(stepPos,1);
  3896  076D  1683               	bsf	3,5	;RP0=1, select bank1
  3897  076E  1303               	bcf	3,6	;RP1=0, select bank1
  3898  076F  0829               	movf	(_stepPos+1)^(0+128),w
  3899  0770  1283               	bcf	3,5	;RP0=0, select bank0
  3900  0771  1303               	bcf	3,6	;RP1=0, select bank0
  3901  0772  00EE               	movwf	lcdWrite4DigitBcd@decimal+1
  3902  0773  1683               	bsf	3,5	;RP0=1, select bank1
  3903  0774  1303               	bcf	3,6	;RP1=0, select bank1
  3904  0775  0828               	movf	_stepPos^(0+128),w
  3905  0776  1283               	bcf	3,5	;RP0=0, select bank0
  3906  0777  1303               	bcf	3,6	;RP1=0, select bank0
  3907  0778  00ED               	movwf	lcdWrite4DigitBcd@decimal
  3908  0779  01EF               	clrf	lcdWrite4DigitBcd@sign
  3909  077A  0AEF               	incf	lcdWrite4DigitBcd@sign,f
  3910  077B  120A  118A  220A  120A  118A  	fcall	_lcdWrite4DigitBcd
  3911  0780  2EEA               	goto	l1727
  3912  0781                     __end_of_cwMovStepMotor:	
  3913                           
  3914                           	psect	text17
  3915  0640                     __ptext17:	
  3916 ;; *************** function _ccwMovStepMotor *****************
  3917 ;; Defined at:
  3918 ;;		line 13 in file "Stepper.c"
  3919 ;; Parameters:    Size  Location     Type
  3920 ;;  numberOfStep    2    4[BANK1 ] int 
  3921 ;; Auto vars:     Size  Location     Type
  3922 ;;  i               2    8[BANK1 ] volatile int 
  3923 ;; Return value:  Size  Location     Type
  3924 ;;		None               void
  3925 ;; Registers used:
  3926 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3927 ;; Tracked objects:
  3928 ;;		On entry : 0/0
  3929 ;;		On exit  : 0/0
  3930 ;;		Unchanged: 0/0
  3931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3932 ;;      Params:         0       0       2       0       0
  3933 ;;      Locals:         0       0       2       0       0
  3934 ;;      Temps:          0       0       2       0       0
  3935 ;;      Totals:         0       0       6       0       0
  3936 ;;Total ram usage:        6 bytes
  3937 ;; Hardware stack levels used:    1
  3938 ;; Hardware stack levels required when called:    4
  3939 ;; This function calls:
  3940 ;;		_lcdSetCursor
  3941 ;;		_lcdWrite4DigitBcd
  3942 ;; This function is called by:
  3943 ;;		_initStepMotor
  3944 ;;		_buttListener
  3945 ;; This function uses a non-reentrant model
  3946 ;;
  3947                           
  3948                           
  3949                           ;psect for function _ccwMovStepMotor
  3950  0640                     _ccwMovStepMotor:	
  3951                           
  3952                           ;Stepper.c: 15: volatile int i = 0;
  3953                           
  3954                           ;incstack = 0
  3955                           ; Regs used in _ccwMovStepMotor: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3956  0640  1683               	bsf	3,5	;RP0=1, select bank1
  3957  0641  1303               	bcf	3,6	;RP1=0, select bank1
  3958  0642  01BA               	clrf	ccwMovStepMotor@i^(0+128)	;volatile
  3959  0643  01BB               	clrf	(ccwMovStepMotor@i+1)^(0+128)	;volatile
  3960  0644                     l1681:	
  3961                           ;Stepper.c: 18: while (i < numberOfSteps) {
  3962                           
  3963  0644  1683               	bsf	3,5	;RP0=1, select bank1
  3964  0645  1303               	bcf	3,6	;RP1=0, select bank1
  3965  0646  083B               	movf	(ccwMovStepMotor@i+1)^(0+128),w	;volatile
  3966  0647  3A80               	xorlw	128
  3967  0648  00B8               	movwf	??_ccwMovStepMotor^(0+128)
  3968  0649  0837               	movf	(ccwMovStepMotor@numberOfSteps+1)^(0+128),w
  3969  064A  3A80               	xorlw	128
  3970  064B  0238               	subwf	??_ccwMovStepMotor^(0+128),w
  3971  064C  1D03               	skipz
  3972  064D  2E50               	goto	u1885
  3973  064E  0836               	movf	ccwMovStepMotor@numberOfSteps^(0+128),w
  3974  064F  023A               	subwf	ccwMovStepMotor@i^(0+128),w	;volatile
  3975  0650                     u1885:	
  3976  0650  1803               	btfsc	3,0
  3977  0651  0008               	return
  3978                           
  3979                           ;Stepper.c: 20: if (stepState == 0) {
  3980  0652  1683               	bsf	3,5	;RP0=1, select bank1
  3981  0653  1303               	bcf	3,6	;RP1=0, select bank1
  3982  0654  082A               	movf	_stepState^(0+128),w	;volatile
  3983  0655  042B               	iorwf	(_stepState+1)^(0+128),w	;volatile
  3984  0656  1D03               	btfss	3,2
  3985  0657  2E5A               	goto	l1643
  3986                           
  3987                           ;Stepper.c: 21: PORTC = 0b00111100;
  3988  0658  303C               	movlw	60
  3989  0659  2E97               	goto	L23
  3990  065A                     l1643:	
  3991                           ;Stepper.c: 22: }
  3992                           
  3993                           
  3994                           ;Stepper.c: 23: else if (stepState == 1) {
  3995  065A  1683               	bsf	3,5	;RP0=1, select bank1
  3996  065B  1303               	bcf	3,6	;RP1=0, select bank1
  3997  065C  032A               	decf	_stepState^(0+128),w	;volatile
  3998  065D  042B               	iorwf	(_stepState+1)^(0+128),w	;volatile
  3999  065E  1D03               	btfss	3,2
  4000  065F  2E62               	goto	l1647
  4001                           
  4002                           ;Stepper.c: 24: PORTC = 0b00101110;
  4003  0660  302E               	movlw	46
  4004  0661  2E97               	goto	L23
  4005  0662                     l1647:	
  4006                           ;Stepper.c: 25: }
  4007                           
  4008                           
  4009                           ;Stepper.c: 26: else if (stepState == 2) {
  4010  0662  3002               	movlw	2
  4011  0663  1683               	bsf	3,5	;RP0=1, select bank1
  4012  0664  1303               	bcf	3,6	;RP1=0, select bank1
  4013  0665  062A               	xorwf	_stepState^(0+128),w	;volatile
  4014  0666  042B               	iorwf	(_stepState+1)^(0+128),w	;volatile
  4015  0667  1D03               	btfss	3,2
  4016  0668  2E6B               	goto	l1651
  4017                           
  4018                           ;Stepper.c: 27: PORTC = 0b00101011;
  4019  0669  302B               	movlw	43
  4020  066A  2E97               	goto	L23
  4021  066B                     l1651:	
  4022                           ;Stepper.c: 28: }
  4023                           
  4024                           
  4025                           ;Stepper.c: 29: else if (stepState == 3) {
  4026  066B  3003               	movlw	3
  4027  066C  1683               	bsf	3,5	;RP0=1, select bank1
  4028  066D  1303               	bcf	3,6	;RP1=0, select bank1
  4029  066E  062A               	xorwf	_stepState^(0+128),w	;volatile
  4030  066F  042B               	iorwf	(_stepState+1)^(0+128),w	;volatile
  4031  0670  1D03               	btfss	3,2
  4032  0671  2E74               	goto	l1655
  4033                           
  4034                           ;Stepper.c: 30: PORTC = 0b00100111;
  4035  0672  3027               	movlw	39
  4036  0673  2E97               	goto	L23
  4037  0674                     l1655:	
  4038                           ;Stepper.c: 31: }
  4039                           
  4040                           
  4041                           ;Stepper.c: 32: else if (stepState == 4) {
  4042  0674  3004               	movlw	4
  4043  0675  1683               	bsf	3,5	;RP0=1, select bank1
  4044  0676  1303               	bcf	3,6	;RP1=0, select bank1
  4045  0677  062A               	xorwf	_stepState^(0+128),w	;volatile
  4046  0678  042B               	iorwf	(_stepState+1)^(0+128),w	;volatile
  4047  0679  1D03               	btfss	3,2
  4048  067A  2E7D               	goto	l1659
  4049                           
  4050                           ;Stepper.c: 33: PORTC = 0b00110101;
  4051  067B  3035               	movlw	53
  4052  067C  2E97               	goto	L23
  4053  067D                     l1659:	
  4054                           ;Stepper.c: 34: }
  4055                           
  4056                           
  4057                           ;Stepper.c: 35: else if (stepState == 5) {
  4058  067D  3005               	movlw	5
  4059  067E  1683               	bsf	3,5	;RP0=1, select bank1
  4060  067F  1303               	bcf	3,6	;RP1=0, select bank1
  4061  0680  062A               	xorwf	_stepState^(0+128),w	;volatile
  4062  0681  042B               	iorwf	(_stepState+1)^(0+128),w	;volatile
  4063  0682  1D03               	btfss	3,2
  4064  0683  2E86               	goto	l1663
  4065                           
  4066                           ;Stepper.c: 36: PORTC = 0b00010111;
  4067  0684  3017               	movlw	23
  4068  0685  2E97               	goto	L23
  4069  0686                     l1663:	
  4070                           ;Stepper.c: 37: }
  4071                           
  4072                           
  4073                           ;Stepper.c: 38: else if (stepState == 6) {
  4074  0686  3006               	movlw	6
  4075  0687  1683               	bsf	3,5	;RP0=1, select bank1
  4076  0688  1303               	bcf	3,6	;RP1=0, select bank1
  4077  0689  062A               	xorwf	_stepState^(0+128),w	;volatile
  4078  068A  042B               	iorwf	(_stepState+1)^(0+128),w	;volatile
  4079  068B  1D03               	btfss	3,2
  4080  068C  2E8F               	goto	l1667
  4081                           
  4082                           ;Stepper.c: 39: PORTC = 0b00011011;
  4083  068D  301B               	movlw	27
  4084  068E  2E97               	goto	L23
  4085  068F                     l1667:	
  4086                           ;Stepper.c: 40: }
  4087                           
  4088                           
  4089                           ;Stepper.c: 41: else if (stepState == 7) {
  4090  068F  3007               	movlw	7
  4091  0690  1683               	bsf	3,5	;RP0=1, select bank1
  4092  0691  1303               	bcf	3,6	;RP1=0, select bank1
  4093  0692  062A               	xorwf	_stepState^(0+128),w	;volatile
  4094  0693  042B               	iorwf	(_stepState+1)^(0+128),w	;volatile
  4095  0694  1D03               	btfss	3,2
  4096  0695  2E9A               	goto	l113
  4097                           
  4098                           ;Stepper.c: 42: PORTC = 0b00011110;
  4099  0696  301E               	movlw	30
  4100  0697                     L23:	
  4101  0697  1283               	bcf	3,5	;RP0=0, select bank0
  4102  0698  1303               	bcf	3,6	;RP1=0, select bank0
  4103  0699  0087               	movwf	7	;volatile
  4104  069A                     l113:	
  4105                           
  4106                           ;Stepper.c: 43: }
  4107                           ;Stepper.c: 44: _delay((unsigned long)((2)*(20000000/4000.0)));
  4108  069A  300D               	movlw	13
  4109  069B  1683               	bsf	3,5	;RP0=1, select bank1
  4110  069C  1303               	bcf	3,6	;RP1=0, select bank1
  4111  069D  00B9               	movwf	(??_ccwMovStepMotor^(0+128)+1)
  4112  069E  30FB               	movlw	251
  4113  069F  00B8               	movwf	??_ccwMovStepMotor^(0+128)
  4114  06A0                     u3047:	
  4115  06A0  0BB8               	decfsz	??_ccwMovStepMotor^(0+128),f
  4116  06A1  2EA0               	goto	u3047
  4117  06A2  0BB9               	decfsz	(??_ccwMovStepMotor^(0+128)+1),f
  4118  06A3  2EA0               	goto	u3047
  4119  06A4  2EA5               	nop2
  4120                           
  4121                           ;Stepper.c: 46: i++;
  4122  06A5  3001               	movlw	1
  4123  06A6  1683               	bsf	3,5	;RP0=1, select bank1
  4124  06A7  1303               	bcf	3,6	;RP1=0, select bank1
  4125  06A8  07BA               	addwf	ccwMovStepMotor@i^(0+128),f	;volatile
  4126  06A9  1803               	skipnc
  4127  06AA  0ABB               	incf	(ccwMovStepMotor@i+1)^(0+128),f	;volatile
  4128  06AB  3000               	movlw	0
  4129  06AC  07BB               	addwf	(ccwMovStepMotor@i+1)^(0+128),f	;volatile
  4130                           
  4131                           ;Stepper.c: 47: stepState++;
  4132  06AD  3001               	movlw	1
  4133  06AE  07AA               	addwf	_stepState^(0+128),f	;volatile
  4134  06AF  1803               	skipnc
  4135  06B0  0AAB               	incf	(_stepState+1)^(0+128),f	;volatile
  4136  06B1  3000               	movlw	0
  4137  06B2  07AB               	addwf	(_stepState+1)^(0+128),f	;volatile
  4138                           
  4139                           ;Stepper.c: 48: if (stepState > 7) {
  4140  06B3  082B               	movf	(_stepState+1)^(0+128),w	;volatile
  4141  06B4  3A80               	xorlw	128
  4142  06B5  00FF               	movwf	127
  4143  06B6  3080               	movlw	128
  4144  06B7  027F               	subwf	127,w
  4145  06B8  1D03               	skipz
  4146  06B9  2EBC               	goto	u1875
  4147  06BA  3008               	movlw	8
  4148  06BB  022A               	subwf	_stepState^(0+128),w	;volatile
  4149  06BC                     u1875:	
  4150  06BC  1C03               	skipc
  4151  06BD  2EC2               	goto	l1675
  4152                           
  4153                           ;Stepper.c: 49: stepState = 0;
  4154  06BE  1683               	bsf	3,5	;RP0=1, select bank1
  4155  06BF  1303               	bcf	3,6	;RP1=0, select bank1
  4156  06C0  01AA               	clrf	_stepState^(0+128)	;volatile
  4157  06C1  01AB               	clrf	(_stepState+1)^(0+128)	;volatile
  4158  06C2                     l1675:	
  4159                           
  4160                           ;Stepper.c: 50: }
  4161                           ;Stepper.c: 51: stepPos = stepPos+1;
  4162  06C2  1683               	bsf	3,5	;RP0=1, select bank1
  4163  06C3  1303               	bcf	3,6	;RP1=0, select bank1
  4164  06C4  0828               	movf	_stepPos^(0+128),w
  4165  06C5  3E01               	addlw	1
  4166  06C6  00A8               	movwf	_stepPos^(0+128)
  4167  06C7  0829               	movf	(_stepPos+1)^(0+128),w
  4168  06C8  1803               	skipnc
  4169  06C9  3E01               	addlw	1
  4170  06CA  3E00               	addlw	0
  4171  06CB  00A9               	movwf	(_stepPos+1)^(0+128)
  4172                           
  4173                           ;Stepper.c: 52: lcdSetCursor(40);
  4174  06CC  3028               	movlw	40
  4175  06CD  120A  118A  27EF  120A  118A  	fcall	_lcdSetCursor
  4176                           
  4177                           ;Stepper.c: 53: lcdWrite4DigitBcd(stepPos,1);
  4178  06D2  1683               	bsf	3,5	;RP0=1, select bank1
  4179  06D3  1303               	bcf	3,6	;RP1=0, select bank1
  4180  06D4  0829               	movf	(_stepPos+1)^(0+128),w
  4181  06D5  1283               	bcf	3,5	;RP0=0, select bank0
  4182  06D6  1303               	bcf	3,6	;RP1=0, select bank0
  4183  06D7  00EE               	movwf	lcdWrite4DigitBcd@decimal+1
  4184  06D8  1683               	bsf	3,5	;RP0=1, select bank1
  4185  06D9  1303               	bcf	3,6	;RP1=0, select bank1
  4186  06DA  0828               	movf	_stepPos^(0+128),w
  4187  06DB  1283               	bcf	3,5	;RP0=0, select bank0
  4188  06DC  1303               	bcf	3,6	;RP1=0, select bank0
  4189  06DD  00ED               	movwf	lcdWrite4DigitBcd@decimal
  4190  06DE  01EF               	clrf	lcdWrite4DigitBcd@sign
  4191  06DF  0AEF               	incf	lcdWrite4DigitBcd@sign,f
  4192  06E0  120A  118A  220A  120A  118A  	fcall	_lcdWrite4DigitBcd
  4193  06E5  2E44               	goto	l1681
  4194  06E6                     __end_of_ccwMovStepMotor:	
  4195                           
  4196                           	psect	text18
  4197  020A                     __ptext18:	
  4198 ;; *************** function _lcdWrite4DigitBcd *****************
  4199 ;; Defined at:
  4200 ;;		line 44 in file "lcd.c"
  4201 ;; Parameters:    Size  Location     Type
  4202 ;;  decimal         2   77[BANK0 ] int 
  4203 ;;  sign            1   79[BANK0 ] unsigned char 
  4204 ;; Auto vars:     Size  Location     Type
  4205 ;;  newdecimal      2    2[BANK1 ] int 
  4206 ;; Return value:  Size  Location     Type
  4207 ;;		None               void
  4208 ;; Registers used:
  4209 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4210 ;; Tracked objects:
  4211 ;;		On entry : 0/0
  4212 ;;		On exit  : 0/0
  4213 ;;		Unchanged: 0/0
  4214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4215 ;;      Params:         0       3       0       0       0
  4216 ;;      Locals:         0       0       2       0       0
  4217 ;;      Temps:          0       0       2       0       0
  4218 ;;      Totals:         0       3       4       0       0
  4219 ;;Total ram usage:        7 bytes
  4220 ;; Hardware stack levels used:    1
  4221 ;; Hardware stack levels required when called:    3
  4222 ;; This function calls:
  4223 ;;		_lcd_WriteData
  4224 ;; This function is called by:
  4225 ;;		_ccwMovStepMotor
  4226 ;;		_cwMovStepMotor
  4227 ;;		_idle
  4228 ;; This function uses a non-reentrant model
  4229 ;;
  4230                           
  4231                           
  4232                           ;psect for function _lcdWrite4DigitBcd
  4233  020A                     _lcdWrite4DigitBcd:	
  4234                           
  4235                           ;lcd.c: 45: if (decimal==0){
  4236                           
  4237                           ;incstack = 0
  4238                           ; Regs used in _lcdWrite4DigitBcd: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4239  020A  1283               	bcf	3,5	;RP0=0, select bank0
  4240  020B  1303               	bcf	3,6	;RP1=0, select bank0
  4241  020C  086D               	movf	lcdWrite4DigitBcd@decimal,w
  4242  020D  046E               	iorwf	lcdWrite4DigitBcd@decimal+1,w
  4243  020E  1D03               	btfss	3,2
  4244  020F  2A1B               	goto	l1527
  4245                           
  4246                           ;lcd.c: 46: onesDigi=0;
  4247  0210  1683               	bsf	3,5	;RP0=1, select bank1
  4248  0211  1303               	bcf	3,6	;RP1=0, select bank1
  4249  0212  01A4               	clrf	_onesDigi^(0+128)
  4250  0213  01A5               	clrf	(_onesDigi+1)^(0+128)
  4251                           
  4252                           ;lcd.c: 47: tensDigi=0;
  4253  0214  01AC               	clrf	_tensDigi^(0+128)
  4254  0215  01AD               	clrf	(_tensDigi+1)^(0+128)
  4255                           
  4256                           ;lcd.c: 48: hundredthDigi=0;
  4257  0216  01A0               	clrf	_hundredthDigi^(0+128)
  4258  0217  01A1               	clrf	(_hundredthDigi+1)^(0+128)
  4259                           
  4260                           ;lcd.c: 49: thousandthDigi=0;
  4261  0218  01AE               	clrf	_thousandthDigi^(0+128)
  4262  0219  01AF               	clrf	(_thousandthDigi+1)^(0+128)
  4263                           
  4264                           ;lcd.c: 50: }
  4265  021A  2AF5               	goto	l1589
  4266  021B                     l1527:	
  4267                           
  4268                           ;lcd.c: 52: else if (decimal>-10000&& decimal<0){
  4269  021B  1283               	bcf	3,5	;RP0=0, select bank0
  4270  021C  086E               	movf	lcdWrite4DigitBcd@decimal+1,w
  4271  021D  3A80               	xorlw	128
  4272  021E  00FF               	movwf	127
  4273  021F  3058               	movlw	88
  4274  0220  027F               	subwf	127,w
  4275  0221  1D03               	skipz
  4276  0222  2A25               	goto	u1525
  4277  0223  30F1               	movlw	241
  4278  0224  026D               	subwf	lcdWrite4DigitBcd@decimal,w
  4279  0225                     u1525:	
  4280  0225  1C03               	skipc
  4281  0226  2A88               	goto	l1559
  4282  0227  1283               	bcf	3,5	;RP0=0, select bank0
  4283  0228  1303               	bcf	3,6	;RP1=0, select bank0
  4284  0229  1FEE               	btfss	lcdWrite4DigitBcd@decimal+1,7
  4285  022A  2A88               	goto	l1559
  4286                           
  4287                           ;lcd.c: 53: int newdecimal=decimal*-1;
  4288  022B  096D               	comf	lcdWrite4DigitBcd@decimal,w
  4289  022C  1683               	bsf	3,5	;RP0=1, select bank1
  4290  022D  1303               	bcf	3,6	;RP1=0, select bank1
  4291  022E  00B2               	movwf	??_lcdWrite4DigitBcd^(0+128)
  4292  022F  1283               	bcf	3,5	;RP0=0, select bank0
  4293  0230  1303               	bcf	3,6	;RP1=0, select bank0
  4294  0231  096E               	comf	lcdWrite4DigitBcd@decimal+1,w
  4295  0232  1683               	bsf	3,5	;RP0=1, select bank1
  4296  0233  1303               	bcf	3,6	;RP1=0, select bank1
  4297  0234  00B3               	movwf	(??_lcdWrite4DigitBcd^(0+128)+1)
  4298  0235  0AB2               	incf	??_lcdWrite4DigitBcd^(0+128),f
  4299  0236  1903               	skipnz
  4300  0237  0AB3               	incf	(??_lcdWrite4DigitBcd^(0+128)+1),f
  4301  0238  0832               	movf	??_lcdWrite4DigitBcd^(0+128),w
  4302  0239  00B4               	movwf	lcdWrite4DigitBcd@newdecimal^(0+128)
  4303  023A  0833               	movf	(??_lcdWrite4DigitBcd+1)^(0+128),w
  4304  023B  00B5               	movwf	(lcdWrite4DigitBcd@newdecimal+1)^(0+128)
  4305                           
  4306                           ;lcd.c: 54: onesDigi=newdecimal;
  4307  023C  0835               	movf	(lcdWrite4DigitBcd@newdecimal+1)^(0+128),w
  4308  023D  00A5               	movwf	(_onesDigi+1)^(0+128)
  4309  023E  0834               	movf	lcdWrite4DigitBcd@newdecimal^(0+128),w
  4310  023F  00A4               	movwf	_onesDigi^(0+128)
  4311                           
  4312                           ;lcd.c: 55: tensDigi=0;
  4313  0240  01AC               	clrf	_tensDigi^(0+128)
  4314  0241  01AD               	clrf	(_tensDigi+1)^(0+128)
  4315                           
  4316                           ;lcd.c: 56: hundredthDigi=0;
  4317  0242  01A0               	clrf	_hundredthDigi^(0+128)
  4318  0243  01A1               	clrf	(_hundredthDigi+1)^(0+128)
  4319                           
  4320                           ;lcd.c: 57: thousandthDigi=0;
  4321  0244  01AE               	clrf	_thousandthDigi^(0+128)
  4322  0245  01AF               	clrf	(_thousandthDigi+1)^(0+128)
  4323  0246                     l1545:	
  4324                           ;lcd.c: 58: while (onesDigi >= 10){
  4325                           
  4326  0246  3000               	movlw	0
  4327  0247  0225               	subwf	(_onesDigi+1)^(0+128),w
  4328  0248  300A               	movlw	10
  4329  0249  1903               	skipnz
  4330  024A  0224               	subwf	_onesDigi^(0+128),w
  4331  024B  1C03               	btfss	3,0
  4332  024C  2A6A               	goto	l1551
  4333                           
  4334                           ;lcd.c: 59: onesDigi = onesDigi - 10;
  4335  024D  0824               	movf	_onesDigi^(0+128),w
  4336  024E  3EF6               	addlw	246
  4337  024F  00A4               	movwf	_onesDigi^(0+128)
  4338  0250  0825               	movf	(_onesDigi+1)^(0+128),w
  4339  0251  1803               	skipnc
  4340  0252  3E01               	addlw	1
  4341  0253  3EFF               	addlw	255
  4342  0254  00A5               	movwf	(_onesDigi+1)^(0+128)
  4343                           
  4344                           ;lcd.c: 60: tensDigi++;
  4345  0255  3001               	movlw	1
  4346  0256  07AC               	addwf	_tensDigi^(0+128),f
  4347  0257  1803               	skipnc
  4348  0258  0AAD               	incf	(_tensDigi+1)^(0+128),f
  4349  0259  3000               	movlw	0
  4350  025A  07AD               	addwf	(_tensDigi+1)^(0+128),f
  4351  025B  2A46               	goto	l1545
  4352  025C                     l1547:	
  4353                           ;lcd.c: 61: }
  4354                           ;lcd.c: 63: while (tensDigi >= 10){
  4355                           
  4356                           
  4357                           ;lcd.c: 64: tensDigi = tensDigi - 10;
  4358  025C  082C               	movf	_tensDigi^(0+128),w
  4359  025D  3EF6               	addlw	246
  4360  025E  00AC               	movwf	_tensDigi^(0+128)
  4361  025F  082D               	movf	(_tensDigi+1)^(0+128),w
  4362  0260  1803               	skipnc
  4363  0261  3E01               	addlw	1
  4364  0262  3EFF               	addlw	255
  4365  0263  00AD               	movwf	(_tensDigi+1)^(0+128)
  4366                           
  4367                           ;lcd.c: 65: hundredthDigi++;
  4368  0264  3001               	movlw	1
  4369  0265  07A0               	addwf	_hundredthDigi^(0+128),f
  4370  0266  1803               	skipnc
  4371  0267  0AA1               	incf	(_hundredthDigi+1)^(0+128),f
  4372  0268  3000               	movlw	0
  4373  0269  07A1               	addwf	(_hundredthDigi+1)^(0+128),f
  4374  026A                     l1551:	
  4375  026A  3000               	movlw	0
  4376  026B  022D               	subwf	(_tensDigi+1)^(0+128),w
  4377  026C  300A               	movlw	10
  4378  026D  1903               	skipnz
  4379  026E  022C               	subwf	_tensDigi^(0+128),w
  4380  026F  1C03               	btfss	3,0
  4381  0270  2A80               	goto	l1557
  4382  0271  2A5C               	goto	l1547
  4383  0272                     l1553:	
  4384                           ;lcd.c: 66: }
  4385                           ;lcd.c: 68: while (hundredthDigi >= 10){
  4386                           
  4387                           
  4388                           ;lcd.c: 69: hundredthDigi = hundredthDigi - 10;
  4389  0272  0820               	movf	_hundredthDigi^(0+128),w
  4390  0273  3EF6               	addlw	246
  4391  0274  00A0               	movwf	_hundredthDigi^(0+128)
  4392  0275  0821               	movf	(_hundredthDigi+1)^(0+128),w
  4393  0276  1803               	skipnc
  4394  0277  3E01               	addlw	1
  4395  0278  3EFF               	addlw	255
  4396  0279  00A1               	movwf	(_hundredthDigi+1)^(0+128)
  4397                           
  4398                           ;lcd.c: 70: thousandthDigi++;
  4399  027A  3001               	movlw	1
  4400  027B  07AE               	addwf	_thousandthDigi^(0+128),f
  4401  027C  1803               	skipnc
  4402  027D  0AAF               	incf	(_thousandthDigi+1)^(0+128),f
  4403  027E  3000               	movlw	0
  4404  027F  07AF               	addwf	(_thousandthDigi+1)^(0+128),f
  4405  0280                     l1557:	
  4406  0280  3000               	movlw	0
  4407  0281  0221               	subwf	(_hundredthDigi+1)^(0+128),w
  4408  0282  300A               	movlw	10
  4409  0283  1903               	skipnz
  4410  0284  0220               	subwf	_hundredthDigi^(0+128),w
  4411  0285  1C03               	btfss	3,0
  4412  0286  2AF5               	goto	l1589
  4413  0287  2A72               	goto	l1553
  4414  0288                     l1559:	
  4415                           ;lcd.c: 71: }
  4416                           ;lcd.c: 72: }
  4417                           
  4418                           
  4419                           ;lcd.c: 74: else if (decimal>0 && decimal<10000){
  4420  0288  1283               	bcf	3,5	;RP0=0, select bank0
  4421  0289  1303               	bcf	3,6	;RP1=0, select bank0
  4422  028A  086E               	movf	lcdWrite4DigitBcd@decimal+1,w
  4423  028B  3A80               	xorlw	128
  4424  028C  00FF               	movwf	127
  4425  028D  3080               	movlw	128
  4426  028E  027F               	subwf	127,w
  4427  028F  1D03               	skipz
  4428  0290  2A93               	goto	u1575
  4429  0291  3001               	movlw	1
  4430  0292  026D               	subwf	lcdWrite4DigitBcd@decimal,w
  4431  0293                     u1575:	
  4432  0293  1C03               	skipc
  4433  0294  2AF5               	goto	l1589
  4434  0295  1283               	bcf	3,5	;RP0=0, select bank0
  4435  0296  1303               	bcf	3,6	;RP1=0, select bank0
  4436  0297  086E               	movf	lcdWrite4DigitBcd@decimal+1,w
  4437  0298  3A80               	xorlw	128
  4438  0299  00FF               	movwf	127
  4439  029A  30A7               	movlw	167
  4440  029B  027F               	subwf	127,w
  4441  029C  1D03               	skipz
  4442  029D  2AA0               	goto	u1585
  4443  029E  3010               	movlw	16
  4444  029F  026D               	subwf	lcdWrite4DigitBcd@decimal,w
  4445  02A0                     u1585:	
  4446  02A0  1803               	skipnc
  4447  02A1  2AF5               	goto	l1589
  4448                           
  4449                           ;lcd.c: 75: onesDigi=decimal;
  4450  02A2  1283               	bcf	3,5	;RP0=0, select bank0
  4451  02A3  1303               	bcf	3,6	;RP1=0, select bank0
  4452  02A4  086E               	movf	lcdWrite4DigitBcd@decimal+1,w
  4453  02A5  1683               	bsf	3,5	;RP0=1, select bank1
  4454  02A6  1303               	bcf	3,6	;RP1=0, select bank1
  4455  02A7  00A5               	movwf	(_onesDigi+1)^(0+128)
  4456  02A8  1283               	bcf	3,5	;RP0=0, select bank0
  4457  02A9  1303               	bcf	3,6	;RP1=0, select bank0
  4458  02AA  086D               	movf	lcdWrite4DigitBcd@decimal,w
  4459  02AB  1683               	bsf	3,5	;RP0=1, select bank1
  4460  02AC  1303               	bcf	3,6	;RP1=0, select bank1
  4461  02AD  00A4               	movwf	_onesDigi^(0+128)
  4462                           
  4463                           ;lcd.c: 76: tensDigi=0;
  4464  02AE  01AC               	clrf	_tensDigi^(0+128)
  4465  02AF  01AD               	clrf	(_tensDigi+1)^(0+128)
  4466                           
  4467                           ;lcd.c: 77: hundredthDigi=0;
  4468  02B0  01A0               	clrf	_hundredthDigi^(0+128)
  4469  02B1  01A1               	clrf	(_hundredthDigi+1)^(0+128)
  4470                           
  4471                           ;lcd.c: 78: thousandthDigi=0;
  4472  02B2  01AE               	clrf	_thousandthDigi^(0+128)
  4473  02B3  01AF               	clrf	(_thousandthDigi+1)^(0+128)
  4474  02B4                     l1575:	
  4475                           ;lcd.c: 79: while (onesDigi >= 10){
  4476                           
  4477  02B4  3000               	movlw	0
  4478  02B5  0225               	subwf	(_onesDigi+1)^(0+128),w
  4479  02B6  300A               	movlw	10
  4480  02B7  1903               	skipnz
  4481  02B8  0224               	subwf	_onesDigi^(0+128),w
  4482  02B9  1C03               	btfss	3,0
  4483  02BA  2AD8               	goto	l1581
  4484                           
  4485                           ;lcd.c: 80: onesDigi = onesDigi - 10;
  4486  02BB  0824               	movf	_onesDigi^(0+128),w
  4487  02BC  3EF6               	addlw	246
  4488  02BD  00A4               	movwf	_onesDigi^(0+128)
  4489  02BE  0825               	movf	(_onesDigi+1)^(0+128),w
  4490  02BF  1803               	skipnc
  4491  02C0  3E01               	addlw	1
  4492  02C1  3EFF               	addlw	255
  4493  02C2  00A5               	movwf	(_onesDigi+1)^(0+128)
  4494                           
  4495                           ;lcd.c: 81: tensDigi++;
  4496  02C3  3001               	movlw	1
  4497  02C4  07AC               	addwf	_tensDigi^(0+128),f
  4498  02C5  1803               	skipnc
  4499  02C6  0AAD               	incf	(_tensDigi+1)^(0+128),f
  4500  02C7  3000               	movlw	0
  4501  02C8  07AD               	addwf	(_tensDigi+1)^(0+128),f
  4502  02C9  2AB4               	goto	l1575
  4503  02CA                     l1577:	
  4504                           ;lcd.c: 82: }
  4505                           ;lcd.c: 84: while (tensDigi >= 10){
  4506                           
  4507                           
  4508                           ;lcd.c: 85: tensDigi = tensDigi - 10;
  4509  02CA  082C               	movf	_tensDigi^(0+128),w
  4510  02CB  3EF6               	addlw	246
  4511  02CC  00AC               	movwf	_tensDigi^(0+128)
  4512  02CD  082D               	movf	(_tensDigi+1)^(0+128),w
  4513  02CE  1803               	skipnc
  4514  02CF  3E01               	addlw	1
  4515  02D0  3EFF               	addlw	255
  4516  02D1  00AD               	movwf	(_tensDigi+1)^(0+128)
  4517                           
  4518                           ;lcd.c: 86: hundredthDigi++;
  4519  02D2  3001               	movlw	1
  4520  02D3  07A0               	addwf	_hundredthDigi^(0+128),f
  4521  02D4  1803               	skipnc
  4522  02D5  0AA1               	incf	(_hundredthDigi+1)^(0+128),f
  4523  02D6  3000               	movlw	0
  4524  02D7  07A1               	addwf	(_hundredthDigi+1)^(0+128),f
  4525  02D8                     l1581:	
  4526  02D8  3000               	movlw	0
  4527  02D9  022D               	subwf	(_tensDigi+1)^(0+128),w
  4528  02DA  300A               	movlw	10
  4529  02DB  1903               	skipnz
  4530  02DC  022C               	subwf	_tensDigi^(0+128),w
  4531  02DD  1C03               	btfss	3,0
  4532  02DE  2AEE               	goto	l1587
  4533  02DF  2ACA               	goto	l1577
  4534  02E0                     l1583:	
  4535                           ;lcd.c: 87: }
  4536                           ;lcd.c: 88: while (hundredthDigi >= 10){
  4537                           
  4538                           
  4539                           ;lcd.c: 89: hundredthDigi = hundredthDigi - 10;
  4540  02E0  0820               	movf	_hundredthDigi^(0+128),w
  4541  02E1  3EF6               	addlw	246
  4542  02E2  00A0               	movwf	_hundredthDigi^(0+128)
  4543  02E3  0821               	movf	(_hundredthDigi+1)^(0+128),w
  4544  02E4  1803               	skipnc
  4545  02E5  3E01               	addlw	1
  4546  02E6  3EFF               	addlw	255
  4547  02E7  00A1               	movwf	(_hundredthDigi+1)^(0+128)
  4548                           
  4549                           ;lcd.c: 90: thousandthDigi++;
  4550  02E8  3001               	movlw	1
  4551  02E9  07AE               	addwf	_thousandthDigi^(0+128),f
  4552  02EA  1803               	skipnc
  4553  02EB  0AAF               	incf	(_thousandthDigi+1)^(0+128),f
  4554  02EC  3000               	movlw	0
  4555  02ED  07AF               	addwf	(_thousandthDigi+1)^(0+128),f
  4556  02EE                     l1587:	
  4557  02EE  3000               	movlw	0
  4558  02EF  0221               	subwf	(_hundredthDigi+1)^(0+128),w
  4559  02F0  300A               	movlw	10
  4560  02F1  1903               	skipnz
  4561  02F2  0220               	subwf	_hundredthDigi^(0+128),w
  4562  02F3  1803               	skipnc
  4563  02F4  2AE0               	goto	l1583
  4564  02F5                     l1589:	
  4565                           
  4566                           ;lcd.c: 91: }
  4567                           ;lcd.c: 92: }
  4568                           ;lcd.c: 93: if(sign==1){
  4569  02F5  1283               	bcf	3,5	;RP0=0, select bank0
  4570  02F6  1303               	bcf	3,6	;RP1=0, select bank0
  4571  02F7  036F               	decf	lcdWrite4DigitBcd@sign,w
  4572  02F8  1D03               	btfss	3,2
  4573  02F9  2B84               	goto	l1601
  4574                           
  4575                           ;lcd.c: 94: if(decimal>0){
  4576  02FA  086E               	movf	lcdWrite4DigitBcd@decimal+1,w
  4577  02FB  3A80               	xorlw	128
  4578  02FC  00FF               	movwf	127
  4579  02FD  3080               	movlw	128
  4580  02FE  027F               	subwf	127,w
  4581  02FF  1D03               	skipz
  4582  0300  2B03               	goto	u1635
  4583  0301  3001               	movlw	1
  4584  0302  026D               	subwf	lcdWrite4DigitBcd@decimal,w
  4585  0303                     u1635:	
  4586  0303  1C03               	skipc
  4587  0304  2B2E               	goto	l262
  4588                           
  4589                           ;lcd.c: 95: lcd_WriteData(0x2b);
  4590  0305  302B               	movlw	43
  4591  0306  120A  158A  24DF  120A  118A  	fcall	_lcd_WriteData
  4592                           
  4593                           ;lcd.c: 96: lcd_WriteData(thousandthDigi+48);
  4594  030B  1683               	bsf	3,5	;RP0=1, select bank1
  4595  030C  1303               	bcf	3,6	;RP1=0, select bank1
  4596  030D  082E               	movf	_thousandthDigi^(0+128),w
  4597  030E  3E30               	addlw	48
  4598  030F  120A  158A  24DF  120A  118A  	fcall	_lcd_WriteData
  4599                           
  4600                           ;lcd.c: 97: lcd_WriteData(hundredthDigi+48);
  4601  0314  1683               	bsf	3,5	;RP0=1, select bank1
  4602  0315  1303               	bcf	3,6	;RP1=0, select bank1
  4603  0316  0820               	movf	_hundredthDigi^(0+128),w
  4604  0317  3E30               	addlw	48
  4605  0318  120A  158A  24DF  120A  118A  	fcall	_lcd_WriteData
  4606                           
  4607                           ;lcd.c: 98: lcd_WriteData(tensDigi+48);
  4608  031D  1683               	bsf	3,5	;RP0=1, select bank1
  4609  031E  1303               	bcf	3,6	;RP1=0, select bank1
  4610  031F  082C               	movf	_tensDigi^(0+128),w
  4611  0320  3E30               	addlw	48
  4612  0321  120A  158A  24DF  120A  118A  	fcall	_lcd_WriteData
  4613                           
  4614                           ;lcd.c: 99: lcd_WriteData(onesDigi+48);
  4615  0326  1683               	bsf	3,5	;RP0=1, select bank1
  4616  0327  1303               	bcf	3,6	;RP1=0, select bank1
  4617  0328  0824               	movf	_onesDigi^(0+128),w
  4618  0329  3E30               	addlw	48
  4619  032A  120A  158A  24DF   	fcall	_lcd_WriteData
  4620                           
  4621                           ;lcd.c: 100: }
  4622  032D  0008               	return
  4623  032E                     l262:	
  4624                           
  4625                           ;lcd.c: 101: else if(decimal<0){
  4626  032E  1283               	bcf	3,5	;RP0=0, select bank0
  4627  032F  1303               	bcf	3,6	;RP1=0, select bank0
  4628  0330  1FEE               	btfss	lcdWrite4DigitBcd@decimal+1,7
  4629  0331  2B5B               	goto	l1597
  4630                           
  4631                           ;lcd.c: 102: lcd_WriteData(0x2d);
  4632  0332  302D               	movlw	45
  4633  0333  120A  158A  24DF  120A  118A  	fcall	_lcd_WriteData
  4634                           
  4635                           ;lcd.c: 103: lcd_WriteData(thousandthDigi+48);
  4636  0338  1683               	bsf	3,5	;RP0=1, select bank1
  4637  0339  1303               	bcf	3,6	;RP1=0, select bank1
  4638  033A  082E               	movf	_thousandthDigi^(0+128),w
  4639  033B  3E30               	addlw	48
  4640  033C  120A  158A  24DF  120A  118A  	fcall	_lcd_WriteData
  4641                           
  4642                           ;lcd.c: 104: lcd_WriteData(hundredthDigi+48);
  4643  0341  1683               	bsf	3,5	;RP0=1, select bank1
  4644  0342  1303               	bcf	3,6	;RP1=0, select bank1
  4645  0343  0820               	movf	_hundredthDigi^(0+128),w
  4646  0344  3E30               	addlw	48
  4647  0345  120A  158A  24DF  120A  118A  	fcall	_lcd_WriteData
  4648                           
  4649                           ;lcd.c: 105: lcd_WriteData(tensDigi+48);
  4650  034A  1683               	bsf	3,5	;RP0=1, select bank1
  4651  034B  1303               	bcf	3,6	;RP1=0, select bank1
  4652  034C  082C               	movf	_tensDigi^(0+128),w
  4653  034D  3E30               	addlw	48
  4654  034E  120A  158A  24DF  120A  118A  	fcall	_lcd_WriteData
  4655                           
  4656                           ;lcd.c: 106: lcd_WriteData(onesDigi+48);
  4657  0353  1683               	bsf	3,5	;RP0=1, select bank1
  4658  0354  1303               	bcf	3,6	;RP1=0, select bank1
  4659  0355  0824               	movf	_onesDigi^(0+128),w
  4660  0356  3E30               	addlw	48
  4661  0357  120A  158A  24DF   	fcall	_lcd_WriteData
  4662                           
  4663                           ;lcd.c: 107: }
  4664  035A  0008               	return
  4665  035B                     l1597:	
  4666                           
  4667                           ;lcd.c: 109: else if(decimal==0){
  4668  035B  1283               	bcf	3,5	;RP0=0, select bank0
  4669  035C  1303               	bcf	3,6	;RP1=0, select bank0
  4670  035D  086D               	movf	lcdWrite4DigitBcd@decimal,w
  4671  035E  046E               	iorwf	lcdWrite4DigitBcd@decimal+1,w
  4672  035F  1D03               	btfss	3,2
  4673  0360  0008               	return
  4674                           
  4675                           ;lcd.c: 110: lcd_WriteData(thousandthDigi+48);
  4676  0361  1683               	bsf	3,5	;RP0=1, select bank1
  4677  0362  1303               	bcf	3,6	;RP1=0, select bank1
  4678  0363  082E               	movf	_thousandthDigi^(0+128),w
  4679  0364  3E30               	addlw	48
  4680  0365  120A  158A  24DF  120A  118A  	fcall	_lcd_WriteData
  4681                           
  4682                           ;lcd.c: 111: lcd_WriteData(hundredthDigi+48);
  4683  036A  1683               	bsf	3,5	;RP0=1, select bank1
  4684  036B  1303               	bcf	3,6	;RP1=0, select bank1
  4685  036C  0820               	movf	_hundredthDigi^(0+128),w
  4686  036D  3E30               	addlw	48
  4687  036E  120A  158A  24DF  120A  118A  	fcall	_lcd_WriteData
  4688                           
  4689                           ;lcd.c: 112: lcd_WriteData(tensDigi+48);
  4690  0373  1683               	bsf	3,5	;RP0=1, select bank1
  4691  0374  1303               	bcf	3,6	;RP1=0, select bank1
  4692  0375  082C               	movf	_tensDigi^(0+128),w
  4693  0376  3E30               	addlw	48
  4694  0377  120A  158A  24DF  120A  118A  	fcall	_lcd_WriteData
  4695                           
  4696                           ;lcd.c: 113: lcd_WriteData(onesDigi+48);
  4697  037C  1683               	bsf	3,5	;RP0=1, select bank1
  4698  037D  1303               	bcf	3,6	;RP1=0, select bank1
  4699  037E  0824               	movf	_onesDigi^(0+128),w
  4700  037F  3E30               	addlw	48
  4701  0380  120A  158A  24DF   	fcall	_lcd_WriteData
  4702                           
  4703                           ;lcd.c: 114: }
  4704                           ;lcd.c: 115: }
  4705  0383  0008               	return
  4706  0384                     l1601:	
  4707                           
  4708                           ;lcd.c: 117: else if(sign==0){
  4709  0384  1283               	bcf	3,5	;RP0=0, select bank0
  4710  0385  1303               	bcf	3,6	;RP1=0, select bank0
  4711  0386  086F               	movf	lcdWrite4DigitBcd@sign,w
  4712  0387  1D03               	btfss	3,2
  4713  0388  0008               	return
  4714                           
  4715                           ;lcd.c: 118: lcd_WriteData(thousandthDigi+48);
  4716  0389  1683               	bsf	3,5	;RP0=1, select bank1
  4717  038A  1303               	bcf	3,6	;RP1=0, select bank1
  4718  038B  082E               	movf	_thousandthDigi^(0+128),w
  4719  038C  3E30               	addlw	48
  4720  038D  120A  158A  24DF  120A  118A  	fcall	_lcd_WriteData
  4721                           
  4722                           ;lcd.c: 119: lcd_WriteData(hundredthDigi+48);
  4723  0392  1683               	bsf	3,5	;RP0=1, select bank1
  4724  0393  1303               	bcf	3,6	;RP1=0, select bank1
  4725  0394  0820               	movf	_hundredthDigi^(0+128),w
  4726  0395  3E30               	addlw	48
  4727  0396  120A  158A  24DF  120A  118A  	fcall	_lcd_WriteData
  4728                           
  4729                           ;lcd.c: 120: lcd_WriteData(tensDigi+48);
  4730  039B  1683               	bsf	3,5	;RP0=1, select bank1
  4731  039C  1303               	bcf	3,6	;RP1=0, select bank1
  4732  039D  082C               	movf	_tensDigi^(0+128),w
  4733  039E  3E30               	addlw	48
  4734  039F  120A  158A  24DF  120A  118A  	fcall	_lcd_WriteData
  4735                           
  4736                           ;lcd.c: 121: lcd_WriteData(onesDigi+48);
  4737  03A4  1683               	bsf	3,5	;RP0=1, select bank1
  4738  03A5  1303               	bcf	3,6	;RP1=0, select bank1
  4739  03A6  0824               	movf	_onesDigi^(0+128),w
  4740  03A7  3E30               	addlw	48
  4741  03A8  120A  158A  24DF   	fcall	_lcd_WriteData
  4742  03AB  0008               	return
  4743  03AC                     __end_of_lcdWrite4DigitBcd:	
  4744                           
  4745                           	psect	text19
  4746  0CDF                     __ptext19:	
  4747 ;; *************** function _lcd_WriteData *****************
  4748 ;; Defined at:
  4749 ;;		line 29 in file "lcd.c"
  4750 ;; Parameters:    Size  Location     Type
  4751 ;;  databyte        1    wreg     unsigned char 
  4752 ;; Auto vars:     Size  Location     Type
  4753 ;;  databyte        1    2[BANK0 ] unsigned char 
  4754 ;; Return value:  Size  Location     Type
  4755 ;;		None               void
  4756 ;; Registers used:
  4757 ;;		wreg
  4758 ;; Tracked objects:
  4759 ;;		On entry : 0/0
  4760 ;;		On exit  : 0/0
  4761 ;;		Unchanged: 0/0
  4762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4763 ;;      Params:         0       0       0       0       0
  4764 ;;      Locals:         0       1       0       0       0
  4765 ;;      Temps:          0       2       0       0       0
  4766 ;;      Totals:         0       3       0       0       0
  4767 ;;Total ram usage:        3 bytes
  4768 ;; Hardware stack levels used:    1
  4769 ;; Hardware stack levels required when called:    2
  4770 ;; This function calls:
  4771 ;;		Nothing
  4772 ;; This function is called by:
  4773 ;;		_lcdWrite4DigitBcd
  4774 ;;		_idle
  4775 ;; This function uses a non-reentrant model
  4776 ;;
  4777                           
  4778                           
  4779                           ;psect for function _lcd_WriteData
  4780  0CDF                     _lcd_WriteData:	
  4781                           
  4782                           ;incstack = 0
  4783                           ; Regs used in _lcd_WriteData: [wreg]
  4784                           ;lcd_WriteData@databyte stored from wreg
  4785  0CDF  1283               	bcf	3,5	;RP0=0, select bank0
  4786  0CE0  1303               	bcf	3,6	;RP1=0, select bank0
  4787  0CE1  00A2               	movwf	lcd_WriteData@databyte
  4788                           
  4789                           ;lcd.c: 30: RE2 = 0;
  4790  0CE2  1109               	bcf	9,2	;volatile
  4791                           
  4792                           ;lcd.c: 31: RE1 = 0;
  4793  0CE3  1089               	bcf	9,1	;volatile
  4794                           
  4795                           ;lcd.c: 32: RE0= 1;
  4796  0CE4  1409               	bsf	9,0	;volatile
  4797                           
  4798                           ;lcd.c: 33: PORTD=databyte;
  4799  0CE5  0822               	movf	lcd_WriteData@databyte,w
  4800  0CE6  0088               	movwf	8	;volatile
  4801                           
  4802                           ;lcd.c: 34: RE2 = 1;
  4803  0CE7  1509               	bsf	9,2	;volatile
  4804                           
  4805                           ;lcd.c: 35: RE2 = 0;
  4806  0CE8  1109               	bcf	9,2	;volatile
  4807                           
  4808                           ;lcd.c: 36: _delay((unsigned long)((1)*(20000000/4000.0)));
  4809  0CE9  3007               	movlw	7
  4810  0CEA  00A1               	movwf	??_lcd_WriteData+1
  4811  0CEB  307D               	movlw	125
  4812  0CEC  00A0               	movwf	??_lcd_WriteData
  4813  0CED                     u3057:	
  4814  0CED  0BA0               	decfsz	??_lcd_WriteData,f
  4815  0CEE  2CED               	goto	u3057
  4816  0CEF  0BA1               	decfsz	??_lcd_WriteData+1,f
  4817  0CF0  2CED               	goto	u3057
  4818  0CF1  0008               	return
  4819  0CF2                     __end_of_lcd_WriteData:	
  4820                           
  4821                           	psect	text20
  4822  07EF                     __ptext20:	
  4823 ;; *************** function _lcdSetCursor *****************
  4824 ;; Defined at:
  4825 ;;		line 39 in file "lcd.c"
  4826 ;; Parameters:    Size  Location     Type
  4827 ;;  address         1    wreg     unsigned char 
  4828 ;; Auto vars:     Size  Location     Type
  4829 ;;  address         1    3[BANK0 ] unsigned char 
  4830 ;; Return value:  Size  Location     Type
  4831 ;;		None               void
  4832 ;; Registers used:
  4833 ;;		wreg, status,2, status,0, pclath, cstack
  4834 ;; Tracked objects:
  4835 ;;		On entry : 0/0
  4836 ;;		On exit  : 0/0
  4837 ;;		Unchanged: 0/0
  4838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4839 ;;      Params:         0       0       0       0       0
  4840 ;;      Locals:         0       1       0       0       0
  4841 ;;      Temps:          0       0       0       0       0
  4842 ;;      Totals:         0       1       0       0       0
  4843 ;;Total ram usage:        1 bytes
  4844 ;; Hardware stack levels used:    1
  4845 ;; Hardware stack levels required when called:    3
  4846 ;; This function calls:
  4847 ;;		_lcdWriteControl
  4848 ;; This function is called by:
  4849 ;;		_ccwMovStepMotor
  4850 ;;		_cwMovStepMotor
  4851 ;;		_idle
  4852 ;; This function uses a non-reentrant model
  4853 ;;
  4854                           
  4855                           
  4856                           ;psect for function _lcdSetCursor
  4857  07EF                     _lcdSetCursor:	
  4858                           
  4859                           ;incstack = 0
  4860                           ; Regs used in _lcdSetCursor: [wreg+status,2+status,0+pclath+cstack]
  4861                           ;lcdSetCursor@address stored from wreg
  4862  07EF  1283               	bcf	3,5	;RP0=0, select bank0
  4863  07F0  1303               	bcf	3,6	;RP1=0, select bank0
  4864  07F1  00A3               	movwf	lcdSetCursor@address
  4865                           
  4866                           ;lcd.c: 40: address |= 0x80;
  4867  07F2  17A3               	bsf	lcdSetCursor@address,7
  4868                           
  4869                           ;lcd.c: 41: lcdWriteControl(address);
  4870  07F3  0823               	movf	lcdSetCursor@address,w
  4871  07F4  120A  158A  251A   	fcall	_lcdWriteControl
  4872  07F7  0008               	return
  4873  07F8                     __end_of_lcdSetCursor:	
  4874                           
  4875                           	psect	text21
  4876  0D1A                     __ptext21:	
  4877 ;; *************** function _lcdWriteControl *****************
  4878 ;; Defined at:
  4879 ;;		line 18 in file "lcd.c"
  4880 ;; Parameters:    Size  Location     Type
  4881 ;;  databyte        1    wreg     unsigned char 
  4882 ;; Auto vars:     Size  Location     Type
  4883 ;;  databyte        1    2[BANK0 ] unsigned char 
  4884 ;; Return value:  Size  Location     Type
  4885 ;;		None               void
  4886 ;; Registers used:
  4887 ;;		wreg
  4888 ;; Tracked objects:
  4889 ;;		On entry : 0/0
  4890 ;;		On exit  : 0/0
  4891 ;;		Unchanged: 0/0
  4892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4893 ;;      Params:         0       0       0       0       0
  4894 ;;      Locals:         0       1       0       0       0
  4895 ;;      Temps:          0       2       0       0       0
  4896 ;;      Totals:         0       3       0       0       0
  4897 ;;Total ram usage:        3 bytes
  4898 ;; Hardware stack levels used:    1
  4899 ;; Hardware stack levels required when called:    2
  4900 ;; This function calls:
  4901 ;;		Nothing
  4902 ;; This function is called by:
  4903 ;;		_lcdSetCursor
  4904 ;;		_setupLCD
  4905 ;; This function uses a non-reentrant model
  4906 ;;
  4907                           
  4908                           
  4909                           ;psect for function _lcdWriteControl
  4910  0D1A                     _lcdWriteControl:	
  4911                           
  4912                           ;incstack = 0
  4913                           ; Regs used in _lcdWriteControl: [wreg]
  4914                           ;lcdWriteControl@databyte stored from wreg
  4915  0D1A  1283               	bcf	3,5	;RP0=0, select bank0
  4916  0D1B  1303               	bcf	3,6	;RP1=0, select bank0
  4917  0D1C  00A2               	movwf	lcdWriteControl@databyte
  4918                           
  4919                           ;lcd.c: 19: RE2 = 0;
  4920  0D1D  1109               	bcf	9,2	;volatile
  4921                           
  4922                           ;lcd.c: 20: RE1 = 0;
  4923  0D1E  1089               	bcf	9,1	;volatile
  4924                           
  4925                           ;lcd.c: 21: RE0= 0;
  4926  0D1F  1009               	bcf	9,0	;volatile
  4927                           
  4928                           ;lcd.c: 22: PORTD=databyte;
  4929  0D20  0822               	movf	lcdWriteControl@databyte,w
  4930  0D21  0088               	movwf	8	;volatile
  4931                           
  4932                           ;lcd.c: 23: RE2 = 1;
  4933  0D22  1509               	bsf	9,2	;volatile
  4934                           
  4935                           ;lcd.c: 24: RE2 = 0;
  4936  0D23  1109               	bcf	9,2	;volatile
  4937                           
  4938                           ;lcd.c: 25: _delay((unsigned long)((2)*(20000000/4000.0)));
  4939  0D24  300D               	movlw	13
  4940  0D25  00A1               	movwf	??_lcdWriteControl+1
  4941  0D26  30FB               	movlw	251
  4942  0D27  00A0               	movwf	??_lcdWriteControl
  4943  0D28                     u3067:	
  4944  0D28  0BA0               	decfsz	??_lcdWriteControl,f
  4945  0D29  2D28               	goto	u3067
  4946  0D2A  0BA1               	decfsz	??_lcdWriteControl+1,f
  4947  0D2B  2D28               	goto	u3067
  4948  0D2C  2D2D               	nop2
  4949  0D2D  0008               	return
  4950  0D2E                     __end_of_lcdWriteControl:	
  4951                           
  4952                           	psect	text22
  4953  0ECC                     __ptext22:	
  4954 ;; *************** function _isr *****************
  4955 ;; Defined at:
  4956 ;;		line 9 in file "interrupt.c"
  4957 ;; Parameters:    Size  Location     Type
  4958 ;;		None
  4959 ;; Auto vars:     Size  Location     Type
  4960 ;;		None
  4961 ;; Return value:  Size  Location     Type
  4962 ;;		None               void
  4963 ;; Registers used:
  4964 ;;		wreg, status,2, status,0, pclath, cstack
  4965 ;; Tracked objects:
  4966 ;;		On entry : 0/0
  4967 ;;		On exit  : 0/0
  4968 ;;		Unchanged: 0/0
  4969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4970 ;;      Params:         0       0       0       0       0
  4971 ;;      Locals:         0       0       0       0       0
  4972 ;;      Temps:          4       0       0       0       0
  4973 ;;      Totals:         4       0       0       0       0
  4974 ;;Total ram usage:        4 bytes
  4975 ;; Hardware stack levels used:    1
  4976 ;; Hardware stack levels required when called:    1
  4977 ;; This function calls:
  4978 ;;		___lwmod
  4979 ;;		_pressbutton1
  4980 ;;		_pressbutton2
  4981 ;;		_pressbutton3
  4982 ;;		_pressbutton5
  4983 ;; This function is called by:
  4984 ;;		Interrupt level 1
  4985 ;; This function uses a non-reentrant model
  4986 ;;
  4987                           
  4988                           
  4989                           ;psect for function _isr
  4990  0ECC                     _isr:	
  4991                           
  4992                           ;interrupt.c: 11: if(TMR0IF){
  4993  0ECC  1D0B               	btfss	11,2	;volatile
  4994  0ECD  2F07               	goto	i1l93
  4995                           
  4996                           ;interrupt.c: 12: TMR0IF = 0;
  4997  0ECE  110B               	bcf	11,2	;volatile
  4998                           
  4999                           ;interrupt.c: 13: TMR0 = 100;
  5000  0ECF  3064               	movlw	100
  5001  0ED0  0081               	movwf	1	;volatile
  5002                           
  5003                           ;interrupt.c: 15: rtcCounter++;
  5004  0ED1  3001               	movlw	1
  5005  0ED2  1683               	bsf	3,5	;RP0=1, select bank1
  5006  0ED3  1303               	bcf	3,6	;RP1=0, select bank1
  5007  0ED4  07A6               	addwf	_rtcCounter^(0+128),f	;volatile
  5008  0ED5  1803               	skipnc
  5009  0ED6  0AA7               	incf	(_rtcCounter+1)^(0+128),f	;volatile
  5010  0ED7  3000               	movlw	0
  5011  0ED8  07A7               	addwf	(_rtcCounter+1)^(0+128),f	;volatile
  5012                           
  5013                           ;interrupt.c: 17: if(rtcCounter % 500 == 0){
  5014  0ED9  30F4               	movlw	244
  5015  0EDA  00F0               	movwf	___lwmod@divisor
  5016  0EDB  3001               	movlw	1
  5017  0EDC  00F1               	movwf	___lwmod@divisor+1
  5018  0EDD  0827               	movf	(_rtcCounter+1)^(0+128),w	;volatile
  5019  0EDE  00F3               	movwf	___lwmod@dividend+1
  5020  0EDF  0826               	movf	_rtcCounter^(0+128),w	;volatile
  5021  0EE0  00F2               	movwf	___lwmod@dividend
  5022  0EE1  120A  158A  261B  120A  158A  	fcall	___lwmod
  5023  0EE6  0870               	movf	?___lwmod,w
  5024  0EE7  0471               	iorwf	?___lwmod+1,w
  5025  0EE8  1D03               	btfss	3,2
  5026  0EE9  2EF3               	goto	i1l2205
  5027                           
  5028                           ;interrupt.c: 18: rtcCounter = 0;
  5029  0EEA  1683               	bsf	3,5	;RP0=1, select bank1
  5030  0EEB  1303               	bcf	3,6	;RP1=0, select bank1
  5031  0EEC  01A6               	clrf	_rtcCounter^(0+128)	;volatile
  5032  0EED  01A7               	clrf	(_rtcCounter+1)^(0+128)	;volatile
  5033                           
  5034                           ;interrupt.c: 19: rtcFlag500MS = 1;
  5035  0EEE  147B               	bsf	_rtcFlag500MS/(0+8),_rtcFlag500MS& (0+7)	;volatile
  5036                           
  5037                           ;interrupt.c: 20: RB0 =!RB0;
  5038  0EEF  3001               	movlw	1
  5039  0EF0  1283               	bcf	3,5	;RP0=0, select bank0
  5040  0EF1  1303               	bcf	3,6	;RP1=0, select bank0
  5041  0EF2  0686               	xorwf	6,f
  5042  0EF3                     i1l2205:	
  5043                           
  5044                           ;interrupt.c: 21: }
  5045                           ;interrupt.c: 22: pressbutton1();
  5046  0EF3  120A  158A  24F2  120A  158A  	fcall	_pressbutton1
  5047                           
  5048                           ;interrupt.c: 23: pressbutton2();
  5049  0EF8  120A  158A  2506  120A  158A  	fcall	_pressbutton2
  5050                           
  5051                           ;interrupt.c: 24: pressbutton3();
  5052  0EFD  120A  158A  2559  120A  158A  	fcall	_pressbutton3
  5053                           
  5054                           ;interrupt.c: 25: pressbutton5();
  5055  0F02  120A  158A  2571  120A  158A  	fcall	_pressbutton5
  5056  0F07                     i1l93:	
  5057  0F07  0879               	movf	??_isr+3,w
  5058  0F08  1283               	bcf	3,5	;RP0=0, select bank0
  5059  0F09  1303               	bcf	3,6	;RP1=0, select bank0
  5060  0F0A  00FF               	movwf	127
  5061  0F0B  0878               	movf	??_isr+2,w
  5062  0F0C  008A               	movwf	10
  5063  0F0D  0877               	movf	??_isr+1,w
  5064  0F0E  0084               	movwf	4
  5065  0F0F  0E76               	swapf	??_isr^(0+-128),w
  5066  0F10  0083               	movwf	3
  5067  0F11  0EFE               	swapf	126,f
  5068  0F12  0E7E               	swapf	126,w
  5069  0F13  0009               	retfie
  5070  0F14                     __end_of_isr:	
  5071                           
  5072                           	psect	intentry
  5073  0004                     __pintentry:	
  5074                           ;incstack = 0
  5075                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  5076                           
  5077  0004                     interrupt_function:	
  5078  007E                     saved_w	set	btemp
  5079  0004  00FE               	movwf	btemp
  5080  0005  0E03               	swapf	3,w
  5081  0006  00F6               	movwf	??_isr
  5082  0007  0804               	movf	4,w
  5083  0008  00F7               	movwf	??_isr+1
  5084  0009  080A               	movf	10,w
  5085  000A  00F8               	movwf	??_isr+2
  5086  000B  1283               	bcf	3,5	;RP0=0, select bank0
  5087  000C  1303               	bcf	3,6	;RP1=0, select bank0
  5088  000D  087F               	movf	btemp+1,w
  5089  000E  00F9               	movwf	??_isr+3
  5090  000F  120A  158A  2ECC   	ljmp	_isr
  5091                           
  5092                           	psect	text23
  5093  0D71                     __ptext23:	
  5094 ;; *************** function _pressbutton5 *****************
  5095 ;; Defined at:
  5096 ;;		line 57 in file "debounce.c"
  5097 ;; Parameters:    Size  Location     Type
  5098 ;;		None
  5099 ;; Auto vars:     Size  Location     Type
  5100 ;;		None
  5101 ;; Return value:  Size  Location     Type
  5102 ;;		None               void
  5103 ;; Registers used:
  5104 ;;		wreg, status,2, status,0
  5105 ;; Tracked objects:
  5106 ;;		On entry : 0/0
  5107 ;;		On exit  : 0/0
  5108 ;;		Unchanged: 0/0
  5109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5110 ;;      Params:         0       0       0       0       0
  5111 ;;      Locals:         0       0       0       0       0
  5112 ;;      Temps:          1       0       0       0       0
  5113 ;;      Totals:         1       0       0       0       0
  5114 ;;Total ram usage:        1 bytes
  5115 ;; Hardware stack levels used:    1
  5116 ;; This function calls:
  5117 ;;		Nothing
  5118 ;; This function is called by:
  5119 ;;		_isr
  5120 ;; This function uses a non-reentrant model
  5121 ;;
  5122                           
  5123                           
  5124                           ;psect for function _pressbutton5
  5125  0D71                     _pressbutton5:	
  5126                           
  5127                           ;debounce.c: 58: if(!RB6){
  5128                           
  5129                           ;incstack = 0
  5130                           ; Regs used in _pressbutton5: [wreg+status,2+status,0]
  5131  0D71  1283               	bcf	3,5	;RP0=0, select bank0
  5132  0D72  1303               	bcf	3,6	;RP1=0, select bank0
  5133  0D73  1B06               	btfsc	6,6	;volatile
  5134  0D74  2D84               	goto	i1l2157
  5135                           
  5136                           ;debounce.c: 59: pb5DebounceCount++;
  5137  0D75  3001               	movlw	1
  5138  0D76  00F0               	movwf	??_pressbutton5
  5139  0D77  0870               	movf	??_pressbutton5,w
  5140  0D78  1683               	bsf	3,5	;RP0=1, select bank1
  5141  0D79  1303               	bcf	3,6	;RP1=0, select bank1
  5142  0D7A  07B1               	addwf	_pb5DebounceCount^(0+128),f	;volatile
  5143                           
  5144                           ;debounce.c: 60: if(pb5DebounceCount > 10 && pb5Released){
  5145  0D7B  300B               	movlw	11
  5146  0D7C  0231               	subwf	_pb5DebounceCount^(0+128),w	;volatile
  5147  0D7D  1C03               	skipc
  5148  0D7E  0008               	return
  5149  0D7F  1FFA               	btfss	_pb5Released/(0+8),_pb5Released& (0+7)	;volatile
  5150  0D80  0008               	return
  5151                           
  5152                           ;debounce.c: 61: pb5Pressed = 1;
  5153  0D81  177A               	bsf	_pb5Pressed/(0+8),_pb5Pressed& (0+7)	;volatile
  5154                           
  5155                           ;debounce.c: 62: pb5Released = 0;
  5156  0D82  13FA               	bcf	_pb5Released/(0+8),_pb5Released& (0+7)	;volatile
  5157                           
  5158                           ;debounce.c: 63: }
  5159                           ;debounce.c: 64: } else {
  5160  0D83  0008               	return
  5161  0D84                     i1l2157:	
  5162                           
  5163                           ;debounce.c: 65: pb5DebounceCount = 0;
  5164  0D84  1683               	bsf	3,5	;RP0=1, select bank1
  5165  0D85  1303               	bcf	3,6	;RP1=0, select bank1
  5166  0D86  01B1               	clrf	_pb5DebounceCount^(0+128)	;volatile
  5167                           
  5168                           ;debounce.c: 66: pb5Released = 1;
  5169  0D87  17FA               	bsf	_pb5Released/(0+8),_pb5Released& (0+7)	;volatile
  5170  0D88  0008               	return
  5171  0D89                     __end_of_pressbutton5:	
  5172                           
  5173                           	psect	text24
  5174  0D59                     __ptext24:	
  5175 ;; *************** function _pressbutton3 *****************
  5176 ;; Defined at:
  5177 ;;		line 44 in file "debounce.c"
  5178 ;; Parameters:    Size  Location     Type
  5179 ;;		None
  5180 ;; Auto vars:     Size  Location     Type
  5181 ;;		None
  5182 ;; Return value:  Size  Location     Type
  5183 ;;		None               void
  5184 ;; Registers used:
  5185 ;;		wreg, status,2, status,0
  5186 ;; Tracked objects:
  5187 ;;		On entry : 0/0
  5188 ;;		On exit  : 0/0
  5189 ;;		Unchanged: 0/0
  5190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5191 ;;      Params:         0       0       0       0       0
  5192 ;;      Locals:         0       0       0       0       0
  5193 ;;      Temps:          1       0       0       0       0
  5194 ;;      Totals:         1       0       0       0       0
  5195 ;;Total ram usage:        1 bytes
  5196 ;; Hardware stack levels used:    1
  5197 ;; This function calls:
  5198 ;;		Nothing
  5199 ;; This function is called by:
  5200 ;;		_isr
  5201 ;; This function uses a non-reentrant model
  5202 ;;
  5203                           
  5204                           
  5205                           ;psect for function _pressbutton3
  5206  0D59                     _pressbutton3:	
  5207                           
  5208                           ;debounce.c: 45: if(!RB4){
  5209                           
  5210                           ;incstack = 0
  5211                           ; Regs used in _pressbutton3: [wreg+status,2+status,0]
  5212  0D59  1283               	bcf	3,5	;RP0=0, select bank0
  5213  0D5A  1303               	bcf	3,6	;RP1=0, select bank0
  5214  0D5B  1A06               	btfsc	6,4	;volatile
  5215  0D5C  2D6C               	goto	i1l2143
  5216                           
  5217                           ;debounce.c: 46: pb3DebounceCount++;
  5218  0D5D  3001               	movlw	1
  5219  0D5E  00F0               	movwf	??_pressbutton3
  5220  0D5F  0870               	movf	??_pressbutton3,w
  5221  0D60  1683               	bsf	3,5	;RP0=1, select bank1
  5222  0D61  1303               	bcf	3,6	;RP1=0, select bank1
  5223  0D62  07B0               	addwf	_pb3DebounceCount^(0+128),f	;volatile
  5224                           
  5225                           ;debounce.c: 47: if(pb3DebounceCount > 10 && pb3Released){
  5226  0D63  300B               	movlw	11
  5227  0D64  0230               	subwf	_pb3DebounceCount^(0+128),w	;volatile
  5228  0D65  1C03               	skipc
  5229  0D66  0008               	return
  5230  0D67  1EFA               	btfss	_pb3Released/(0+8),_pb3Released& (0+7)	;volatile
  5231  0D68  0008               	return
  5232                           
  5233                           ;debounce.c: 48: pb3Pressed = 1;
  5234  0D69  167A               	bsf	_pb3Pressed/(0+8),_pb3Pressed& (0+7)	;volatile
  5235                           
  5236                           ;debounce.c: 49: pb3Released = 0;
  5237  0D6A  12FA               	bcf	_pb3Released/(0+8),_pb3Released& (0+7)	;volatile
  5238                           
  5239                           ;debounce.c: 50: }
  5240                           ;debounce.c: 51: } else {
  5241  0D6B  0008               	return
  5242  0D6C                     i1l2143:	
  5243                           
  5244                           ;debounce.c: 52: pb3DebounceCount = 0;
  5245  0D6C  1683               	bsf	3,5	;RP0=1, select bank1
  5246  0D6D  1303               	bcf	3,6	;RP1=0, select bank1
  5247  0D6E  01B0               	clrf	_pb3DebounceCount^(0+128)	;volatile
  5248                           
  5249                           ;debounce.c: 53: pb3Released = 1;
  5250  0D6F  16FA               	bsf	_pb3Released/(0+8),_pb3Released& (0+7)	;volatile
  5251  0D70  0008               	return
  5252  0D71                     __end_of_pressbutton3:	
  5253                           
  5254                           	psect	text25
  5255  0D06                     __ptext25:	
  5256 ;; *************** function _pressbutton2 *****************
  5257 ;; Defined at:
  5258 ;;		line 31 in file "debounce.c"
  5259 ;; Parameters:    Size  Location     Type
  5260 ;;		None
  5261 ;; Auto vars:     Size  Location     Type
  5262 ;;		None
  5263 ;; Return value:  Size  Location     Type
  5264 ;;		None               void
  5265 ;; Registers used:
  5266 ;;		wreg, status,2, status,0
  5267 ;; Tracked objects:
  5268 ;;		On entry : 0/0
  5269 ;;		On exit  : 0/0
  5270 ;;		Unchanged: 0/0
  5271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5272 ;;      Params:         0       0       0       0       0
  5273 ;;      Locals:         0       0       0       0       0
  5274 ;;      Temps:          1       0       0       0       0
  5275 ;;      Totals:         1       0       0       0       0
  5276 ;;Total ram usage:        1 bytes
  5277 ;; Hardware stack levels used:    1
  5278 ;; This function calls:
  5279 ;;		Nothing
  5280 ;; This function is called by:
  5281 ;;		_isr
  5282 ;; This function uses a non-reentrant model
  5283 ;;
  5284                           
  5285                           
  5286                           ;psect for function _pressbutton2
  5287  0D06                     _pressbutton2:	
  5288                           
  5289                           ;debounce.c: 32: if(!RB3){
  5290                           
  5291                           ;incstack = 0
  5292                           ; Regs used in _pressbutton2: [wreg+status,2+status,0]
  5293  0D06  1283               	bcf	3,5	;RP0=0, select bank0
  5294  0D07  1303               	bcf	3,6	;RP1=0, select bank0
  5295  0D08  1986               	btfsc	6,3	;volatile
  5296  0D09  2D17               	goto	i1l2129
  5297                           
  5298                           ;debounce.c: 33: pb2DebounceCount++;
  5299  0D0A  3001               	movlw	1
  5300  0D0B  00F0               	movwf	??_pressbutton2
  5301  0D0C  0870               	movf	??_pressbutton2,w
  5302  0D0D  07FD               	addwf	_pb2DebounceCount,f	;volatile
  5303                           
  5304                           ;debounce.c: 34: if(pb2DebounceCount > 10 && pb2Released){
  5305  0D0E  300B               	movlw	11
  5306  0D0F  027D               	subwf	_pb2DebounceCount,w	;volatile
  5307  0D10  1C03               	skipc
  5308  0D11  0008               	return
  5309  0D12  1DFA               	btfss	_pb2Released/(0+8),_pb2Released& (0+7)	;volatile
  5310  0D13  0008               	return
  5311                           
  5312                           ;debounce.c: 35: pb2Pressed = 1;
  5313  0D14  157A               	bsf	_pb2Pressed/(0+8),_pb2Pressed& (0+7)	;volatile
  5314                           
  5315                           ;debounce.c: 36: pb2Released = 0;
  5316  0D15  11FA               	bcf	_pb2Released/(0+8),_pb2Released& (0+7)	;volatile
  5317                           
  5318                           ;debounce.c: 37: }
  5319                           ;debounce.c: 38: } else {
  5320  0D16  0008               	return
  5321  0D17                     i1l2129:	
  5322                           
  5323                           ;debounce.c: 39: pb2DebounceCount = 0;
  5324  0D17  01FD               	clrf	_pb2DebounceCount	;volatile
  5325                           
  5326                           ;debounce.c: 40: pb2Released = 1;
  5327  0D18  15FA               	bsf	_pb2Released/(0+8),_pb2Released& (0+7)	;volatile
  5328  0D19  0008               	return
  5329  0D1A                     __end_of_pressbutton2:	
  5330                           
  5331                           	psect	text26
  5332  0CF2                     __ptext26:	
  5333 ;; *************** function _pressbutton1 *****************
  5334 ;; Defined at:
  5335 ;;		line 18 in file "debounce.c"
  5336 ;; Parameters:    Size  Location     Type
  5337 ;;		None
  5338 ;; Auto vars:     Size  Location     Type
  5339 ;;		None
  5340 ;; Return value:  Size  Location     Type
  5341 ;;		None               void
  5342 ;; Registers used:
  5343 ;;		wreg, status,2, status,0
  5344 ;; Tracked objects:
  5345 ;;		On entry : 0/0
  5346 ;;		On exit  : 0/0
  5347 ;;		Unchanged: 0/0
  5348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5349 ;;      Params:         0       0       0       0       0
  5350 ;;      Locals:         0       0       0       0       0
  5351 ;;      Temps:          1       0       0       0       0
  5352 ;;      Totals:         1       0       0       0       0
  5353 ;;Total ram usage:        1 bytes
  5354 ;; Hardware stack levels used:    1
  5355 ;; This function calls:
  5356 ;;		Nothing
  5357 ;; This function is called by:
  5358 ;;		_isr
  5359 ;; This function uses a non-reentrant model
  5360 ;;
  5361                           
  5362                           
  5363                           ;psect for function _pressbutton1
  5364  0CF2                     _pressbutton1:	
  5365                           
  5366                           ;debounce.c: 19: if(!RB2){
  5367                           
  5368                           ;incstack = 0
  5369                           ; Regs used in _pressbutton1: [wreg+status,2+status,0]
  5370  0CF2  1283               	bcf	3,5	;RP0=0, select bank0
  5371  0CF3  1303               	bcf	3,6	;RP1=0, select bank0
  5372  0CF4  1906               	btfsc	6,2	;volatile
  5373  0CF5  2D03               	goto	i1l2115
  5374                           
  5375                           ;debounce.c: 20: pb1DebounceCount++;
  5376  0CF6  3001               	movlw	1
  5377  0CF7  00F0               	movwf	??_pressbutton1
  5378  0CF8  0870               	movf	??_pressbutton1,w
  5379  0CF9  07FC               	addwf	_pb1DebounceCount,f	;volatile
  5380                           
  5381                           ;debounce.c: 21: if(pb1DebounceCount > 10 && pb1Released){
  5382  0CFA  300B               	movlw	11
  5383  0CFB  027C               	subwf	_pb1DebounceCount,w	;volatile
  5384  0CFC  1C03               	skipc
  5385  0CFD  0008               	return
  5386  0CFE  1CFA               	btfss	_pb1Released/(0+8),_pb1Released& (0+7)	;volatile
  5387  0CFF  0008               	return
  5388                           
  5389                           ;debounce.c: 22: pb1Pressed = 1;
  5390  0D00  147A               	bsf	_pb1Pressed/(0+8),_pb1Pressed& (0+7)	;volatile
  5391                           
  5392                           ;debounce.c: 23: pb1Released = 0;
  5393  0D01  10FA               	bcf	_pb1Released/(0+8),_pb1Released& (0+7)	;volatile
  5394                           
  5395                           ;debounce.c: 24: }
  5396                           ;debounce.c: 25: } else {
  5397  0D02  0008               	return
  5398  0D03                     i1l2115:	
  5399                           
  5400                           ;debounce.c: 26: pb1DebounceCount = 0;
  5401  0D03  01FC               	clrf	_pb1DebounceCount	;volatile
  5402                           
  5403                           ;debounce.c: 27: pb1Released = 1;
  5404  0D04  14FA               	bsf	_pb1Released/(0+8),_pb1Released& (0+7)	;volatile
  5405  0D05  0008               	return
  5406  0D06                     __end_of_pressbutton1:	
  5407                           
  5408                           	psect	text27
  5409  0E1B                     __ptext27:	
  5410 ;; *************** function ___lwmod *****************
  5411 ;; Defined at:
  5412 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  5413 ;; Parameters:    Size  Location     Type
  5414 ;;  divisor         2    0[COMMON] unsigned int 
  5415 ;;  dividend        2    2[COMMON] unsigned int 
  5416 ;; Auto vars:     Size  Location     Type
  5417 ;;  counter         1    5[COMMON] unsigned char 
  5418 ;; Return value:  Size  Location     Type
  5419 ;;                  2    0[COMMON] unsigned int 
  5420 ;; Registers used:
  5421 ;;		wreg, status,2, status,0
  5422 ;; Tracked objects:
  5423 ;;		On entry : 0/0
  5424 ;;		On exit  : 0/0
  5425 ;;		Unchanged: 0/0
  5426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5427 ;;      Params:         4       0       0       0       0
  5428 ;;      Locals:         1       0       0       0       0
  5429 ;;      Temps:          1       0       0       0       0
  5430 ;;      Totals:         6       0       0       0       0
  5431 ;;Total ram usage:        6 bytes
  5432 ;; Hardware stack levels used:    1
  5433 ;; This function calls:
  5434 ;;		Nothing
  5435 ;; This function is called by:
  5436 ;;		_isr
  5437 ;; This function uses a non-reentrant model
  5438 ;;
  5439                           
  5440                           
  5441                           ;psect for function ___lwmod
  5442  0E1B                     ___lwmod:	
  5443                           
  5444                           ;incstack = 0
  5445                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  5446  0E1B  0870               	movf	___lwmod@divisor,w
  5447  0E1C  0471               	iorwf	___lwmod@divisor+1,w
  5448  0E1D  1903               	btfsc	3,2
  5449  0E1E  2E48               	goto	i1l2179
  5450  0E1F  01F5               	clrf	___lwmod@counter
  5451  0E20  0AF5               	incf	___lwmod@counter,f
  5452  0E21                     i1l2169:	
  5453  0E21  1BF1               	btfsc	___lwmod@divisor+1,7
  5454  0E22  2E2F               	goto	i1l2171
  5455  0E23  3001               	movlw	1
  5456  0E24                     u294_25:	
  5457  0E24  1003               	clrc
  5458  0E25  0DF0               	rlf	___lwmod@divisor,f
  5459  0E26  0DF1               	rlf	___lwmod@divisor+1,f
  5460  0E27  3EFF               	addlw	-1
  5461  0E28  1D03               	skipz
  5462  0E29  2E24               	goto	u294_25
  5463  0E2A  3001               	movlw	1
  5464  0E2B  00F4               	movwf	??___lwmod
  5465  0E2C  0874               	movf	??___lwmod,w
  5466  0E2D  07F5               	addwf	___lwmod@counter,f
  5467  0E2E  2E21               	goto	i1l2169
  5468  0E2F                     i1l2171:	
  5469  0E2F  0871               	movf	___lwmod@divisor+1,w
  5470  0E30  0273               	subwf	___lwmod@dividend+1,w
  5471  0E31  1D03               	skipz
  5472  0E32  2E35               	goto	u296_25
  5473  0E33  0870               	movf	___lwmod@divisor,w
  5474  0E34  0272               	subwf	___lwmod@dividend,w
  5475  0E35                     u296_25:	
  5476  0E35  1C03               	skipc
  5477  0E36  2E3D               	goto	i1l2175
  5478  0E37  0870               	movf	___lwmod@divisor,w
  5479  0E38  02F2               	subwf	___lwmod@dividend,f
  5480  0E39  0871               	movf	___lwmod@divisor+1,w
  5481  0E3A  1C03               	skipc
  5482  0E3B  03F3               	decf	___lwmod@dividend+1,f
  5483  0E3C  02F3               	subwf	___lwmod@dividend+1,f
  5484  0E3D                     i1l2175:	
  5485  0E3D  3001               	movlw	1
  5486  0E3E                     u297_25:	
  5487  0E3E  1003               	clrc
  5488  0E3F  0CF1               	rrf	___lwmod@divisor+1,f
  5489  0E40  0CF0               	rrf	___lwmod@divisor,f
  5490  0E41  3EFF               	addlw	-1
  5491  0E42  1D03               	skipz
  5492  0E43  2E3E               	goto	u297_25
  5493  0E44  3001               	movlw	1
  5494  0E45  02F5               	subwf	___lwmod@counter,f
  5495  0E46  1D03               	btfss	3,2
  5496  0E47  2E2F               	goto	i1l2171
  5497  0E48                     i1l2179:	
  5498  0E48  0873               	movf	___lwmod@dividend+1,w
  5499  0E49  00F1               	movwf	?___lwmod+1
  5500  0E4A  0872               	movf	___lwmod@dividend,w
  5501  0E4B  00F0               	movwf	?___lwmod
  5502  0E4C  0008               	return
  5503  0E4D                     __end_of___lwmod:	
  5504  007E                     btemp	set	126	;btemp
  5505  007E                     wtemp	set	126
  5506  007E                     wtemp0	set	126
  5507  0080                     wtemp1	set	128
  5508  0082                     wtemp2	set	130
  5509  0084                     wtemp3	set	132
  5510  0086                     wtemp4	set	134
  5511  0088                     wtemp5	set	136
  5512  007F                     wtemp6	set	127
  5513  007E                     ttemp	set	126
  5514  007E                     ttemp0	set	126
  5515  0081                     ttemp1	set	129
  5516  0084                     ttemp2	set	132
  5517  0087                     ttemp3	set	135
  5518  007F                     ttemp4	set	127
  5519  007E                     ltemp	set	126
  5520  007E                     ltemp0	set	126
  5521  0082                     ltemp1	set	130
  5522  0086                     ltemp2	set	134
  5523  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         20
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      14
    BANK0            80     80      80
    BANK1            80     10      28
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->___lwmod

Critical Paths under _main in BANK0

    _setupLCD->_lcdWriteControl
    _idle->_lcdWrite4DigitBcd
    _getADCmm->___fttol
    ___lwtoft->___ftpack
    ___fttol->___ftdiv
    ___ftmul->___ftadd
    ___ftdiv->___ftmul
    ___ftadd->___lwtoft
    _cwMovStepMotor->_lcdWrite4DigitBcd
    _ccwMovStepMotor->_lcdWrite4DigitBcd
    _lcdWrite4DigitBcd->_getADCmm
    _lcdSetCursor->_lcdWriteControl

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _initStepMotor->_ccwMovStepMotor
    _initStepMotor->_cwMovStepMotor
    _idle->_lcdWrite4DigitBcd
    _buttListener->_ccwMovStepMotor
    _buttListener->_cwMovStepMotor
    _cwMovStepMotor->_lcdWrite4DigitBcd
    _ccwMovStepMotor->_lcdWrite4DigitBcd

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   17135
                       _buttListener
                               _idle
                               _init
                           _setupLCD
 ---------------------------------------------------------------------------------
 (1) _setupLCD                                             0     0      0      22
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0    2178
                      _initStepMotor
                           _setupADC
 ---------------------------------------------------------------------------------
 (2) _setupADC                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _initStepMotor                                        0     0      0    2178
                    _ccwMovStepMotor
                     _cwMovStepMotor
 ---------------------------------------------------------------------------------
 (1) _idle                                                 2     2      0   12757
                                              4 BANK1      2     2      0
                             _getADC
                           _getADCmm
                       _lcdSetCursor
                  _lcdWrite4DigitBcd
                      _lcd_WriteData
 ---------------------------------------------------------------------------------
 (2) _getADCmm                                             6     4      2   11804
                                             71 BANK0      6     4      2
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                             ___wmul
                             _getADC
 ---------------------------------------------------------------------------------
 (3) _getADC                                               7     5      2      47
                                              0 BANK0      7     5      2
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     516
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwtoft                                             4     1      3    2100
                                              8 BANK0      4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     623
                                             57 BANK0     14    10      4
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    2351
                                             25 BANK0     16    10      6
                            ___ftadd (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    2729
                                             41 BANK0     16    10      6
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    2945
                                             12 BANK0     13     7      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1707
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _buttListener                                         0     0      0    2178
                    _ccwMovStepMotor
                     _cwMovStepMotor
 ---------------------------------------------------------------------------------
 (3) _cwMovStepMotor                                       6     4      2    1089
                                              4 BANK1      6     4      2
                       _lcdSetCursor
                  _lcdWrite4DigitBcd
 ---------------------------------------------------------------------------------
 (3) _ccwMovStepMotor                                      6     4      2    1089
                                              4 BANK1      6     4      2
                       _lcdSetCursor
                  _lcdWrite4DigitBcd
 ---------------------------------------------------------------------------------
 (4) _lcdWrite4DigitBcd                                    7     4      3     839
                                             77 BANK0      3     0      3
                                              0 BANK1      4     4      0
                             _getADC (ARG)
                           _getADCmm (ARG)
                      _lcd_WriteData
 ---------------------------------------------------------------------------------
 (5) _lcd_WriteData                                        3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) _lcdSetCursor                                         1     1      0      45
                                              3 BANK0      1     1      0
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (2) _lcdWriteControl                                      3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _isr                                                  4     4      0     265
                                              6 COMMON     4     4      0
                            ___lwmod
                       _pressbutton1
                       _pressbutton2
                       _pressbutton3
                       _pressbutton5
 ---------------------------------------------------------------------------------
 (7) _pressbutton5                                         1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _pressbutton3                                         1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _pressbutton2                                         1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _pressbutton1                                         1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) ___lwmod                                              6     2      4     265
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _buttListener
     _ccwMovStepMotor
       _lcdSetCursor
         _lcdWriteControl
       _lcdWrite4DigitBcd
         _getADC (ARG)
         _getADCmm (ARG)
           ___ftadd
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
           ___ftdiv
             ___ftadd (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
             ___ftmul (ARG)
               ___ftadd (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___ftadd (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
           ___fttol
             ___ftadd (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
               ___ftmul (ARG)
                 ___ftadd (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___ftadd (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___wmul (ARG)
           ___lwtoft
             ___ftpack
             ___wmul (ARG)
           ___wmul
           _getADC
         _lcd_WriteData (ARG)
     _cwMovStepMotor
       _lcdSetCursor
         _lcdWriteControl
       _lcdWrite4DigitBcd
         _getADC (ARG)
         _getADCmm (ARG)
           ___ftadd
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
           ___ftdiv
             ___ftadd (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
             ___ftmul (ARG)
               ___ftadd (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___ftadd (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
           ___fttol
             ___ftadd (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
               ___ftmul (ARG)
                 ___ftadd (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___ftadd (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___wmul (ARG)
           ___lwtoft
             ___ftpack
             ___wmul (ARG)
           ___wmul
           _getADC
         _lcd_WriteData (ARG)
   _idle
     _getADC
     _getADCmm
       ___ftadd
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
         ___ftmul (ARG)
           ___ftadd (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___wmul (ARG)
       ___ftmul
         ___ftadd (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
       ___fttol
         ___ftadd (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
           ___ftmul (ARG)
             ___ftadd (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___ftadd (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___wmul (ARG)
       ___lwtoft
         ___ftpack
         ___wmul (ARG)
       ___wmul
       _getADC
     _lcdSetCursor
       _lcdWriteControl
     _lcdWrite4DigitBcd
       _getADC (ARG)
       _getADCmm (ARG)
         ___ftadd
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
           ___ftmul (ARG)
             ___ftadd (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul
           ___ftadd (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
         ___fttol
           ___ftadd (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
             ___ftmul (ARG)
               ___ftadd (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftadd (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___wmul (ARG)
         ___lwtoft
           ___ftpack
           ___wmul (ARG)
         ___wmul
         _getADC
       _lcd_WriteData (ARG)
     _lcd_WriteData
   _init
     _initStepMotor
       _ccwMovStepMotor
         _lcdSetCursor
           _lcdWriteControl
         _lcdWrite4DigitBcd
           _getADC (ARG)
           _getADCmm (ARG)
             ___ftadd
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
               ___ftmul (ARG)
                 ___ftadd (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___ftadd (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
             ___fttol
               ___ftadd (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
               ___ftdiv (ARG)
                 ___ftadd (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                 ___ftmul (ARG)
                   ___ftadd (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                       ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___ftadd (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___wmul (ARG)
             ___lwtoft
               ___ftpack
               ___wmul (ARG)
             ___wmul
             _getADC
           _lcd_WriteData (ARG)
       _cwMovStepMotor
         _lcdSetCursor
           _lcdWriteControl
         _lcdWrite4DigitBcd
           _getADC (ARG)
           _getADCmm (ARG)
             ___ftadd
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
             ___ftdiv
               ___ftadd (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
               ___ftmul (ARG)
                 ___ftadd (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___ftadd (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
             ___fttol
               ___ftadd (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
               ___ftdiv (ARG)
                 ___ftadd (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                 ___ftmul (ARG)
                   ___ftadd (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                       ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___ftadd (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___wmul (ARG)
             ___lwtoft
               ___ftpack
               ___wmul (ARG)
             ___wmul
             _getADC
           _lcd_WriteData (ARG)
     _setupADC
   _setupLCD
     _lcdWriteControl

 _isr (ROOT)
   ___lwmod
   _pressbutton1
   _pressbutton2
   _pressbutton3
   _pressbutton5

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       2       0       14.3%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      7A       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      A      1C       7       35.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      7A      12        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Mon Aug 22 16:29:21 2016

                           _j 00A2                   __CFG_CP$OFF 0000             _lcdWrite4DigitBcd 020A  
                          _GO 00FA                            fsr 0004           ___wmul@multiplicand 0022  
          ?_lcdWrite4DigitBcd 006D                  ___ftadd@exp1 0038                  ___ftadd@exp2 0037  
                ___ftadd@sign 0036                           l113 069A                           l301 0205  
                         l135 0740                           l262 032E                           l417 0DDD  
                         l294 0E56                           l609 0454                           l585 07CE  
                         l586 07D6                           l578 07B9                           l669 0FE6  
                         _GIE 005F                           _RB0 0030                           _RB1 0031  
                         _RB2 0032                           _RB3 0033                           _RB4 0034  
                         _RE0 0048                           _RB6 0036                           _RE1 0049  
                         _RE2 004A                  __CFG_CPD$OFF 0000                           _isr 0ECC  
                         fsr0 0004                           indf 0000                  __CFG_FOSC$HS 0000  
             _ccwMovStepMotor 0640           ??_lcdWrite4DigitBcd 00B2                  __CFG_LVP$OFF 0000  
                ___ftdiv@cntr 0053                  ___ftdiv@sign 0058                          l2001 00E8  
                        l2101 0EC0                          l2013 0167                          l2007 0131  
                        l2025 0201                          l2019 019D                          l1601 0384  
                        l2091 0EAA                          l1701 071A                          l2085 0E9C  
                        l1613 0792                          l1551 026A                          l1527 021B  
                        l2079 0E8E                          l1615 079E                          l1553 0272  
                        l1545 0246                          l1721 075F                          l1713 0735  
                        l1705 0723                          l1625 07CC                          l1617 07A3  
                        l1609 078B                          l2185 0D33                          l1547 025C  
                        l1651 066B                          l1643 065A                          l1627 07BE  
                        l1803 0444                          l1581 02D8                          l1557 0280  
                        l1709 072C                          l1813 0478                          l1805 0450  
                        l1583 02E0                          l1575 02B4                          l1559 0288  
                        l1663 0686                          l1655 0674                          l1647 0662  
                        l1727 06EA                          l1823 049B                          l1577 02CA  
                        l1681 0644                          l1809 0466                          l1833 05A0  
                        l1905 054A                          l1745 0DD5                          l1587 02EE  
                        l1675 06C2                          l1667 068F                          l1659 067D  
                        l1763 03D5                          l1597 035B                          l1589 02F5  
                        l1693 0708                          l1773 03EB                          l1861 061A  
                        l1853 05FB                          l1909 055A                          l1925 0F8C  
                        l1791 041A                          l1767 03DC                          l1839 05B6  
                        l1951 0FDB                          l1943 0FBE                          l1697 0711  
                        l1689 0700                          l1793 0426                          l1785 0405  
                        l1881 04E3                          l1953 0FE9                          l1945 0FCE  
                        l1795 042B                          l1875 04CD                          l1797 042F  
                        l1893 0522                          l1957 0FF7                          l1897 0532  
                        l1995 00B0                          l1989 0065                          ?_isr 0070  
             cwMovStepMotor@i 00BA                          u2005 0E73                          u2025 0DDE  
                        u2035 0DE5                          u2205 0430                          u2145 0406  
                        u3017 0D56                          u2235 0445                          u2315 05C8  
                        u3027 0F6C                          u1525 0225                          u3037 0746  
                        u2325 05DA                          u2405 0501                          u3047 06A0  
                        u2175 041B                          u2335 05FC                          u3057 0CED  
                        u2345 060D                          u3067 0D28                          u1635 0303  
                        u1715 07B2                          u2355 061B                          u2435 0533  
                        u2445 053B                          u2525 0F93                          u1575 0293  
                        u1735 07C5                          u1585 02A0                          u2395 04EF  
                        u2555 0FBF                          u2485 055B                          u1775 07DD  
                        u1695 0797                          u2495 0563                          u2585 0FDD  
                        u1875 06BC                          u1885 0650                          u1985 06F6  
                        i1l93 0F07               ??_lcd_WriteData 0020                          _TMR0 0001  
                __CFG_WRT$OFF 0000                          _idle 0F14                          _main 0D2E  
              _thousandthDigi 00AE                  ___ftpack@arg 0020                          _init 0DB9  
                ___ftpack@exp 0023                          btemp 007E                          ltemp 007E  
                        start 0012                          ttemp 007E                          wtemp 007E  
                ___ftmul@cntr 0047                  ___ftmul@sign 0048     __end_of_lcdWrite4DigitBcd 03AC  
                ___fttol@exp1 0066                  ___fttol@lval 0062                         ??_isr 0076  
                       ?_idle 0070                         ?_main 0070                         ?_init 0070  
             __end_of___ftadd 04B5                 __CFG_WDTE$OFF 0000               __end_of___ftdiv 0640  
             __end_of___ftmul 0588               __end_of___fttol 1000               __end_of___lwmod 0E4D  
                       _PORTA 0005                         _PORTC 0007                         _PORTD 0008  
                       _PORTE 0009                         _TRISA 0085                         _TRISB 0086  
                       _TRISC 0087                         _TRISD 0088                         _TRISE 0089  
               ___ftpack@sign 0024                __pbitbssCOMMON 03D0                __CFG_BOREN$OFF 0000  
                       pclath 000A                         ltemp0 007E                         ltemp1 0082  
                       ltemp2 0086                         ltemp3 0080                         ttemp0 007E  
                       ttemp1 0081                         ttemp2 0084                         ttemp3 0087  
                       ttemp4 007F                         status 0003                         wtemp0 007E  
                       wtemp1 0080                         wtemp2 0082                         wtemp3 0084  
                       wtemp4 0086                         wtemp5 0088                         wtemp6 007F  
               ?_buttListener 0070               __initialization 0015                  __end_of_idle 0F72  
                __end_of_main 0D43                  __end_of_init 0DD1      __size_of_lcdWriteControl 0014  
     __end_of_ccwMovStepMotor 06E6                        ??_idle 00B6                        ??_main 0070  
               ___fttol@sign1 0061                        ??_init 0070          __end_of_lcdSetCursor 07F8  
      __size_of_initStepMotor 0018                        _ADCON0 001F                        _ADCON1 009F  
                      _ADRESH 001E                        _ADRESL 009E              __end_of___ftpack 07EF  
                      i1l2115 0D03                        i1l2205 0EF3                        i1l2143 0D6C  
                      i1l2129 0D17                        i1l2171 0E2F                        i1l2157 0D84  
                      i1l2175 0E3D                        i1l2169 0E21                        i1l2179 0E48  
            __end_of___lwtoft 0DA1                        u294_25 0E24                        u296_25 0E35  
                      u297_25 0E3E                        _TMR0IE 005D                        _TMR0IF 005A  
            __end_of_getADCmm 020A                ??_buttListener 0070                __CFG_PWRTE$OFF 0000  
  __size_of_lcdWrite4DigitBcd 01A2                        ___wmul 0DD1                        _getADC 0E4D  
                   ??___ftadd 0032                     ??___ftdiv 004F                     ??___ftmul 003F  
                   ??___fttol 005D                     ??___lwmod 0074         ___ftmul@f3_as_product 0044  
            __end_of_setupADC 0D59              __end_of_setupLCD 0E1B                        saved_w 007E  
     __end_of__initialization 0020                    ___ftadd@f1 002C                    ___ftadd@f2 002F  
                  ___ftdiv@f1 004C                    ___ftdiv@f2 0049                    ___ftdiv@f3 0054  
                  ___ftmul@f1 0039                    ___ftmul@f2 003C                    ___fttol@f1 0059  
              __pcstackCOMMON 0070                 _initStepMotor 0DA1                    _pb1Pressed 03D0  
 lcdWrite4DigitBcd@newdecimal 00B4                    _pb2Pressed 03D2                    _pb3Pressed 03D4  
                  _pb5Pressed 03D6   cwMovStepMotor@numberOfSteps 00B6                    ___lwtoft@c 0028  
            ?_ccwMovStepMotor 00B6       __size_of_cwMovStepMotor 009B              ccwMovStepMotor@i 00BA  
           ??_lcdWriteControl 0020                    __pbssBANK1 00A0              _pb1DebounceCount 007C  
         lcdSetCursor@address 0023                ?_initStepMotor 0070                    __pmaintext 0D2E  
                     ?___wmul 0020                       ?_getADC 0020                    __pintentry 0004  
       __size_of_lcdSetCursor 0009                     ?___ftpack 0020                     ?___lwtoft 0028  
        __end_of_buttListener 0ECC                     ?_getADCmm 0067         __end_of_lcd_WriteData 0CF2  
                _lcdSetCursor 07EF                     ?_setupADC 0070                     ?_setupLCD 0070  
                     ___ftadd 03AC                       ___ftdiv 0588               __size_of___wmul 0023  
                     ___ftmul 04B5               __size_of_getADC 003A                       ___fttol 0F72  
                     ___lwmod 0E1B                    ??___ftpack 0025               getADCmm@adcRAWs 006B  
                     __ptext0 0000                       __ptext1 0DF4                       __ptext2 0DB9  
                     __ptext3 0D43                       __ptext4 0DA1                       __ptext5 0F14  
                     __ptext6 0024                       __ptext7 0E4D                       __ptext8 0DD1  
                     __ptext9 0D89               getADCmm@adcReal 0069                    ??___lwtoft 002B  
                  ??_getADCmm 0069                  __size_of_isr 0048                       _stepPos 00A8  
                     clrloop0 07F9          end_of_initialization 0020              _pb2DebounceCount 007D  
             ??_initStepMotor 0070                    _rtcCounter 00A6                    ??_setupADC 0020  
                  ??_setupLCD 0023         lcdWrite4DigitBcd@sign 006F                 _hundredthDigi 00A0  
              _cwMovStepMotor 06E6                 ?_pressbutton1 0070                 ?_pressbutton2 0070  
               ?_pressbutton3 0070                 ?_pressbutton5 0070                  getADC@adcRAW 0025  
                 ___ftdiv@exp 0057                   ___ftmul@exp 0043                   _pb1Released 03D1  
                 _pb2Released 03D3         __size_of_buttListener 0045               _lcdWriteControl 0D1A  
              __end_of___wmul 0DF4                __end_of_getADC 0E87                   _pb3Released 03D5  
      __end_of_cwMovStepMotor 0781                   _pb5Released 03D7                ??_pressbutton1 0070  
              ??_pressbutton2 0070                ??_pressbutton3 0070                ??_pressbutton5 0070  
         start_initialization 0015                   __end_of_isr 0F14              _pb3DebounceCount 00B0  
                _buttListener 0E87                      ??___wmul 0024                      ??_getADC 0022  
             ?_cwMovStepMotor 00B6             __size_of___ftpack 006E                   __pbssCOMMON 007C  
                   ___latbits 0002             __size_of___lwtoft 0018                 __pcstackBANK0 0020  
               __pcstackBANK1 00B2             __size_of_getADCmm 01E6      __size_of_ccwMovStepMotor 00A6  
     __end_of_lcdWriteControl 0D2E  ccwMovStepMotor@numberOfSteps 00B6                      ?___ftadd 002C  
                    ?___ftdiv 0049                      ?___ftmul 0039                      ?___fttol 0059  
                    ?___lwmod 0070             __size_of_setupADC 0016             __size_of_setupLCD 0027  
     lcdWriteControl@databyte 0022             interrupt_function 0004                ___wmul@product 0024  
                   clear_ram0 07F8          __end_of_pressbutton1 0D06          __end_of_pressbutton2 0D1A  
        __end_of_pressbutton3 0D71          __end_of_pressbutton5 0D89                     _stepState 00AA  
           ___wmul@multiplier 0020        __size_of_lcd_WriteData 0013             ??_ccwMovStepMotor 00B8  
            ?_lcdWriteControl 0070         __end_of_initStepMotor 0DB9                  _rtcFlag500MS 03D8  
            __size_of___ftadd 0109              __size_of___ftdiv 00B8              __size_of___ftmul 00D3  
            __size_of___fttol 008E              __size_of___lwmod 0032                      ___ftpack 0781  
                    ___lwtoft 0D89                      _getADCmm 0024      lcdWrite4DigitBcd@decimal 006D  
                    __ptext10 0F72                      __ptext11 04B5                      __ptext20 07EF  
                    __ptext12 0588                      __ptext21 0D1A                      __ptext13 03AC  
                    __ptext22 0ECC                      __ptext14 0781                      __ptext23 0D71  
                    __ptext15 0E87                      __ptext24 0D59                      __ptext16 06E6  
                    __ptext25 0D06                      __ptext17 0640                      __ptext26 0CF2  
                    __ptext18 020A                      __ptext27 0E1B                      __ptext19 0CDF  
               __size_of_idle 005E                 __size_of_main 0015                 __size_of_init 0018  
               _lcd_WriteData 0CDF                      _onesDigi 00A4              _pb5DebounceCount 00B1  
                    _tensDigi 00AC                      _setupADC 0D43              ??_cwMovStepMotor 00B8  
                    _setupLCD 0DF4         lcd_WriteData@databyte 0022                      intlevel1 0000  
       __size_of_pressbutton1 0014         __size_of_pressbutton2 0014         __size_of_pressbutton3 0018  
       __size_of_pressbutton5 0018              ___lwmod@dividend 0072                ?_lcd_WriteData 0070  
               ?_lcdSetCursor 0070                    _OPTION_REG 0081               ___lwmod@divisor 0070  
             ___lwmod@counter 0075                  _pressbutton1 0CF2                  _pressbutton2 0D06  
                _pressbutton3 0D59                  _pressbutton5 0D71                ??_lcdSetCursor 0023  
